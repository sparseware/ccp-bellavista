//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/service/aRemoteService.java
//
//  Created by decoteaud on 11/18/15.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/URLEncoder.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation CCPBVaRemoteService

static NSString * CCPBVaRemoteService_HTML_START_ = @"<html>\n<body>\n<pre style=\"font-size:0.8em; font-family: Lucida Console, Monaco, Menlo, Courier New,monospace\">";
static NSString * CCPBVaRemoteService_HTML_END_ = @"</pre>\n</body>\n</html>";

+ (NSString *)HTML_START {
  return CCPBVaRemoteService_HTML_START_;
}

+ (NSString *)HTML_END {
  return CCPBVaRemoteService_HTML_END_;
}

- (id)init {
  return [super init];
}

+ (NSString *)textToHTMLWithNSString:(NSString *)text {
  if ([((NSString *) nil_chk(text)) hasPrefix:@"</html>"]) {
    return text;
  }
  else if ([text hasPrefix:@"<div>"]) {
    return [NSString stringWithFormat:@"<html>%@</html>", text];
  }
  else {
    return [NSString stringWithFormat:@"<html>\n<body>\n<pre style=\"font-size:0.8em; font-family: Lucida Console, Monaco, Menlo, Courier New,monospace\">%@</pre>\n</body>\n</html>", text];
  }
}

+ (NSString *)getExtensionWithCCPBVActionPath:(CCPBVActionPath *)path {
  NSString *s = [((CCPBVActionPath *) nil_chk(path)) peek];
  int n = (s == nil) ? -1 : [s indexOf:'.'];
  return (n == -1) ? nil : [((NSString *) nil_chk(s)) substring:n + 1];
}

- (void)demoWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  NSString *s = [((JavaNetURL *) nil_chk([((id<CCPBViHttpConnection>) nil_chk(conn)) getURL])) getFile];
  int n = [((NSString *) nil_chk(s)) indexOfString:@"/hub/"];
  if (n != -1) {
    s = [s substring:n];
  }
  JavaNetURL *u = [[JavaNetURL alloc] initWithNSString:[NSString stringWithFormat:@"http://192.168.1.51/apps/BellaVista/BellaVista-android/assets%@", s]];
  JavaNetHttpURLConnection *uc = (JavaNetHttpURLConnection *) check_class_cast([u openConnection], [JavaNetHttpURLConnection class]);
  [((JavaNetHttpURLConnection *) nil_chk(uc)) setRequestMethodWithNSString:[conn getRequestMethod]];
  if (data != nil) {
    [uc setDoOutputWithBoolean:YES];
    [RAREUTStreams streamToStreamWithJavaIoInputStream:data withJavaIoOutputStream:[uc getOutputStream] withByteArray:nil];
  }
  JavaIoInputStream *stream = [uc getInputStream];
  [((CCPBVHttpHeaders *) nil_chk(headers)) setStatusWithNSString:[uc getHeaderFieldWithInt:0]];
  int i = 1;
  while (i < 1000) {
    NSString *key = [uc getHeaderFieldKeyWithInt:i++];
    if (key == nil) {
      break;
    }
    [headers addWithNSString:key withNSString:[uc getHeaderFieldWithNSString:key]];
  }
  [RAREUTStreams streamToWriterWithJavaIoInputStream:stream withJavaIoWriter:[conn getContentWriter] withCharArray:nil];
  [((JavaIoInputStream *) nil_chk(stream)) close];
}

- (void)noDataWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                   withCCPBVActionPath:(CCPBVActionPath *)path
                           withBoolean:(BOOL)row
                  withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  NSString *ext = [CCPBVaRemoteService getExtensionWithCCPBVActionPath:path];
  if ([@"json" isEqual:ext]) {
    [headers mimeJson];
    [((CCPBVContentWriter *) nil_chk([((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter])) writeWithNSString:@"{}"];
  }
  else if ([@"html" isEqual:ext]) {
    [headers mimeHtml];
  }
  else if ([@"txt" isEqual:ext]) {
    [headers mimeText];
  }
  else {
    if (row) {
      [headers mimeRow];
    }
    else {
      [headers mimeList];
    }
  }
  (void) [((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter];
}

- (void)noDocumentWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                       withCCPBVActionPath:(CCPBVActionPath *)path
                      withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  CCPBVContentWriter *w = [((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter];
  NSString *ext = [CCPBVaRemoteService getExtensionWithCCPBVActionPath:path];
  NSString *text = [RAREPlatform getResourceAsStringWithNSString:@"bv.text.cant_load_document"];
  if ([@"html" isEqual:ext]) {
    [headers mimeHtml];
    [((CCPBVContentWriter *) nil_chk(w)) writeWithNSString:[CCPBVaRemoteService textToHTMLWithNSString:text]];
  }
  else if ([@"txt" isEqual:ext]) {
    [headers mimeText];
    [((CCPBVContentWriter *) nil_chk(w)) writeWithNSString:text];
  }
}

- (id<JavaUtilMap>)getQueryParamsWithJavaIoInputStream:(JavaIoInputStream *)stream {
  id<JavaUtilMap> params = [[JavaUtilHashMap alloc] init];
  JavaIoReader *r = [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:stream];
  RAREUTCharArray *s = [[RAREUTCharArray alloc] init];
  int c;
  while ((c = [r read]) != -1) {
    if (c == '&') {
      [self parseParamWithJavaUtilMap:params withRAREUTCharArray:s];
      s->_length_ = 0;
    }
    else {
      (void) [s appendWithChar:(unichar) c];
    }
  }
  [self parseParamWithJavaUtilMap:params withRAREUTCharArray:s];
  [((JavaIoInputStream *) nil_chk(stream)) close];
  return params;
}

- (id<JavaUtilMap>)getQueryParamsWithJavaNetURL:(JavaNetURL *)url {
  id<JavaUtilMap> params = [[JavaUtilHashMap alloc] init];
  NSString *s = [((JavaNetURL *) nil_chk(url)) getQuery];
  if ((s == nil) || ([s sequenceLength] == 0)) {
    return nil;
  }
  RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithNSString:s];
  while ((s = [sc nextTokenWithChar:'&']) != nil) {
    int n = [((NSString *) nil_chk(s)) indexOf:'='];
    if (n != -1) {
      if (([s indexOf:'+'] == -1) && ([s indexOf:'%'] == -1)) {
        (void) [params putWithId:[s substring:0 endIndex:n] withId:[s substring:n + 1]];
      }
      else {
        (void) [params putWithId:[s substring:0 endIndex:n] withId:[RAREUTURLEncoder decodeWithNSString:[s substring:n + 1]]];
      }
    }
  }
  return params;
}

- (id<JavaUtilMap>)getQueryParamsWithJavaNetURL:(JavaNetURL *)url
                          withJavaIoInputStream:(JavaIoInputStream *)stream {
  if (stream == nil) {
    return [self getQueryParamsWithJavaNetURL:url];
  }
  return [self getQueryParamsWithJavaIoInputStream:stream];
}

- (void)parseParamWithJavaUtilMap:(id<JavaUtilMap>)params
              withRAREUTCharArray:(RAREUTCharArray *)param {
  int n = [((RAREUTCharArray *) nil_chk(param)) indexOfWithChar:'='];
  if (n != -1) {
    if (([param indexOfWithChar:'+'] == -1) && ([param indexOfWithChar:'%'] == -1)) {
      (void) [((id<JavaUtilMap>) nil_chk(params)) putWithId:[param substringWithInt:0 withInt:n] withId:[param substringWithInt:n + 1]];
    }
    else {
      (void) [((id<JavaUtilMap>) nil_chk(params)) putWithId:[param substringWithInt:0 withInt:n] withId:[RAREUTURLEncoder decodeWithNSString:[param substringWithInt:n + 1]]];
    }
  }
  param->_length_ = 0;
}

+ (void)toStringWithJavaIoWriter:(JavaIoWriter *)w
                withJavaUtilList:(id<JavaUtilList>)list
                    withNSString:(NSString *)sep {
  int len = [((id<JavaUtilList>) nil_chk(list)) size] - 1;
  for (int i = 0; i < len; i++) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:(NSString *) check_class_cast([list getWithInt:i], [NSString class])];
    [w writeWithNSString:sep];
  }
  [((JavaIoWriter *) nil_chk(w)) writeWithNSString:(NSString *) check_class_cast([list getWithInt:len], [NSString class])];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "textToHTMLWithNSString:", NULL, "LNSString", 0x9, NULL },
    { "getExtensionWithCCPBVActionPath:", NULL, "LNSString", 0x9, NULL },
    { "demoWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "noDataWithCCPBViHttpConnection:withCCPBVActionPath:withBoolean:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "noDocumentWithCCPBViHttpConnection:withCCPBVActionPath:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "getQueryParamsWithJavaIoInputStream:", NULL, "LJavaUtilMap", 0x1, "JavaIoIOException" },
    { "getQueryParamsWithJavaNetURL:", NULL, "LJavaUtilMap", 0x1, NULL },
    { "getQueryParamsWithJavaNetURL:withJavaIoInputStream:", NULL, "LJavaUtilMap", 0x1, "JavaIoIOException" },
    { "parseParamWithJavaUtilMap:withRAREUTCharArray:", NULL, "V", 0x4, NULL },
    { "toStringWithJavaIoWriter:withJavaUtilList:withNSString:", NULL, "V", 0x9, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "HTML_START_", NULL, 0x19, "LNSString" },
    { "HTML_END_", NULL, 0x19, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVaRemoteService = { "aRemoteService", "com.sparseware.bellavista.service", NULL, 0x401, 10, methods, 2, fields, 0, NULL};
  return &_CCPBVaRemoteService;
}

@end
