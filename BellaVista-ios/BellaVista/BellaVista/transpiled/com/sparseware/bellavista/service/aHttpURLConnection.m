//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/service/aHttpURLConnection.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSByteArray.h"
#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/ErrorInformation.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iWeakReference.h"
#include "com/appnativa/rare/net/HTTPException.h"
#include "com/appnativa/rare/net/JavaURLConnection.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/HTTPDateUtils.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/URLEncoder.h"
#include "com/appnativa/util/io/BufferedReaderEx.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/MessageException.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/FileBackedBufferedOutputStream.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/NonFatalServiceException.h"
#include "com/sparseware/bellavista/service/aHttpURLConnection.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/Closeable.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Method.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/Date.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@implementation CCPBVaHttpURLConnection

static JavaUtilConcurrentConcurrentHashMap * CCPBVaHttpURLConnection_handlerMap_;
static JavaUtilConcurrentConcurrentHashMap * CCPBVaHttpURLConnection_badPathMap_;
static IOSObjectArray * CCPBVaHttpURLConnection_methodParams_;
static JavaIoInputStream * CCPBVaHttpURLConnection_nullStream_;

+ (JavaUtilConcurrentConcurrentHashMap *)handlerMap {
  return CCPBVaHttpURLConnection_handlerMap_;
}

+ (void)setHandlerMap:(JavaUtilConcurrentConcurrentHashMap *)handlerMap {
  CCPBVaHttpURLConnection_handlerMap_ = handlerMap;
}

+ (JavaUtilConcurrentConcurrentHashMap *)badPathMap {
  return CCPBVaHttpURLConnection_badPathMap_;
}

+ (void)setBadPathMap:(JavaUtilConcurrentConcurrentHashMap *)badPathMap {
  CCPBVaHttpURLConnection_badPathMap_ = badPathMap;
}

+ (IOSObjectArray *)methodParams {
  return CCPBVaHttpURLConnection_methodParams_;
}

+ (void)setMethodParams:(IOSObjectArray *)methodParams {
  CCPBVaHttpURLConnection_methodParams_ = methodParams;
}

+ (JavaIoInputStream *)nullStream {
  return CCPBVaHttpURLConnection_nullStream_;
}

+ (void)setNullStream:(JavaIoInputStream *)nullStream {
  CCPBVaHttpURLConnection_nullStream_ = nullStream;
}

- (id)initWithJavaNetURL:(JavaNetURL *)u
            withNSString:(NSString *)clsPackage {
  if (self = [super initWithJavaNetURL:u]) {
    headers_ = [[CCPBVHttpHeaders alloc] init];
    HUB_SUBSTRING_ = @"/hub/main/";
    defaultCharset_ = @"ISO-8859-1";
    self->clsPackage_ = clsPackage;
  }
  return self;
}

- (void)connect {
  if (serviceMethod_ == nil) {
    @try {
      [self connectToService];
    }
    @catch (JavaLangException *e) {
      @throw [[JavaIoIOException alloc] initWithJavaLangThrowable:e];
    }
  }
  connected_ = serviceMethod_ != nil;
}

- (void)disconnect {
  [self closeStreamWithJavaIoCloseable:inStream_];
  [self closeStreamWithJavaIoCloseable:outStream_];
  [self closeStreamWithJavaIoCloseable:errStream_];
  inStream_ = nil;
  outStream_ = nil;
  [((CCPBVHttpHeaders *) nil_chk(headers_)) clear];
  connected_ = NO;
  if (connectionPipe_ != nil) {
    @try {
      [connectionPipe_ disconnect];
    }
    @catch (JavaLangException *ignore) {
    }
  }
}

- (JavaIoReader *)getContentReader {
  if (connectionPipe_ != nil) {
    int n = [self getContentLength];
    if ((n > 0) && (n < 8192)) {
      return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[connectionPipe_ getInputStream] withNSString:[self getCharset]] withInt:n];
    }
    return [[RAREUTBufferedReaderEx alloc] initWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[connectionPipe_ getInputStream] withNSString:[self getCharset]] withInt:(n > 0) ? 8192 : 4096];
  }
  if (contentWriter_ != nil) {
    return [contentWriter_ getReader];
  }
  return [[JavaIoStringReader alloc] initWithNSString:@""];
}

- (CCPBVContentWriter *)getContentWriter {
  if (contentWriter_ == nil) {
    contentWriter_ = [[CCPBVContentWriter alloc] init];
  }
  return contentWriter_;
}

- (JavaIoInputStream *)getErrorStream {
  return connectionPipe_ != nil ? [connectionPipe_ getErrorStream] : errStream_;
}

- (NSString *)getHeaderFieldWithInt:(int)n {
  @try {
    (void) [self getInputStream];
  }
  @catch (JavaIoIOException *ignore) {
  }
  return connectionPipe_ != nil ? [connectionPipe_ getHeaderFieldWithInt:n] : [((CCPBVHttpHeaders *) nil_chk(headers_)) getHeaderWithInt:n];
}

- (NSString *)getHeaderFieldWithNSString:(NSString *)name {
  @try {
    (void) [self getInputStream];
  }
  @catch (JavaIoIOException *ignore) {
  }
  return connectionPipe_ != nil ? [connectionPipe_ getHeaderFieldWithNSString:name] : [((CCPBVHttpHeaders *) nil_chk(headers_)) getHeaderWithNSString:name];
}

- (NSString *)getHeaderFieldKeyWithInt:(int)n {
  @try {
    (void) [self getInputStream];
  }
  @catch (JavaIoIOException *ignore) {
  }
  return connectionPipe_ != nil ? [connectionPipe_ getHeaderFieldKeyWithInt:n] : [((CCPBVHttpHeaders *) nil_chk(headers_)) getKeyWithInt:n];
}

- (JavaIoInputStream *)getInputStream {
  if (!doInput_) {
    return [super getInputStream];
  }
  if (inStream_ == nil) {
    @try {
      if (serviceMethod_ == nil) {
        [self connectToService];
      }
      (void) [((JavaLangReflectMethod *) nil_chk(serviceMethod_)) invokeWithId:serviceObject_ withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self, servicePath_, (outStream_ == nil) ? nil : [outStream_ getInputStream], headers_ } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
      if (connectionPipe_ != nil) {
        inStream_ = [connectionPipe_ getInputStream];
      }
      else {
        [((CCPBVHttpHeaders *) nil_chk(headers_)) setContentLengthWithLong:[((CCPBVContentWriter *) nil_chk(contentWriter_)) getContentLength]];
        inStream_ = [[CCPBVaHttpURLConnection_ContentReaderInputStream alloc] initWithCCPBVContentWriter:contentWriter_];
      }
    }
    @catch (JavaLangException *e) {
      inStream_ = [self getExceptionInputStreamWithCCPBVHttpHeaders:headers_ withJavaLangThrowable:e];
    }
  }
  return inStream_;
}

- (JavaIoOutputStream *)getOutputStream {
  if (!doOutput_) {
    return [super getOutputStream];
  }
  if (outStream_ == nil) {
    outStream_ = [[CCPBVFileBackedBufferedOutputStream alloc] init];
  }
  return outStream_;
}

- (int)getResponseCode {
  if (responseCode_ == -1) {
    [self parseStatus];
  }
  return responseCode_;
}

- (NSString *)getResponseMessage {
  if (responseCode_ == -1) {
    [self parseStatus];
  }
  return responseMessage_;
}

- (NSString *)getResquestHeaderWithNSString:(NSString *)name {
  return [self getRequestPropertyWithNSString:name];
}

- (void)setConnectionPipeWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connectionPipe {
  self->connectionPipe_ = connectionPipe;
}

- (BOOL)usingProxy {
  return NO;
}

- (void)closeStreamWithJavaIoCloseable:(id<JavaIoCloseable>)stream {
  @try {
    if (stream != nil) {
      [stream close];
    }
  }
  @catch (JavaLangException *ignore) {
  }
}

- (void)connectToService {
  NSString *s = [RAREUTURLEncoder decodeWithNSString:[((JavaNetURL *) nil_chk([self getURL])) getPath]];
  int n = [((NSString *) nil_chk(s)) indexOfString:HUB_SUBSTRING_];
  s = [s substring:n + [((NSString *) nil_chk(HUB_SUBSTRING_)) sequenceLength]];
  CCPBVActionPath *p = [CCPBVActionPath fromStringWithNSString:s];
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] initWithNSString:clsPackage_];
  int pos;
  id o = nil;
  id<RAREiWeakReference> r;
  while ((o == nil) && ![((CCPBVActionPath *) nil_chk(p)) isEmpty]) {
    (void) [ca appendWithChar:'.'];
    pos = [ca sequenceLength];
    (void) [ca appendWithNSString:[((CCPBVActionPath *) nil_chk(p)) shift]];
    (*IOSCharArray_GetRef(nil_chk(ca->A_), pos)) = [JavaLangCharacter toUpperCaseWithChar:IOSCharArray_Get(ca->A_, pos)];
    NSString *cls = [ca description];
    r = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(CCPBVaHttpURLConnection_handlerMap_)) getWithId:cls];
    o = (r == nil) ? nil : [r get];
    if (o == nil) {
      if (![((JavaUtilConcurrentConcurrentHashMap *) nil_chk(CCPBVaHttpURLConnection_badPathMap_)) containsKeyWithId:cls]) {
        @try {
          IOSClass *clz = [RAREPlatform loadClassWithNSString:cls];
          o = [((IOSClass *) nil_chk(clz)) newInstance];
          (void) [CCPBVaHttpURLConnection_handlerMap_ putWithId:cls withId:[RAREPlatform createWeakReferenceWithId:o]];
          break;
        }
        @catch (JavaLangException *ignore) {
          (void) [CCPBVaHttpURLConnection_badPathMap_ putWithId:cls withId:cls];
        }
      }
      (*IOSCharArray_GetRef(ca->A_, pos)) = [JavaLangCharacter toLowerCaseWithChar:IOSCharArray_Get(ca->A_, pos)];
    }
  }
  NSString *method = [((CCPBVActionPath *) nil_chk(p)) shift];
  if ((o == nil) || (method == nil)) {
    @throw [[JavaIoFileNotFoundException alloc] initWithNSString:s];
  }
  n = [((NSString *) nil_chk(method)) indexOf:'.'];
  if (n != -1) {
    [p unshiftWithNSString:[method substring:n]];
    method = [method substring:0 endIndex:n];
  }
  serviceMethod_ = [[nil_chk(o) getClass] getMethod:method parameterTypes:CCPBVaHttpURLConnection_methodParams_];
  servicePath_ = p;
  serviceObject_ = o;
}

- (JavaIoInputStream *)getExceptionInputStreamWithCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
                                             withJavaLangThrowable:(JavaLangThrowable *)e {
  NSString *msg = nil;
  long long int date = 0;
  NSString *server = nil;
  NSString *status = nil;
  NSString *ct = nil;
  e = [RAREApplicationException pealExceptionWithJavaLangThrowable:e];
  if ([e isKindOfClass:[RAREHTTPException class]]) {
    JavaNetHttpURLConnection *conn = [((RAREHTTPException *) check_class_cast(e, [RAREHTTPException class])) geConnection];
    if (conn != nil) {
      @try {
        status = [conn getHeaderFieldWithInt:0];
        server = [conn getHeaderFieldWithNSString:@"server"];
        date = [conn getDate];
        ct = [conn getContentType];
        msg = [((RAREHTTPException *) check_class_cast(e, [RAREHTTPException class])) getMessageBody];
        if ([((NSString *) nil_chk(msg)) sequenceLength] == 0) {
          msg = nil;
        }
      }
      @catch (JavaLangException *e1) {
        [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e1];
      }
    }
  }
  else if ([e isKindOfClass:[CCPBVNonFatalServiceException class]]) {
    status = @"HTTP/1.1 420 Debug Mode Error";
    msg = [((CCPBVMessageException *) check_class_cast(e, [CCPBVMessageException class])) getMessage];
  }
  else if ([e isKindOfClass:[CCPBVMessageException class]] && ![((CCPBVMessageException *) check_class_cast(e, [CCPBVMessageException class])) isFatal]) {
    status = @"HTTP/1.1 303 See Other";
    msg = [((JavaLangThrowable *) nil_chk(e)) getMessage];
  }
  else {
    RAREErrorInformation *ei = [[RAREErrorInformation alloc] initWithJavaLangThrowable:e];
    msg = [ei toAlertPanelString];
  }
  if (status == nil) {
    status = @"HTTP/1.1 400 Bad Request";
  }
  if (ct != nil) {
    ct = @"Content-Type: text/plain";
  }
  if (server == nil) {
    server = @"BellaVista";
  }
  if (date == 0) {
    date = [JavaLangSystem currentTimeMillis];
  }
  if (msg == nil) {
    msg = [RAREApplicationException getMessageExWithJavaLangThrowable:e];
  }
  IOSByteArray *b = [((NSString *) nil_chk(msg)) getBytes];
  NSString *d = [RAREUTHTTPDateUtils formatDateWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:date]];
  [((CCPBVHttpHeaders *) nil_chk(headers)) setStatusWithNSString:status];
  [headers setDateWithNSString:d];
  [headers addWithNSString:@"last-modified" withNSString:d];
  [headers addWithNSString:@"server" withNSString:server];
  [headers setContentTypeWithNSString:ct];
  [headers setContentLengthWithLong:0];
  errStream_ = [[JavaIoByteArrayInputStream alloc] initWithByteArray:b];
  return CCPBVaHttpURLConnection_nullStream_;
}

- (NSString *)getCharset {
  return [RAREJavaURLConnection getCharsetWithNSString:[self getContentType] withNSString:defaultCharset_];
}

- (void)parseStatus {
  (void) [self getInputStream];
  if (connectionPipe_ != nil) {
    responseCode_ = [connectionPipe_ getResponseCode];
    responseMessage_ = [connectionPipe_ getResponseMessage];
  }
  else {
    NSString *status = [((CCPBVHttpHeaders *) nil_chk(headers_)) getHeaderWithInt:0];
    if (status == nil) {
      status = @"HTTP/1.1 0 Protocol Failure";
    }
    int n = [((NSString *) nil_chk(status)) indexOf:' '];
    if (n == -1) {
      responseCode_ = 0;
      responseMessage_ = @"Protocol Failure";
    }
    else {
      responseCode_ = [RAREUTSNumber intValueWithNSString:[status substring:n + 1]];
      n = [status indexOf:' ' fromIndex:n + 1];
      if (n != -1) {
        responseMessage_ = [status substring:n + 1];
      }
      else {
        responseMessage_ = @"Protocol Failure";
      }
    }
  }
}

+ (void)initialize {
  if (self == [CCPBVaHttpURLConnection class]) {
    CCPBVaHttpURLConnection_handlerMap_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    CCPBVaHttpURLConnection_badPathMap_ = [[JavaUtilConcurrentConcurrentHashMap alloc] init];
    CCPBVaHttpURLConnection_methodParams_ = [IOSObjectArray arrayWithObjects:(id[]){ [IOSClass classWithProtocol:@protocol(CCPBViHttpConnection)], [IOSClass classWithClass:[CCPBVActionPath class]], [IOSClass classWithClass:[JavaIoInputStream class]], [IOSClass classWithClass:[CCPBVHttpHeaders class]] } count:4 type:[IOSClass classWithClass:[IOSClass class]]];
    CCPBVaHttpURLConnection_nullStream_ = [[CCPBVaHttpURLConnection_$1 alloc] init];
  }
}

- (void)copyAllFieldsTo:(CCPBVaHttpURLConnection *)other {
  [super copyAllFieldsTo:other];
  other->HUB_SUBSTRING_ = HUB_SUBSTRING_;
  other->clsPackage_ = clsPackage_;
  other->connectionPipe_ = connectionPipe_;
  other->contentWriter_ = contentWriter_;
  other->defaultCharset_ = defaultCharset_;
  other->errStream_ = errStream_;
  other->headers_ = headers_;
  other->inStream_ = inStream_;
  other->outStream_ = outStream_;
  other->serviceMethod_ = serviceMethod_;
  other->serviceObject_ = serviceObject_;
  other->servicePath_ = servicePath_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "connect", NULL, "V", 0x1, "JavaIoIOException" },
    { "getContentReader", NULL, "LJavaIoReader", 0x1, "JavaIoIOException" },
    { "getContentWriter", NULL, "LCCPBVContentWriter", 0x1, NULL },
    { "getErrorStream", NULL, "LJavaIoInputStream", 0x1, NULL },
    { "getHeaderFieldWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "getHeaderFieldKeyWithInt:", NULL, "LNSString", 0x1, NULL },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "getOutputStream", NULL, "LJavaIoOutputStream", 0x1, "JavaIoIOException" },
    { "getResponseCode", NULL, "I", 0x1, "JavaIoIOException" },
    { "getResponseMessage", NULL, "LNSString", 0x1, "JavaIoIOException" },
    { "getResquestHeaderWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "usingProxy", NULL, "Z", 0x1, NULL },
    { "closeStreamWithJavaIoCloseable:", NULL, "V", 0x4, NULL },
    { "connectToService", NULL, "V", 0x4, "JavaLangException" },
    { "getExceptionInputStreamWithCCPBVHttpHeaders:withJavaLangThrowable:", NULL, "LJavaIoInputStream", 0x4, NULL },
    { "getCharset", NULL, "LNSString", 0x2, "JavaIoIOException" },
    { "parseStatus", NULL, "V", 0x2, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "handlerMap_", NULL, 0x8, "LJavaUtilConcurrentConcurrentHashMap" },
    { "badPathMap_", NULL, 0x8, "LJavaUtilConcurrentConcurrentHashMap" },
    { "methodParams_", NULL, 0x8, "LIOSObjectArray" },
    { "nullStream_", NULL, 0xc, "LJavaIoInputStream" },
    { "outStream_", NULL, 0x4, "LCCPBVFileBackedBufferedOutputStream" },
    { "inStream_", NULL, 0x4, "LJavaIoInputStream" },
    { "headers_", NULL, 0x4, "LCCPBVHttpHeaders" },
    { "clsPackage_", NULL, 0x4, "LNSString" },
    { "serviceMethod_", NULL, 0x4, "LJavaLangReflectMethod" },
    { "serviceObject_", NULL, 0x4, "LNSObject" },
    { "HUB_SUBSTRING_", NULL, 0x4, "LNSString" },
    { "servicePath_", NULL, 0x4, "LCCPBVActionPath" },
    { "contentWriter_", NULL, 0x4, "LCCPBVContentWriter" },
    { "errStream_", NULL, 0x4, "LJavaIoInputStream" },
    { "connectionPipe_", NULL, 0x4, "LJavaNetHttpURLConnection" },
    { "defaultCharset_", NULL, 0x4, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVaHttpURLConnection = { "aHttpURLConnection", "com.sparseware.bellavista.service", NULL, 0x401, 18, methods, 16, fields, 0, NULL};
  return &_CCPBVaHttpURLConnection;
}

@end
@implementation CCPBVaHttpURLConnection_ContentReaderInputStream

- (id)initWithCCPBVContentWriter:(CCPBVContentWriter *)contentWriter {
  if (self = [super init]) {
    self->contentWriter_ = contentWriter;
  }
  return self;
}

- (int)read {
  if (contentWriter_ == nil) {
    return -1;
  }
  if (stream_ == nil) {
    stream_ = [((CCPBVContentWriter *) nil_chk(contentWriter_)) getInputStream];
  }
  return [((JavaIoInputStream *) nil_chk(stream_)) read];
}

- (int)readWithByteArray:(IOSByteArray *)b
                 withInt:(int)off
                 withInt:(int)len {
  if (contentWriter_ == nil) {
    return -1;
  }
  if (stream_ == nil) {
    stream_ = [((CCPBVContentWriter *) nil_chk(contentWriter_)) getInputStream];
  }
  return [((JavaIoInputStream *) nil_chk(stream_)) readWithByteArray:b withInt:off withInt:len];
}

- (void)copyAllFieldsTo:(CCPBVaHttpURLConnection_ContentReaderInputStream *)other {
  [super copyAllFieldsTo:other];
  other->contentWriter_ = contentWriter_;
  other->stream_ = stream_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "readWithByteArray:withInt:withInt:", NULL, "I", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "contentWriter_", NULL, 0x0, "LCCPBVContentWriter" },
    { "stream_", NULL, 0x0, "LJavaIoInputStream" },
  };
  static J2ObjcClassInfo _CCPBVaHttpURLConnection_ContentReaderInputStream = { "ContentReaderInputStream", "com.sparseware.bellavista.service", "aHttpURLConnection", 0x8, 2, methods, 2, fields, 0, NULL};
  return &_CCPBVaHttpURLConnection_ContentReaderInputStream;
}

@end
@implementation CCPBVaHttpURLConnection_$1

- (int)read {
  return -1;
}

- (long long int)skipWithLong:(long long int)n {
  return 0;
}

- (id)init {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "read", NULL, "I", 0x1, "JavaIoIOException" },
    { "skipWithLong:", NULL, "J", 0x1, "JavaIoIOException" },
  };
  static J2ObjcClassInfo _CCPBVaHttpURLConnection_$1 = { "$1", "com.sparseware.bellavista.service", "aHttpURLConnection", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_CCPBVaHttpURLConnection_$1;
}

@end
