//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/service/FileBackedBufferedOutputStream.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSByteArray.h"
#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/util/io/ByteArrayOutputStreamEx.h"
#include "com/sparseware/bellavista/service/FileBackedBufferedOutputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"

@implementation CCPBVFileBackedBufferedOutputStream

- (id)init {
  return [self initCCPBVFileBackedBufferedOutputStreamWithInt:1024];
}

- (id)initCCPBVFileBackedBufferedOutputStreamWithInt:(int)bufferSize
                                             withInt:(int)maxBufferSize {
  if (self = [super init]) {
    self->bufferSize_ = bufferSize;
    self->maxBufferSize_ = maxBufferSize;
  }
  return self;
}

- (id)initWithInt:(int)bufferSize
          withInt:(int)maxBufferSize {
  return [self initCCPBVFileBackedBufferedOutputStreamWithInt:bufferSize withInt:maxBufferSize];
}

- (id)initCCPBVFileBackedBufferedOutputStreamWithInt:(int)bufferSize {
  return [self initCCPBVFileBackedBufferedOutputStreamWithInt:bufferSize withInt:1024 * 1024 * 32];
}

- (id)initWithInt:(int)bufferSize {
  return [self initCCPBVFileBackedBufferedOutputStreamWithInt:bufferSize];
}

- (void)writeWithInt:(int)b {
  count_++;
  if ((count_ > maxBufferSize_) && (fileStream_ == nil)) {
    [self createFileStream];
  }
  if (fileStream_ != nil) {
    [fileStream_ writeWithInt:b];
  }
  else {
    if (byteStream_ == nil) {
      byteStream_ = [[RAREUTByteArrayOutputStreamEx alloc] initWithInt:bufferSize_];
    }
    [((RAREUTByteArrayOutputStreamEx *) nil_chk(byteStream_)) writeWithInt:b];
  }
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(int)off
                   withInt:(int)len {
  count_ += len;
  if ((count_ > maxBufferSize_) && (fileStream_ == nil)) {
    [self createFileStream];
  }
  if (fileStream_ != nil) {
    [fileStream_ writeWithByteArray:b withInt:off withInt:len];
  }
  else {
    if (byteStream_ == nil) {
      byteStream_ = [[RAREUTByteArrayOutputStreamEx alloc] initWithInt:bufferSize_];
    }
    [((RAREUTByteArrayOutputStreamEx *) nil_chk(byteStream_)) writeWithByteArray:b withInt:off withInt:len];
  }
}

- (void)close {
  [super close];
  if (fileStream_ != nil) {
    [fileStream_ close];
  }
}

- (void)flush {
  [super flush];
  if (fileStream_ != nil) {
    [fileStream_ flush];
  }
}

- (JavaIoInputStream *)getInputStream {
  if (fileStream_ != nil) {
    [fileStream_ close];
    return [[CCPBVFileBackedBufferedOutputStream_DeleteFileOnCloseInputStream alloc] initWithJavaIoFile:backingFile_];
  }
  if (byteStream_ == nil) {
    return [[JavaIoByteArrayInputStream alloc] initWithByteArray:[IOSByteArray arrayWithLength:0]];
  }
  return [[JavaIoByteArrayInputStream alloc] initWithByteArray:[((RAREUTByteArrayOutputStreamEx *) nil_chk(byteStream_)) getArray] withInt:0 withInt:[byteStream_ size]];
}

- (void)createFileStream {
  backingFile_ = [RAREPlatform createCacheFileWithNSString:@"BVOutput"];
  fileStream_ = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:backingFile_];
}

- (void)copyAllFieldsTo:(CCPBVFileBackedBufferedOutputStream *)other {
  [super copyAllFieldsTo:other];
  other->backingFile_ = backingFile_;
  other->bufferSize_ = bufferSize_;
  other->byteStream_ = byteStream_;
  other->count_ = count_;
  other->fileStream_ = fileStream_;
  other->maxBufferSize_ = maxBufferSize_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "writeWithInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeWithByteArray:withInt:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
    { "flush", NULL, "V", 0x1, "JavaIoIOException" },
    { "getInputStream", NULL, "LJavaIoInputStream", 0x1, "JavaIoIOException" },
    { "createFileStream", NULL, "V", 0x4, "JavaIoFileNotFoundException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "backingFile_", NULL, 0x0, "LJavaIoFile" },
    { "bufferSize_", NULL, 0x0, "I" },
    { "maxBufferSize_", NULL, 0x0, "I" },
    { "count_", NULL, 0x0, "I" },
    { "byteStream_", NULL, 0x0, "LRAREUTByteArrayOutputStreamEx" },
    { "fileStream_", NULL, 0x0, "LJavaIoFileOutputStream" },
  };
  static J2ObjcClassInfo _CCPBVFileBackedBufferedOutputStream = { "FileBackedBufferedOutputStream", "com.sparseware.bellavista.service", NULL, 0x1, 6, methods, 6, fields, 0, NULL};
  return &_CCPBVFileBackedBufferedOutputStream;
}

@end
@implementation CCPBVFileBackedBufferedOutputStream_DeleteFileOnCloseInputStream

- (id)initWithJavaIoFile:(JavaIoFile *)file {
  if (self = [super initWithJavaIoFile:file]) {
    self->file_ = file;
  }
  return self;
}

- (void)close {
  [super close];
  @try {
    [((JavaIoFile *) nil_chk(file_)) delete__];
  }
  @catch (JavaLangException *ignore) {
  }
}

- (void)copyAllFieldsTo:(CCPBVFileBackedBufferedOutputStream_DeleteFileOnCloseInputStream *)other {
  [super copyAllFieldsTo:other];
  other->file_ = file_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:", NULL, NULL, 0x1, "JavaIoFileNotFoundException" },
    { "close", NULL, "V", 0x1, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "file_", NULL, 0x0, "LJavaIoFile" },
  };
  static J2ObjcClassInfo _CCPBVFileBackedBufferedOutputStream_DeleteFileOnCloseInputStream = { "DeleteFileOnCloseInputStream", "com.sparseware.bellavista.service", "FileBackedBufferedOutputStream", 0x9, 2, methods, 1, fields, 0, NULL};
  return &_CCPBVFileBackedBufferedOutputStream_DeleteFileOnCloseInputStream;
}

@end
