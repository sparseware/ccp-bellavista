//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/ActionPath.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSObjectArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@implementation CCPBVActionPath

- (id)init {
  return [super initWithInt:5];
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)segments {
  if (self = [super initWithInt:5]) {
    if (segments != nil) {
      [self addAllWithJavaUtilCollection:segments];
    }
  }
  return self;
}

- (id)initWithNSStringArray:(IOSObjectArray *)segments {
  if (self = [super initWithInt:5]) {
    if (segments != nil) {
      [self addSegmentsWithNSStringArray:segments];
    }
  }
  return self;
}

- (void)addSegmentsWithNSStringArray:(IOSObjectArray *)segments {
  int len = (segments == nil) ? 0 : (int) [segments count];
  if (len == 1) {
    if ([((NSString *) IOSObjectArray_Get(nil_chk(segments), 0)) indexOfString:@"/"] != -1) {
      (void) [RAREUTCharScanner getTokensWithNSString:IOSObjectArray_Get(segments, 0) withChar:'/' withBoolean:NO withJavaUtilList:self];
    }
    else {
      [self addWithId:IOSObjectArray_Get(segments, 0)];
    }
  }
  else {
    for (int i = 0; i < len; i++) {
      [self addWithId:IOSObjectArray_Get(nil_chk(segments), i)];
    }
  }
}

- (id)clone {
  return [self copy__];
}

- (CCPBVActionPath *)copy__ {
  CCPBVActionPath *p = [[CCPBVActionPath alloc] initWithJavaUtilList:self];
  return p;
}

- (id)getLinkedData {
  return linkedData_;
}

- (NSString *)peek {
  int len = [self size];
  return (len == 0) ? nil : [self getWithInt:len - 1];
}

- (NSString *)pop {
  int len = [self size];
  return (len == 0) ? nil : [self removeWithInt:len - 1];
}

- (void)pushWithNSString:(NSString *)segment {
  [self addWithId:segment];
}

- (void)setLinkedDataWithId:(id)linkedData {
  self->linkedData_ = linkedData;
}

- (NSString *)shift {
  return [self isEmpty] ? nil : [self removeWithInt:0];
}

- (NSString *)shiftPeek {
  int len = [self size];
  return (len == 0) ? nil : [self getWithInt:0];
}

- (NSString *)description {
  return [RAREUTHelper toStringWithJavaUtilList:self withNSString:@"/"];
}

- (void)unshiftWithNSString:(NSString *)segment {
  [self addWithInt:0 withId:segment];
}

+ (CCPBVActionPath *)fromStringWithNSString:(NSString *)path {
  CCPBVActionPath *p = [[CCPBVActionPath alloc] init];
  (void) [RAREUTCharScanner getTokensWithNSString:path withChar:'/' withBoolean:NO withJavaUtilList:p];
  return p;
}

- (void)copyAllFieldsTo:(CCPBVActionPath *)other {
  [super copyAllFieldsTo:other];
  other->linkedData_ = linkedData_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", NULL, NULL, 0x81, NULL },
    { "addSegmentsWithNSStringArray:", NULL, "V", 0x81, NULL },
    { "clone", NULL, "LNSObject", 0x1, NULL },
    { "copy__", NULL, "LCCPBVActionPath", 0x1, NULL },
    { "getLinkedData", NULL, "LNSObject", 0x1, NULL },
    { "peek", NULL, "LNSString", 0x1, NULL },
    { "pop", NULL, "LNSString", 0x1, NULL },
    { "shift", NULL, "LNSString", 0x1, NULL },
    { "shiftPeek", NULL, "LNSString", 0x1, NULL },
    { "fromStringWithNSString:", NULL, "LCCPBVActionPath", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "linkedData_", NULL, 0x4, "LNSObject" },
  };
  static const char *superclass_type_args[] = {"LNSString"};
  static J2ObjcClassInfo _CCPBVActionPath = { "ActionPath", "com.sparseware.bellavista", NULL, 0x1, 10, methods, 1, fields, 1, superclass_type_args};
  return &_CCPBVActionPath;
}

@end

@interface CCPBVActionPath_iActionPathSupporter : NSObject
@end

@implementation CCPBVActionPath_iActionPathSupporter

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisplayedActionPath", NULL, "LCCPBVActionPath", 0x401, NULL },
    { "handleActionPathWithCCPBVActionPath:", NULL, "V", 0x401, NULL },
  };
  static J2ObjcClassInfo _CCPBVActionPath_iActionPathSupporter = { "iActionPathSupporter", "com.sparseware.bellavista", "ActionPath", 0x200, 2, methods, 0, NULL, 0, NULL};
  return &_CCPBVActionPath_iActionPathSupporter;
}

@end
