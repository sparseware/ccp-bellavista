//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Summary.java
//
//  Created by decoteaud on 5/11/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iDataCollection.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/ui/BorderUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/iPlatformBorder.h"
#include "com/appnativa/rare/ui/painter/iBackgroundPainter.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/ChartViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/NumberRange.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/CollectionManager.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/Summary.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/aEventHandler.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation CCPBVSummary

static int CCPBVSummary_DATE_COLUMN_POSITION_ = 0;
static int CCPBVSummary_NAME_COLUMN_POSITION_ = 1;
static int CCPBVSummary_VALUE_COLUMN_POSITION_ = 2;

+ (int)DATE_COLUMN_POSITION {
  return CCPBVSummary_DATE_COLUMN_POSITION_;
}

+ (int *)DATE_COLUMN_POSITIONRef {
  return &CCPBVSummary_DATE_COLUMN_POSITION_;
}

+ (int)NAME_COLUMN_POSITION {
  return CCPBVSummary_NAME_COLUMN_POSITION_;
}

+ (int *)NAME_COLUMN_POSITIONRef {
  return &CCPBVSummary_NAME_COLUMN_POSITION_;
}

+ (int)VALUE_COLUMN_POSITION {
  return CCPBVSummary_VALUE_COLUMN_POSITION_;
}

+ (int *)VALUE_COLUMN_POSITIONRef {
  return &CCPBVSummary_VALUE_COLUMN_POSITION_;
}

- (id)init {
  return [super init];
}

- (void)calculateRangesAndUpdateUIWithRAREiFormViewer:(id<RAREiFormViewer>)fv
                                  withRAREChartViewer:(RAREChartViewer *)chart
                                     withJavaUtilList:(id<JavaUtilList>)rows
                                          withBoolean:(BOOL)summary {
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  if (len == 0) {
    return;
  }
  if (chart == nil) {
    chart = (RAREChartViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"summary_vitals_chart"], [RAREChartViewer class]);
  }
  RAREUTJSONObject *chartInfo = [((RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"vitalsInfo"], [RAREUTJSONObject class])) getJSONObjectWithNSString:@"charts"];
  RAREUTJSONObject *combo = [((RAREUTJSONObject *) nil_chk(chartInfo)) getJSONObjectWithNSString:summary ? @"summaryCombo" : @"combo"];
  if (summary && chart != nil) {
    JavaLangDouble *increment = nil;
    NSString *s = [((RAREUTJSONObject *) nil_chk(combo)) optStringWithNSString:@"increment" withNSString:nil];
    if (s != nil && [s sequenceLength] > 0) {
      increment = [JavaLangDouble valueOfWithDouble:[RAREUTSNumber doubleValueWithNSString:s]];
    }
    [chart setRangeBoundsWithId:[combo optStringWithNSString:@"lowerBound" withNSString:nil] withId:[combo optStringWithNSString:@"upperBound" withNSString:nil] withJavaLangDouble:increment];
  }
  RAREUTJSONArray *svitals = [((RAREUTJSONObject *) nil_chk(combo)) getJSONArrayWithNSString:@"vitals"];
  JavaUtilHashSet *chartVitals = [[JavaUtilHashSet alloc] initWithJavaUtilCollection:svitals];
  JavaUtilHashMap *vitals = [[JavaUtilLinkedHashMap alloc] init];
  (void) [vitals putWithId:@"bp" withId:[[CCPBVSummary_BPVitalRange alloc] initWithRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  (void) [vitals putWithId:@"map" withId:[[CCPBVSummary_VitalRange alloc] initWithNSString:@"map" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  (void) [vitals putWithId:@"temp" withId:[[CCPBVSummary_VitalRange alloc] initWithNSString:@"temp" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  (void) [vitals putWithId:@"resp" withId:[[CCPBVSummary_VitalRange alloc] initWithNSString:@"resp" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  (void) [vitals putWithId:@"hr" withId:[[CCPBVSummary_VitalRange alloc] initWithNSString:@"hr" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  (void) [vitals putWithId:@"pulse" withId:[[CCPBVSummary_VitalRange alloc] initWithNSString:@"pulse" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]];
  RARESubItemComparator *c = [[RARESubItemComparator alloc] init];
  [c setOptionsWithInt:0 withBoolean:NO];
  [JavaUtilCollections sortWithJavaUtilList:rows withJavaUtilComparator:c];
  RARERenderableDataItem *dateItem;
  dateItem = [((RARERenderableDataItem *) nil_chk([rows getWithInt:0])) getWithInt:CCPBVSummary_DATE_COLUMN_POSITION_];
  [((RARERenderableDataItem *) nil_chk(dateItem)) setTypeWithInt:RARERenderableDataItem_TYPE_DATETIME];
  JavaUtilDate *beg = (JavaUtilDate *) check_class_cast([dateItem getValue], [JavaUtilDate class]);
  dateItem = [((RARERenderableDataItem *) nil_chk([rows getWithInt:len - 1])) getWithInt:CCPBVSummary_DATE_COLUMN_POSITION_];
  [((RARERenderableDataItem *) nil_chk(dateItem)) setTypeWithInt:RARERenderableDataItem_TYPE_DATETIME];
  JavaUtilDate *end = (JavaUtilDate *) check_class_cast([dateItem getValue], [JavaUtilDate class]);
  len = [JavaLangMath minWithInt:len withInt:5000];
  JavaUtilHashMap *dateMap = [[JavaUtilHashMap alloc] init];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *row = [rows getWithInt:i];
    NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVSummary_NAME_COLUMN_POSITION_])) getLinkedData], [NSString class]);
    CCPBVSummary_VitalRange *vr = [vitals getWithId:key];
    if (vr == nil) {
      continue;
    }
    dateItem = [row getWithInt:CCPBVSummary_DATE_COLUMN_POSITION_];
    [((RARERenderableDataItem *) nil_chk(dateItem)) setTypeWithInt:RARERenderableDataItem_TYPE_DATETIME];
    JavaUtilDate *date = (JavaUtilDate *) check_class_cast([dateItem getValue], [JavaUtilDate class]);
    RAREUTMutableInteger *mn = [dateMap getWithId:date];
    if (mn == nil) {
      mn = [[RAREUTMutableInteger alloc] initWithInt:1];
      (void) [dateMap putWithId:date withId:mn];
    }
    else {
      (void) [mn addWithInt:1];
    }
    [((CCPBVSummary_VitalRange *) nil_chk(vr)) addValueWithJavaUtilDate:date withNSString:[((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVSummary_VALUE_COLUMN_POSITION_])) description]];
  }
  [self updateFormWithRAREiContainer:fv withJavaUtilMap:vitals withJavaUtilDate:beg withJavaUtilDate:end withJavaUtilHashSet:chartVitals];
  if (chart != nil) {
    [chart refreshItems];
  }
}

- (void)onCreatedWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  hasRecentLabs_ = NO;
  RAREActionLink *link = [CCPBVUtils createLinkWithRAREiWidget:widget withNSString:@"/hub/main/vitals/summary" withBoolean:YES];
  [self parseDataURLWithRAREaWidget:(RAREaWidget *) check_class_cast(widget, [RAREaWidget class]) withRAREActionLink:link withBoolean:YES];
}

- (void)connecting {
  if ([CCPBVUtils isCardStack]) {
    @try {
      RAREWindowViewer *w = [RAREPlatform getWindowViewer];
      RAREActionLink *link = [CCPBVUtils createLinkWithRAREiWidget:w withNSString:@"/hub/main/labs/summary" withBoolean:YES];
      id<JavaUtilList> list = [((RAREWindowViewer *) nil_chk(w)) parseDataLinkWithRAREActionLink:link withBoolean:YES];
      hasRecentLabs_ = list != nil && ![list isEmpty];
    }
    @catch (JavaLangException *e) {
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVSummary_$1 alloc] initWithJavaLangException:e]];
    }
  }
}

- (void)updateFormWithRAREiContainer:(id<RAREiContainer>)fv
                     withJavaUtilMap:(id<JavaUtilMap>)vitals
                    withJavaUtilDate:(JavaUtilDate *)beg
                    withJavaUtilDate:(JavaUtilDate *)end
                 withJavaUtilHashSet:(JavaUtilHashSet *)chartVitals {
  NSString *s;
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if ([RAREScreenUtils isSmallScreen]) {
    int d = [RAREUTHelper daysBetweenWithJavaUtilDate:[[JavaUtilDate alloc] init] withJavaUtilDate:end];
    if (d > 30) {
      return;
    }
    if (d < 2) {
      s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.summary_vitals_24h"];
    }
    else {
      s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.summary_vitals_small" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:d] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  else {
    s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.time.general_short"];
    RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:s];
    if ([((JavaUtilDate *) nil_chk(beg)) isEqual:end]) {
      s = [df formatWithJavaUtilDate:beg];
    }
    else {
      s = [NSString stringWithFormat:@"%@ - %@", [df formatWithJavaUtilDate:beg], [df formatWithJavaUtilDate:end]];
    }
    s = [w getStringWithNSString:@"bv.text.summary_vitals" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  RARETableViewer *table = (RARETableViewer *) check_class_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"vitals_table"], [RARETableViewer class]);
  id<RAREiWidget> label;
  if ([CCPBVUtils isCardStack]) {
    NSString *labs = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:hasRecentLabs_ ? @"bv.text.summary_has_recent_labs" : @"bv.text.summary_no_recent_labs"];
    [CCPBVCardStackUtils setViewerTitleWithRAREiViewer:fv withNSString:labs withNSString:s];
    [CCPBVCardStackUtils updateTitleWithRAREiViewer:fv withBoolean:NO];
  }
  else {
    label = [fv getWidgetWithNSString:@"vitals_description"];
    if (label != nil) {
      [label setValueWithId:s];
    }
  }
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(vitals)) keySet])) iterator];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  RAREUTSNumber *num = [[RAREUTSNumber alloc] init];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *name = [it next];
    CCPBVSummary_VitalRange *vr = [vitals getWithId:name];
    if ([((JavaUtilHashSet *) nil_chk(chartVitals)) containsWithId:name]) {
      if ([((NSString *) nil_chk(name)) isEqual:@"bp"]) {
        CCPBVSummary_VitalRange *map = [vitals getWithId:@"map"];
        if ([((CCPBVSummary_VitalRange *) nil_chk(map)) hasValues]) {
          [((CCPBVSummary_BPVitalRange *) check_class_cast(vr, [CCPBVSummary_BPVitalRange class])) removeMapSeries];
          [((CCPBVSummary_VitalRange *) nil_chk(vr)) addToChart];
          continue;
        }
      }
      [((CCPBVSummary_VitalRange *) nil_chk(vr)) addToChart];
    }
    name = ((CCPBVSummary_VitalRange *) nil_chk(vr))->name_;
    if (table != nil) {
      s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:[NSString stringWithFormat:@"bv.text.vitals_%@", name]];
      RARERenderableDataItem *row = [table createRowWithInt:2 withBoolean:YES];
      [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) setValueWithId:s];
      ;
      s = [vr getRangeWithJavaLangStringBuilder:sb withRAREUTSNumber:num];
      if (s == nil) {
        s = @"---";
      }
      [((RARERenderableDataItem *) nil_chk([row getWithInt:1])) setValueWithId:s];
      [table addExWithRARERenderableDataItem:row];
    }
    else {
      label = [fv getWidgetWithNSString:name];
      if (label != nil) {
        s = [vr getRangeWithJavaLangStringBuilder:sb withRAREUTSNumber:num];
        if (s != nil) {
          [label setValueWithId:s];
        }
      }
    }
  }
  if (table != nil) {
    [table refreshItems];
  }
}

- (void)onConfigureCardStackWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast(widget, @protocol(RAREiContainer));
  [((CCPBVCollectionManager *) nil_chk([CCPBVCollectionManager getInstance])) updateUI];
  RAREPushButtonWidget *pb = (RAREPushButtonWidget *) check_class_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"bv.action.flags"], [RAREPushButtonWidget class]);
  BOOL bundle = NO;
  if (pb != nil && ![pb isEnabled]) {
    [pb setTextWithJavaLangCharSequence:[RAREPlatform getResourceAsStringWithNSString:[pb isEnabled] ? @"bv.text.has_flags" : @"bv.text.no_flags"]];
    if ([pb isEnabled]) {
      bundle = YES;
    }
  }
  pb = (RAREPushButtonWidget *) check_class_cast([fv getWidgetWithNSString:@"bv.action.alerts"], [RAREPushButtonWidget class]);
  if (pb != nil) {
    [pb setTextWithJavaLangCharSequence:[RAREPlatform getResourceAsStringWithNSString:[pb isEnabled] ? @"bv.text.has_alerts" : @"bv.text.no_alerts"]];
    if ([pb isEnabled]) {
      bundle = YES;
    }
  }
  pb = (RAREPushButtonWidget *) check_class_cast([fv getWidgetWithNSString:@"bv.action.allergies"], [RAREPushButtonWidget class]);
  if (pb != nil) {
    [pb setTextWithJavaLangCharSequence:[RAREPlatform getResourceAsStringWithNSString:[pb isEnabled] ? @"bv.text.has_allergies" : @"bv.text.no_known_allergies"]];
    if ([pb isEnabled]) {
      bundle = YES;
    }
  }
  if (bundle) {
    [CCPBVCardStackUtils setViewerActionWithRAREiViewer:fv withId:[[CCPBVSummary_SummaryStackActionListener alloc] initWithCCPBVSummary:self] withBoolean:YES];
  }
}

- (void)dataParsedWithRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilList:(id<JavaUtilList>)rows
               withRAREActionLink:(RAREActionLink *)link {
  [self calculateRangesAndUpdateUIWithRAREiFormViewer:[((id<RAREiWidget>) nil_chk(widget)) getFormViewer] withRAREChartViewer:nil withJavaUtilList:rows withBoolean:YES];
}

- (void)copyAllFieldsTo:(CCPBVSummary *)other {
  [super copyAllFieldsTo:other];
  other->hasRecentLabs_ = hasRecentLabs_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "connecting", NULL, "V", 0x4, NULL },
    { "dataParsedWithRAREiWidget:withJavaUtilList:withRAREActionLink:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DATE_COLUMN_POSITION_", NULL, 0xa, "I" },
    { "NAME_COLUMN_POSITION_", NULL, 0xa, "I" },
    { "VALUE_COLUMN_POSITION_", NULL, 0xa, "I" },
    { "hasRecentLabs_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _CCPBVSummary = { "Summary", "com.sparseware.bellavista", NULL, 0x1, 2, methods, 4, fields, 0, NULL};
  return &_CCPBVSummary;
}

@end
@implementation CCPBVSummary_VitalRange

- (id)initWithNSString:(NSString *)key
   withRAREChartViewer:(RAREChartViewer *)chart
  withRAREUTJSONObject:(RAREUTJSONObject *)chartInfo {
  if (self = [super init]) {
    first_ = YES;
    self->name_ = key;
    self->chart_ = chart;
    if (chart != nil) {
      NSString *legend = [RAREPlatform getResourceAsStringWithNSString:[NSString stringWithFormat:@"bv.text.vitals_%@", key]];
      if (legend == nil) {
        legend = [((NSString *) nil_chk(name_)) uppercaseStringWithJRELocale:[JavaUtilLocale US]];
      }
      series_ = [RAREaChartViewer createSeriesWithNSString:legend];
      RAREUTJSONObject *attrs = [((RAREUTJSONObject *) nil_chk(chartInfo)) getJSONObjectWithNSString:key];
      [((RAREChartDataItem *) nil_chk(series_)) setValueContextWithId:@"line"];
      (void) [series_ setCustomPropertyWithId:@"plot.lineThickness" withId:[JavaLangInteger valueOfWithInt:3]];
      BOOL gray = [CCPBVUtils isCardStack] || [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) getBooleanWithNSString:@"gray_charts" withBoolean:NO];
      NSString *color = nil;
      if (attrs != nil) {
        if (gray) {
          color = [attrs optStringWithNSString:@"color_g"];
          if (color == nil) {
            color = [attrs optStringWithNSString:@"color"];
          }
        }
        else {
          color = [attrs optStringWithNSString:@"color"];
        }
      }
      if (color != nil) {
        [series_ setBackgroundPainterWithRAREiBackgroundPainter:[RAREUIColorHelper getBackgroundPainterWithNSString:color]];
      }
    }
  }
  return self;
}

- (void)addToChart {
  if (series_ != nil && ![series_ isEmpty]) {
    if ([series_ size] == 1) {
      (void) [series_ setCustomPropertyWithId:@"plot.shapes" withId:@"filled"];
    }
    else {
      (void) [series_ setCustomPropertyWithId:@"plot.shapes" withId:@"none"];
    }
    (void) [((RAREChartViewer *) nil_chk(chart_)) addSeriesWithRAREChartDataItem:series_];
  }
}

- (void)addValueWithJavaUtilDate:(JavaUtilDate *)date
                    withNSString:(NSString *)value {
  [self addValueWithJavaUtilDate:date withFloat:[RAREUTSNumber floatValueWithNSString:value]];
}

- (NSString *)getRangeWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withRAREUTSNumber:(RAREUTSNumber *)num {
  if (first_) {
    return nil;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
  (void) [((RAREUTSNumber *) nil_chk(num)) setValueWithDouble:low_];
  (void) [num setScaleWithInt:1];
  (void) [sb appendWithNSString:[num description]];
  (void) [sb appendWithNSString:@"-"];
  (void) [num setValueWithDouble:high_];
  (void) [num setScaleWithInt:1];
  (void) [sb appendWithNSString:[num description]];
  return [sb description];
}

- (BOOL)hasChartSeries {
  return series_ != nil && ![series_ isEmpty];
}

- (BOOL)hasValues {
  return !first_;
}

- (void)addValueWithJavaUtilDate:(JavaUtilDate *)date
                       withFloat:(float)value {
  if (first_) {
    first_ = NO;
    low_ = value;
    high_ = value;
  }
  else {
    low_ = [JavaLangMath minWithFloat:low_ withFloat:value];
    high_ = [JavaLangMath maxWithFloat:high_ withFloat:value];
  }
  if (series_ != nil) {
    [series_ addWithId:[RAREaChartViewer createSeriesValueWithId:date withId:[[RAREUTSNumber alloc] initWithDouble:value]]];
  }
}

- (void)copyAllFieldsTo:(CCPBVSummary_VitalRange *)other {
  [super copyAllFieldsTo:other];
  other->chart_ = chart_;
  other->first_ = first_;
  other->high_ = high_;
  other->low_ = low_;
  other->name_ = name_;
  other->series_ = series_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getRangeWithJavaLangStringBuilder:withRAREUTSNumber:", NULL, "LNSString", 0x1, NULL },
    { "hasChartSeries", NULL, "Z", 0x1, NULL },
    { "hasValues", NULL, "Z", 0x1, NULL },
    { "addValueWithJavaUtilDate:withFloat:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x0, "LNSString" },
    { "high_", NULL, 0x0, "F" },
    { "low_", NULL, 0x0, "F" },
    { "series_", NULL, 0x0, "LRAREChartDataItem" },
    { "chart_", NULL, 0x0, "LRAREChartViewer" },
    { "first_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _CCPBVSummary_VitalRange = { "VitalRange", "com.sparseware.bellavista", "Summary", 0x8, 4, methods, 6, fields, 0, NULL};
  return &_CCPBVSummary_VitalRange;
}

@end
@implementation CCPBVSummary_BPVitalRange

- (id)initWithRAREChartViewer:(RAREChartViewer *)chart
         withRAREUTJSONObject:(RAREUTJSONObject *)chartInfo {
  if (self = [super initWithNSString:@"map" withRAREChartViewer:chart withRAREUTJSONObject:chartInfo]) {
    if (chart != nil) {
      NSString *legend = [RAREPlatform getResourceAsStringWithNSString:@"bv.text.vitals_bp"];
      if (legend == nil) {
        legend = [((NSString *) nil_chk(name_)) uppercaseStringWithJRELocale:[JavaUtilLocale US]];
      }
      bpSeries_ = [RAREaChartViewer createSeriesWithNSString:legend];
      [((RAREChartDataItem *) nil_chk(bpSeries_)) setValueContextWithId:@"range_bar"];
      BOOL gray = [CCPBVUtils isCardStack] || [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) getBooleanWithNSString:@"gray_charts" withBoolean:NO];
      RAREUTJSONObject *attrs = [((RAREUTJSONObject *) nil_chk(chartInfo)) getJSONObjectWithNSString:@"bp"];
      NSString *color = nil;
      NSString *border = nil;
      if (attrs != nil) {
        if (gray) {
          color = [attrs optStringWithNSString:@"color_g"];
          if (color == nil) {
            color = [attrs optStringWithNSString:@"color"];
          }
        }
        else {
          color = [attrs optStringWithNSString:@"color"];
        }
        border = [attrs optStringWithNSString:@"border"];
      }
      if (color != nil) {
        [bpSeries_ setBackgroundPainterWithRAREiBackgroundPainter:[RAREUIColorHelper getBackgroundPainterWithNSString:color]];
      }
      if (border != nil) {
        [bpSeries_ setBorderWithRAREiPlatformBorder:[RAREBorderUtils createBorderWithRAREiWidget:chart withNSString:border withRAREiPlatformBorder:nil]];
      }
    }
  }
  return self;
}

- (void)addToChart {
  if (bpSeries_ != nil) {
    (void) [((RAREChartViewer *) nil_chk(chart_)) addSeriesWithRAREChartDataItem:bpSeries_];
  }
  [super addToChart];
}

- (void)addValueWithJavaUtilDate:(JavaUtilDate *)date
                    withNSString:(NSString *)value {
  int n = [((NSString *) nil_chk(value)) indexOf:'/'];
  RAREUTNumberRange *num = [[RAREUTNumberRange alloc] initWithNSNumber:[((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[value substring:n + 1]]) makeImmutable] withNSNumber:[((RAREUTSNumber *) [[RAREUTSNumber alloc] initWithNSString:[value substring:0 endIndex:n]]) makeImmutable]];
  int hi = [((NSNumber *) nil_chk([num getHighValue])) intValue];
  int lo = [((NSNumber *) nil_chk([num getLowValue])) intValue];
  float val = hi - lo;
  val *= .33;
  val += lo;
  val = (float) [JavaLangMath floorWithDouble:val];
  [self addValueWithJavaUtilDate:date withFloat:val];
  if (bpSeries_ != nil) {
    RAREChartDataItem *point;
    [bpSeries_ addWithId:point = [RAREaChartViewer createSeriesValueWithId:date withId:num]];
    [((RAREChartDataItem *) nil_chk(point)) setLinkedDataWithId:value];
    if (lo < bpLow_) {
      bpLow_ = lo;
    }
    if (hi > bpHigh_) {
      bpHigh_ = hi;
    }
  }
}

- (void)removeMapSeries {
  series_ = nil;
}

- (void)copyAllFieldsTo:(CCPBVSummary_BPVitalRange *)other {
  [super copyAllFieldsTo:other];
  other->bpHigh_ = bpHigh_;
  other->bpLow_ = bpLow_;
  other->bpSeries_ = bpSeries_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "bpSeries_", NULL, 0x0, "LRAREChartDataItem" },
    { "bpLow_", NULL, 0x0, "I" },
    { "bpHigh_", NULL, 0x0, "I" },
  };
  static J2ObjcClassInfo _CCPBVSummary_BPVitalRange = { "BPVitalRange", "com.sparseware.bellavista", "Summary", 0x8, 0, NULL, 3, fields, 0, NULL};
  return &_CCPBVSummary_BPVitalRange;
}

@end
@implementation CCPBVSummary_SummaryStackActionListener

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:3];
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  id<RAREiDataCollection> dc = [((CCPBVCollectionManager *) nil_chk([CCPBVCollectionManager getInstance])) getCollectionWithNSString:@"allergies"];
  if (dc != nil && ![dc isEmpty]) {
    [list addWithId:[CCPBVCardStackUtils createItemsViewerWithNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.allergies"] withJavaUtilCollection:[dc getCollectionWithRAREiWidget:w] withInt:0]];
  }
  dc = [((CCPBVCollectionManager *) nil_chk([CCPBVCollectionManager getInstance])) getCollectionWithNSString:@"flags"];
  if (dc != nil && ![dc isEmpty]) {
    [list addWithId:[CCPBVCardStackUtils createItemsViewerWithNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.flags"] withJavaUtilCollection:[dc getCollectionWithRAREiWidget:w] withInt:0]];
  }
  dc = [((CCPBVCollectionManager *) nil_chk([CCPBVCollectionManager getInstance])) getCollectionWithNSString:@"alerts"];
  if (dc != nil && ![dc isEmpty]) {
    [list addWithId:[CCPBVCardStackUtils createItemsViewerWithNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.alerts"] withJavaUtilCollection:[dc getCollectionWithRAREiWidget:w] withInt:0]];
  }
  if ([list isEmpty]) {
    [((RAREWindowViewer *) nil_chk(w)) beep];
  }
  else if ([list size] == 1) {
    [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:[list getWithInt:0] withBoolean:NO];
  }
  else {
    RAREStackPaneViewer *sp = [CCPBVCardStackUtils createStackPaneViewer];
    int len = [list size];
    int card = 1;
    for (id<RAREiViewer> __strong v in list) {
      [((RAREStackPaneViewer *) nil_chk(sp)) addViewerWithNSString:nil withRAREiViewer:v];
      [CCPBVCardStackUtils setViewerSubTitleWithRAREiViewer:v withNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.card_of" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:card++], [JavaLangInteger valueOfWithInt:len] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    [((RAREStackPaneViewer *) nil_chk(sp)) switchToWithInt:0];
    [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:sp withBoolean:NO];
  }
}

- (id)initWithCCPBVSummary:(CCPBVSummary *)outer$ {
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _CCPBVSummary_SummaryStackActionListener = { "SummaryStackActionListener", "com.sparseware.bellavista", "Summary", 0x4, 0, NULL, 0, NULL, 0, NULL};
  return &_CCPBVSummary_SummaryStackActionListener;
}

@end
@implementation CCPBVSummary_$1

- (void)run {
  [CCPBVUtils handleErrorWithJavaLangThrowable:val$e_];
}

- (id)initWithJavaLangException:(JavaLangException *)capture$0 {
  val$e_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$e_", NULL, 0x1012, "LJavaLangException" },
  };
  static J2ObjcClassInfo _CCPBVSummary_$1 = { "$1", "com.sparseware.bellavista", "Summary", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVSummary_$1;
}

@end
