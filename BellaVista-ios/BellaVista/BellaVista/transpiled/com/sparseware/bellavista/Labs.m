//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Labs.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/spot/Region.h"
#include "com/appnativa/rare/spot/SplitPane.h"
#include "com/appnativa/rare/spot/Table.h"
#include "com/appnativa/rare/spot/Widget.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/FontUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/ScreenUtils.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/ViewerCreator.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/DataEvent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/ui/iPlatformRenderingComponent.h"
#include "com/appnativa/rare/ui/renderer/UIFormsLayoutRenderer.h"
#include "com/appnativa/rare/util/DataItemParserHandler.h"
#include "com/appnativa/rare/viewer/GridPaneViewer.h"
#include "com/appnativa/rare/viewer/SplitPaneViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/ToolBarViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/ComboBoxWidget.h"
#include "com/appnativa/rare/widget/NavigatorWidget.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/aGroupableButton.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/Base64.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/SimpleDateFormatEx.h"
#include "com/appnativa/util/iStringConverter.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/ClinicalValue.h"
#include "com/sparseware/bellavista/Document.h"
#include "com/sparseware/bellavista/Labs.h"
#include "com/sparseware/bellavista/ResultsView.h"
#include "com/sparseware/bellavista/TrendPanel.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/aResultsManager.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation CCPBVLabs

static int CCPBVLabs_CATEGORY_NAME_POSITION_ = 6;
static int CCPBVLabs_IS_DOCUMENT_POSITION_ = 5;
static int CCPBVLabs_SORT_ORDER_POSITION_ = 8;
static int CCPBVLabs_UNIT_POSITION_ = 3;
static int CCPBVLabs_RESULT_ID_POSITION_ = 9;
static int CCPBVLabs_COMMENT_POSITION_ = 10;
static JavaUtilLinkedHashMap * CCPBVLabs_trendMap_;

+ (int)CATEGORY_NAME_POSITION {
  return CCPBVLabs_CATEGORY_NAME_POSITION_;
}

+ (int *)CATEGORY_NAME_POSITIONRef {
  return &CCPBVLabs_CATEGORY_NAME_POSITION_;
}

+ (int)IS_DOCUMENT_POSITION {
  return CCPBVLabs_IS_DOCUMENT_POSITION_;
}

+ (int *)IS_DOCUMENT_POSITIONRef {
  return &CCPBVLabs_IS_DOCUMENT_POSITION_;
}

+ (int)SORT_ORDER_POSITION {
  return CCPBVLabs_SORT_ORDER_POSITION_;
}

+ (int *)SORT_ORDER_POSITIONRef {
  return &CCPBVLabs_SORT_ORDER_POSITION_;
}

+ (int)UNIT_POSITION {
  return CCPBVLabs_UNIT_POSITION_;
}

+ (int *)UNIT_POSITIONRef {
  return &CCPBVLabs_UNIT_POSITION_;
}

+ (int)RESULT_ID_POSITION {
  return CCPBVLabs_RESULT_ID_POSITION_;
}

+ (int *)RESULT_ID_POSITIONRef {
  return &CCPBVLabs_RESULT_ID_POSITION_;
}

+ (int)COMMENT_POSITION {
  return CCPBVLabs_COMMENT_POSITION_;
}

+ (int *)COMMENT_POSITIONRef {
  return &CCPBVLabs_COMMENT_POSITION_;
}

+ (JavaUtilLinkedHashMap *)trendMap {
  return CCPBVLabs_trendMap_;
}

+ (void)setTrendMap:(JavaUtilLinkedHashMap *)trendMap {
  CCPBVLabs_trendMap_ = trendMap;
}

- (id)init {
  if (self = [super initWithNSString:@"labs" withNSString:@"Labs"]) {
    uniqueSummaryEntries_ = YES;
    temp_ = [[JavaLangStringBuilder alloc] init];
    CCPBVLabs_trendMap_ = [[JavaUtilLinkedHashMap alloc] initWithInt:4];
    id<RAREiPlatformAppContext> app = [RAREPlatform getAppContext];
    RAREUTJSONObject *patient = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk(app)) getDataWithId:@"patient"], [RAREUTJSONObject class]);
    bunValue_ = (CCPBVClinicalValue *) check_class_cast([((RAREUTJSONObject *) nil_chk(patient)) optWithNSString:@"cv_bun"], [CCPBVClinicalValue class]);
    creatinineValue_ = (CCPBVClinicalValue *) check_class_cast([patient optWithNSString:@"cv_creatinine"], [CCPBVClinicalValue class]);
    bunID_ = (bunValue_ == nil) ? nil : [bunValue_ getID];
    creatineID_ = (bunValue_ == nil) ? nil : [((CCPBVClinicalValue *) nil_chk(creatinineValue_)) getID];
    RAREUTJSONObject *info = (RAREUTJSONObject *) check_class_cast([app getDataWithId:@"labsInfo"], [RAREUTJSONObject class]);
    trendPanels_ = [self createTrendPanelsWithRAREUTJSONArray:[((RAREUTJSONObject *) nil_chk(info)) optJSONArrayWithNSString:@"trends"] withBoolean:NO];
    itemCounts_ = [[JavaUtilLinkedHashMap alloc] init];
    itemDatesSet_ = [[JavaUtilLinkedHashSet alloc] init];
    dataPageSize_ = [info optIntWithNSString:@"dataPageSize" withInt:dataPageSize_];
    documentsInlined_ = [info optBooleanWithNSString:@"documentsInlined" withBoolean:NO];
    sortCategoriesOnLinkedData_ = [info optBooleanWithNSString:@"documentsInlined" withBoolean:YES];
    showUnits_ = [info optBooleanWithNSString:@"showUnits" withBoolean:NO];
    collectionInfoKey_ = [info optStringWithNSString:@"collectionInfoKey" withNSString:nil];
    if ((collectionInfoKey_ != nil) && ([collectionInfoKey_ sequenceLength] > 0)) {
      collectionInfoMap_ = [[JavaUtilHashMap alloc] init];
    }
    else {
      collectionInfoKey_ = nil;
    }
    if (documentsInlined_) {
      seeReport_ = [RAREPlatform getResourceAsStringWithNSString:@"bv.text.see_report"];
      unknowResultColor_ = [RAREColorUtils getColorWithNSString:@"unknown"];
    }
    spreadSheetPageSize_ = [info optIntWithNSString:@"spreadSheetPageSize" withInt:spreadSheetPageSize_];
    if ([info optBooleanWithNSString:@"hasReferenceRange" withBoolean:NO]) {
      (*[CCPBVaResultsManager RANGE_POSITIONRef]) = 4;
    }
    if (trendPanels_ != nil) {
      trendsLayout_ = [((RAREUTJSONObject *) nil_chk([info getJSONObjectWithNSString:@"trendsLayout"])) getObjectMap];
    }
    currentView_ = ([RAREUIScreen isLargeScreen] || [CCPBVUtils isCardStack]) ? [CCPBVResultsViewEnum TRENDS] : [CCPBVResultsViewEnum CHARTS];
    chartHandler_ = [[CCPBVLabs_ChartHandler alloc] initWithCCPBVLabs:self withRAREUTJSONObject:[info getJSONObjectWithNSString:@"charts"]];
    chartableItemsManager_ = [[CCPBVaResultsManager_ChartableItemsManager alloc] init];
    pageIcon_ = [RAREPlatform getResourceAsIconWithNSString:@"bv.icon.document"];
    noteIcon_ = [RAREPlatform getResourceAsIconWithNSString:@"bv.icon.note"];
  }
  return self;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiWidget> cw = [((RAREActionEvent *) nil_chk(e)) getWidget];
  RARERenderableDataItem *item = nil;
  if ([(id) cw isKindOfClass:[RAREPushButtonWidget class]]) {
    item = [((RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class])) getSelectedItem];
  }
  else if ([(id) cw isKindOfClass:[RAREComboBoxWidget class]]) {
    item = [((RAREComboBoxWidget *) check_class_cast(cw, [RAREComboBoxWidget class])) getSelectedItem];
  }
  [self filterTableWithRARERenderableDataItem:item];
}

- (void)changeViewWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *name = [((RAREaGroupableButton *) check_class_cast(widget, [RAREaGroupableButton class])) getSelectedButtonName];
  if (name == nil) {
    name = [((id<RAREiWidget>) nil_chk(widget)) getName];
  }
  if ([RAREUIScreen isLargeScreen] && [@"spreadsheet" isEqual:name]) {
    NSString *key = [self getSelectedChartableKey];
    if (key != nil) {
      keyPath_ = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ key } count:1 type:[IOSClass classWithClass:[NSString class]]]];
    }
  }
  [super changeViewWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
}

- (void)onSummaryDisposeWithNSString:(NSString *)eventName
                     withRAREiWidget:(id<RAREiWidget>)widget
             withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if (dataTable_ == widget) {
    [super onDisposeWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  }
}

- (CCPBVActionPath *)getDisplayedActionPath {
  if (isSummary_) {
    return [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [CCPBVUtils getPatientID], @"summary" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  }
  return [super getDisplayedActionPath];
}

- (void)filterTableWithRARERenderableDataItem:(RARERenderableDataItem *)filterItem {
  if (filterItem != nil) {
    RAREWindowViewer *w = [RAREPlatform getWindowViewer];
    NSString *cat = [filterItem description];
    BOOL all = [filterItem getLinkedData] == nil;
    NSString *title;
    if (all) {
      title = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.lab_test_all"];
    }
    else {
      title = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.lab_test" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ cat } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    RARETableViewer *table;
    if (currentView_ == [CCPBVResultsViewEnum SPREADSHEET]) {
      table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk(w)) getViewerWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
      [((RARETableViewer *) nil_chk(table)) setColumnTitleWithInt:0 withNSString:title];
    }
    else {
      table = dataTable_;
      [((RARETableViewer *) nil_chk(table)) setColumnTitleWithInt:1 withNSString:title];
    }
    [((RARETableViewer *) nil_chk(table)) clearSelection];
    if ([RAREUIScreen isLargeScreen]) {
      [self clearChartsWithRARETableViewer:table];
    }
    id<JavaUtilList> fkeys = (chartableItemsManager_ == nil) ? nil : chartableItemsManager_->filteredChartableKeys_;
    if (fkeys != nil) {
      [fkeys clear];
    }
    if (all) {
      [table unfilter];
      if (![table isEmpty]) {
        [table scrollRowToTopWithInt:0];
      }
    }
    else {
      [table filterWithRAREUTiFilter:[[CCPBVLabs_$1 alloc] initWithCCPBVLabs:self withNSString:cat withJavaUtilList:fkeys]];
      if (![table isEmpty]) {
        [table scrollRowToTopWithInt:0];
      }
    }
  }
}

- (BOOL)checkRowWithRARERenderableDataItem:(RARERenderableDataItem *)row
                                   withInt:(int)index
                                   withInt:(int)expandableColumn
                                   withInt:(int)rowRount {
  @try {
    do {
      RARERenderableDataItem *name = [((RARERenderableDataItem *) nil_chk(row)) getItemExWithInt:[CCPBVaResultsManager NAME_POSITION]];
      JavaUtilDate *date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
      if ((name == nil) || (date == nil)) {
        break;
      }
      NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(name)) getLinkedData], [NSString class]);
      if (key == nil) {
        break;
      }
      RARERenderableDataItem *valueItem = [row getItemExWithInt:CCPBVLabs_IS_DOCUMENT_POSITION_];
      if ((valueItem != nil) && [@"true" isEqual:[valueItem getValue]]) {
        valueItem = [row getWithInt:[CCPBVaResultsManager VALUE_POSITION]];
        if ((collectionInfoKey_ != nil) && [collectionInfoKey_ isEqual:key]) {
          (void) [((JavaUtilHashMap *) nil_chk(collectionInfoMap_)) putWithId:date withId:row];
          return NO;
        }
        [((RARERenderableDataItem *) nil_chk(valueItem)) setIconWithRAREiPlatformIcon:pageIcon_];
        [valueItem setIconPositionWithRARERenderableDataItem_IconPositionEnum:[RARERenderableDataItem_IconPositionEnum RIGHT_JUSTIFIED]];
        if (documentsInlined_) {
          valueItem = [row getWithInt:[CCPBVaResultsManager VALUE_POSITION]];
          [row setLinkedDataWithId:[((RARERenderableDataItem *) nil_chk(valueItem)) getValue]];
          [valueItem setValueWithId:seeReport_];
          [valueItem setForegroundWithRAREUIColor:unknowResultColor_];
        }
      }
      if ((creatFound_ && bunFound_) && isSummary_) {
        break;
      }
      valueItem = [row getWithInt:[CCPBVaResultsManager VALUE_POSITION]];
      NSString *value = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(valueItem)) getValue], [NSString class]);
      if (!isSummary_) {
        if ([((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) checkWithNSString:key withNSString:value]) {
          [((JavaUtilLinkedHashSet *) nil_chk(itemDatesSet_)) addWithId:date];
          RAREUTMutableInteger *count = [((JavaUtilLinkedHashMap *) nil_chk(itemCounts_)) getWithId:key];
          if (count == nil) {
            count = [[RAREUTMutableInteger alloc] initWithInt:0];
            (void) [itemCounts_ putWithId:key withId:count];
          }
          [((RAREUTMutableInteger *) nil_chk(count)) incrementAndGet];
          if (trendPanels_ != nil) {
            {
              IOSObjectArray *a__ = trendPanels_;
              id const *b__ = a__->buffer_;
              id const *e__ = b__ + a__->size_;
              while (b__ < e__) {
                CCPBVTrendPanel *p = (*b__++);
                if ([((CCPBVTrendPanel *) nil_chk(p)) addTrendWithNSString:key withJavaUtilDate:date withRARERenderableDataItem:valueItem]) {
                  break;
                }
              }
            }
          }
        }
        if (showUnits_) {
          RARERenderableDataItem *unitItem = [row getItemExWithInt:CCPBVLabs_UNIT_POSITION_];
          NSString *unit = (unitItem == nil) ? @"" : [unitItem description];
          if ([unit sequenceLength] > 0) {
            JavaLangStringBuilder *sb = temp_;
            [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
            (void) [sb appendWithNSString:value];
            int n = [((NSString *) nil_chk(value)) indexOf:'('];
            if (n == -1) {
              n = [value indexOf:'*'];
            }
            if (n == -1) {
              (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:' '])) appendWithNSString:unit];
            }
            else {
              (void) [sb insertWithInt:n withNSString:unit];
              (void) [sb insertWithInt:n + [unit sequenceLength] withChar:' '];
            }
            [valueItem setValueWithId:[sb description]];
          }
        }
      }
      if (creatFound_ && bunFound_) {
        break;
      }
      if (!bunFound_ && [((NSString *) nil_chk(key)) isEqual:bunID_]) {
        bunFound_ = YES;
        date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
        [((CCPBVClinicalValue *) nil_chk(bunValue_)) updateWithJavaUtilDate:date withNSString:value];
        if (creatFound_) {
          break;
        }
      }
      if (!creatFound_ && [((NSString *) nil_chk(key)) isEqual:creatineID_]) {
        creatFound_ = YES;
        [((CCPBVClinicalValue *) nil_chk(bunValue_)) updateWithJavaUtilDate:date withNSString:value];
      }
    }
    while (NO);
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
  return YES;
}

- (void)addCurrentPathIDWithCCPBVActionPath:(CCPBVActionPath *)path {
  {
    RARERenderableDataItem *row;
    switch ([currentView_ ordinal]) {
      case CCPBVResultsView_DOCUMENT:
      row = [((RARETableViewer *) nil_chk(dataTable_)) getSelectedItem];
      if (row != nil) {
        NSString *id_ = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVLabs_RESULT_ID_POSITION_])) getValue], [NSString class]);
        [((CCPBVActionPath *) nil_chk(path)) addWithId:id_];
      }
      break;
      default:
      break;
    }
  }
}

- (void)onFinishedLoadingWithNSString:(NSString *)eventName
                      withRAREiWidget:(id<RAREiWidget>)widget
              withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREToolBarViewer *tb = (RAREToolBarViewer *) check_class_cast([((id<RAREiContainer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getParent])) getWidgetWithNSString:@"tableToolbar"], [RAREToolBarViewer class]);
  id<RAREiWidget> sb = (tb == nil) ? nil : [tb getWidgetWithNSString:@"spreadsheet"];
  if (sb != nil) {
    [sb setEnabledWithBoolean:!hasNoData_];
  }
  RAREaWidget *cw = (RAREaWidget *) check_class_cast(((tb == nil) ? nil : [tb getWidgetWithNSString:@"categories"]), [RAREaWidget class]);
  if (cw != nil) {
    [cw setEnabledWithBoolean:!hasNoData_];
  }
  if (hasNoData_) {
    return;
  }
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  [table pageHome];
  if (cw != nil) {
    [cw clear];
    RARERenderableDataItem *all = [[RARERenderableDataItem alloc] initWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.all_labs"]];
    RARERenderableDataItem *other = [[RARERenderableDataItem alloc] initWithNSString:[w getStringWithNSString:@"bv.text.other_labs_category"] withId:@"zzzzzzzzzzz" withRAREiPlatformIcon:nil];
    id<JavaUtilList> list = [CCPBVUtils categorizeWithRARETableViewer:table withInt:CCPBVLabs_CATEGORY_NAME_POSITION_ withRARERenderableDataItem:other withBoolean:sortCategoriesOnLinkedData_];
    [((id<JavaUtilList>) nil_chk(list)) addWithInt:0 withId:all];
    int len = [list size];
    id<RAREiPlatformIcon> icon = [RAREPlatform getResourceAsIconWithNSString:@"bv.icon.dash"];
    for (int i = 0; i < len; i++) {
      RARERenderableDataItem *item = [list getWithInt:i];
      [((RARERenderableDataItem *) nil_chk(item)) setIconWithRAREiPlatformIcon:icon];
      [item setActionListenerWithRAREiActionListener:self];
    }
    [cw addAllWithJavaUtilCollection:list];
    if ([cw isKindOfClass:[RAREPushButtonWidget class]]) {
      [((RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class])) setPopupScrollableWithBoolean:YES];
    }
    [cw update];
  }
  [CCPBVUtils sortTableWithRARETableViewer:table withInt:CCPBVLabs_SORT_ORDER_POSITION_];
  [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) createListWithRARETableViewer:table withInt:[CCPBVaResultsManager NAME_POSITION]];
  if ([CCPBVUtils isCardStack]) {
    if ((trendPanels_ != nil) && ((int) [trendPanels_ count] > 0)) {
      id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk([table getFormViewer])) getWidgetWithNSString:@"trends"], @protocol(RAREiContainer));
      CCPBVTrendPanel *panel = IOSObjectArray_Get(trendPanels_, 0);
      [((CCPBVTrendPanel *) nil_chk(panel)) removePeers];
      NSString *text = [panel popuplateFormWithRAREiContainer:fv];
      [CCPBVCardStackUtils switchToViewerWithRAREiViewer:[table getParent]];
      [self updateCardStackTitleWithNSString:panel->title_ withNSString:text];
    }
  }
}

- (void)onLabReportLoadWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREGridPaneViewer *gp = (RAREGridPaneViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"labReport"], [RAREGridPaneViewer class]);
  CCPBVDocument *doc = (CCPBVDocument *) check_class_cast([fv getLinkedData], [CCPBVDocument class]);
  if ((doc != nil) && ([doc getLinkedData] != nil)) {
    [doc setLinkedDataWithId:nil];
    RAREWindowViewer *w = [RAREPlatform getWindowViewer];
    RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((RAREGridPaneViewer *) nil_chk(gp)) getWidgetWithNSString:@"reportStack"], [RAREStackPaneViewer class]);
    RARENavigatorWidget *nw = (RARENavigatorWidget *) check_class_cast([gp getWidgetWithNSString:@"navigator"], [RARENavigatorWidget class]);
    BOOL stains = [self reportHasStainsWithCCPBVDocument:doc];
    BOOL sus = [self reportHasSusceptibilitiesWithCCPBVDocument:doc];
    if (!stains && !sus) {
      [gp setRegionVisibleWithInt:1 withBoolean:NO];
    }
    else {
      if (!sus) {
        [((RARENavigatorWidget *) nil_chk(nw)) setActionVisibleWithInt:1 withBoolean:NO];
      }
      else {
        [self loadSusceptibilitiesWithRAREWindowViewer:w withCCPBVDocument:doc withRARETableViewer:(RARETableViewer *) check_class_cast([((RAREStackPaneViewer *) nil_chk(sp)) getViewerWithInt:1], [RARETableViewer class])];
      }
      if (!stains) {
        [((RARENavigatorWidget *) nil_chk(nw)) setActionVisibleWithInt:2 withBoolean:NO];
      }
      else {
        [self loadStainsWithRAREWindowViewer:w withCCPBVDocument:doc withRAREiWidget:[((RAREStackPaneViewer *) nil_chk(sp)) getViewerWithInt:2]];
      }
    }
  }
}

- (void)onReportNavigatorChangeWithNSString:(NSString *)eventName
                            withRAREiWidget:(id<RAREiWidget>)widget
                    withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RARENavigatorWidget *w = (RARENavigatorWidget *) check_class_cast(widget, [RARENavigatorWidget class]);
  int n = [((RARENavigatorWidget *) nil_chk(w)) getSelectedIndex];
  [((RAREStackPaneViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([w getFormViewer])) getWidgetWithNSString:@"reportStack"], [RAREStackPaneViewer class])) switchToWithInt:n];
}

- (void)onSummaryTableActionWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *key = [((RARETableViewer *) check_class_cast(widget, [RARETableViewer class])) getSelectionDataAsStringWithInt:1];
  CCPBVActionPath *path = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"labs", key } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  [CCPBVUtils handleActionPathWithCCPBVActionPath:path];
}

- (void)onCreatedWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ([CCPBVUtils isCardStack]) {
    [CCPBVCardStackUtils setViewerActionWithRAREiViewer:(id<RAREiViewer>) check_protocol_cast(widget, @protocol(RAREiViewer)) withId:[[CCPBVaResultsManager_ChartsActionListener alloc] initWithCCPBVaResultsManager:self] withBoolean:YES];
    currentView_ = [CCPBVResultsViewEnum CHARTS];
  }
  else {
    CCPBVActionPath *path = [CCPBVUtils getActionPathWithBoolean:NO];
    if ((path != nil) && ([path peek] != nil)) {
      currentView_ = [CCPBVResultsViewEnum CHARTS];
      if ([RAREUIScreen isLargeScreen]) {
        RARESPOTSplitPane *cfg = (RARESPOTSplitPane *) check_class_cast([((RAREDataEvent *) check_class_cast(event, [RAREDataEvent class])) getData], [RARESPOTSplitPane class]);
        RARESPOTRegion *r = (RARESPOTRegion *) check_class_cast([((SPOTSet *) nil_chk(((RARESPOTSplitPane *) nil_chk(cfg))->regions_)) getExWithInt:1], [RARESPOTRegion class]);
        [((SPOTPrintableString *) nil_chk(((RARESPOTRegion *) nil_chk(r))->dataURL_)) setValueWithNSString:@"labs_charts.rml"];
      }
    }
    else {
      currentView_ = [RAREUIScreen isLargeScreen] ? [CCPBVResultsViewEnum TRENDS] : [CCPBVResultsViewEnum CHARTS];
    }
  }
}

- (void)onDisposeWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [super onDisposeWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  [self disposeOfLoadedDocument];
}

- (void)onTrendsTableConfigureWithNSString:(NSString *)eventName
                           withRAREiWidget:(id<RAREiWidget>)widget
                   withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  [self configureTrendFormsRendererWithRAREUIFormsLayoutRenderer:(RAREUIFormsLayoutRenderer *) check_class_cast([((RAREColumn *) nil_chk([((RARETableViewer *) nil_chk(table)) getColumnWithInt:0])) getCellRenderer], [RAREUIFormsLayoutRenderer class])];
  if ([table getColumnCount] > 1) {
    [self configureTrendFormsRendererWithRAREUIFormsLayoutRenderer:(RAREUIFormsLayoutRenderer *) check_class_cast([((RAREColumn *) nil_chk([table getColumnWithInt:1])) getCellRenderer], [RAREUIFormsLayoutRenderer class])];
  }
  if (dataLoaded_ && (trendPanels_ != nil)) {
    {
      IOSObjectArray *a__ = trendPanels_;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        CCPBVTrendPanel *p = (*b__++);
        [((CCPBVTrendPanel *) nil_chk(p)) popuplateTableWithRARETableViewer:(RARETableViewer *) check_class_cast(widget, [RARETableViewer class]) withJavaUtilMap:trendsLayout_];
      }
    }
    [((RARETableViewer *) check_class_cast(widget, [RARETableViewer class])) refreshItems];
  }
  overViewLoaded_ = YES;
}

- (void)onTrendsTableCreatedWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  int width = (int) [RAREUIScreen fromPlatformPixelsWithFloat:[((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getWidth]];
  if (width < 480) {
    RARESPOTTable *table = (RARESPOTTable *) check_class_cast([((RAREDataEvent *) check_class_cast(event, [RAREDataEvent class])) getData], [RARESPOTTable class]);
    (void) [((SPOTSet *) nil_chk(((RARESPOTTable *) nil_chk(table))->columns_)) removeWithInt:1];
  }
}

- (void)selectLabsWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)showChartForSelectedItemWithRARETableViewer:(RARETableViewer *)table {
  RARERenderableDataItem *row = [((RARETableViewer *) nil_chk(table)) getSelectedItem];
  if (![((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) isEmpty] && (([row getLinkedData] != nil) || ([row getValue] != nil))) {
    [self disposeOfLoadedDocument];
    [self showCollectionInfoWithRARETableViewer:table withRARERenderableDataItem:row];
    return;
  }
  RARERenderableDataItem *item = (row == nil) ? nil : [row getItemExWithInt:CCPBVLabs_IS_DOCUMENT_POSITION_];
  if ((item != nil) && [@"true" isEqual:[item getValue]]) {
    @try {
      RAREWindowViewer *w = [RAREPlatform getWindowViewer];
      item = [row getWithInt:CCPBVLabs_RESULT_ID_POSITION_];
      NSString *id_ = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getValue], [NSString class]);
      RARESplitPaneViewer *sv = [CCPBVUtils getSplitPaneViewerWithRAREiWidget:table];
      id<RAREiTarget> t;
      if (sv != nil) {
        t = [sv getRegionWithInt:1];
      }
      else {
        t = [((RAREWindowViewer *) nil_chk(w)) getTargetWithNSString:[RAREiTarget TARGET_WORKSPACE]];
      }
      id<RAREiViewer> v = [((id<RAREiTarget>) nil_chk(t)) getViewer];
      if ((v != nil) && ([[v getLinkedData] isKindOfClass:[CCPBVDocument class]])) {
        CCPBVDocument *odoc = (CCPBVDocument *) check_class_cast([v getLinkedData], [CCPBVDocument class]);
        if ([((NSString *) nil_chk(id_)) isEqual:[((CCPBVDocument *) nil_chk(odoc)) getID]]) {
          return;
        }
      }
      [self disposeOfLoadedDocument];
      JavaNetURL *url;
      if (documentsInlined_) {
        NSString *s = (NSString *) check_class_cast([row getValue], [NSString class]);
        if (s == nil) {
          s = (NSString *) check_class_cast([row getLinkedData], [NSString class]);
          s = [RAREUTBase64 decodeUTF8WithNSString:s];
          [row setValueWithId:s];
        }
        url = [((RAREWindowViewer *) nil_chk(w)) createInlineURLWithNSString:s withNSString:@"text.html"];
      }
      else {
        url = [table getURLWithNSString:[NSString stringWithFormat:@"document/%@.html", id_]];
      }
      RAREActionLink *link = [((RAREWindowViewer *) nil_chk(w)) createActionLinkWithRAREiWidget:nil withId:@"/lab_report.rml"];
      [((RAREActionLink *) nil_chk(link)) setTargetNameWithNSString:[t getName]];
      CCPBVDocument *doc = [[CCPBVLabs_LabDocument alloc] initWithRAREiWidget:table withRAREActionLink:[[RAREActionLink alloc] initWithJavaNetURL:url] withNSString:id_];
      loadedDocument_ = doc;
      [doc setLinkedDataWithId:[JavaLangBoolean getFALSE]];
      [doc setMainDocumentInfoWithJavaUtilDate:(JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]) withNSString:[((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager NAME_POSITION]])) description]];
      [doc loadAndPopulateViewerWithRAREActionLink:link];
    }
    @catch (JavaLangException *e) {
      [CCPBVUtils handleErrorWithJavaLangThrowable:e];
    }
  }
  else {
    [self disposeOfLoadedDocument];
    [super showChartForSelectedItemWithRARETableViewer:table];
  }
}

- (void)disposeOfLoadedDocument {
  if (loadedDocument_ != nil) {
    [loadedDocument_ dispose];
    loadedDocument_ = nil;
  }
}

- (void)showCollectionInfoWithRARETableViewer:(RARETableViewer *)table
                   withRARERenderableDataItem:(RARERenderableDataItem *)row {
  @try {
    RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((RARERenderableDataItem *) nil_chk(row)) getValue], [RAREUTJSONObject class]);
    if (o == nil) {
      o = [[RAREUTJSONObject alloc] initWithNSString:[RAREUTBase64 decodeUTF8WithNSString:(NSString *) check_class_cast([row getLinkedData], [NSString class])]];
      [row setValueWithId:o];
      [row setLinkedDataWithId:nil];
    }
    RAREWindowViewer *win = [RAREPlatform getWindowViewer];
    RAREUTJSONObject *json = o;
    (void) [RAREViewerCreator createConfigurationWithRAREiWidget:table withRAREActionLink:[[RAREActionLink alloc] initWithNSString:@"/lab_collection_info.rml"] withRAREiFunctionCallback:[[CCPBVLabs_$2 alloc] initWithRAREWindowViewer:win withRARETableViewer:table withRAREUTJSONObject:json withRARERenderableDataItem:row]];
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)configureTrendFormsRendererWithRAREUIFormsLayoutRenderer:(RAREUIFormsLayoutRenderer *)renderer {
  id<JavaUtilMap> map = trendsLayout_;
  (void) [((RAREUIFormsLayoutRenderer *) nil_chk(renderer)) addLabelRendererWithNSString:[((id<JavaUtilMap>) nil_chk(map)) getWithId:@"name"]];
  (void) [renderer addLabelRendererWithNSString:[map getWithId:@"value"]];
  (void) [renderer addLabelRendererWithNSString:[map getWithId:@"valueValue"]];
  (void) [renderer addLabelRendererWithNSString:[map getWithId:@"date"]];
  (void) [renderer addLabelRendererWithNSString:[map getWithId:@"dateValue"]];
  (void) [renderer addLabelRendererWithNSString:[map getWithId:@"trendIcon"]];
}

- (void)dataParsedWithRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilList:(id<JavaUtilList>)rows
               withRAREActionLink:(RAREActionLink *)link {
  originalRows_ = rows;
  [self tableDataLoadedWithRAREActionLink:link];
  bunFound_ = bunValue_ == nil;
  creatFound_ = creatinineValue_ == nil;
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  isSummary_ = [@"summaryLabs" isEqual:[((id<RAREiWidget>) nil_chk(widget)) getName]];
  if (!isSummary_) {
    NSString *title = [RAREPlatform getResourceAsStringWithNSString:@"bv.text.lab_test_all"];
    if (title != nil) {
      [((RARETableViewer *) nil_chk(table)) setColumnTitleWithInt:1 withNSString:title];
    }
  }
  if (trendPanels_ != nil) {
    {
      IOSObjectArray *a__ = trendPanels_;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        CCPBVTrendPanel *p = (*b__++);
        [((CCPBVTrendPanel *) nil_chk(p)) clear];
      }
    }
  }
  [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) reset];
  if (itemCounts_ != nil) {
    [itemCounts_ clear];
  }
  if (itemDatesSet_ != nil) {
    [itemDatesSet_ clear];
  }
  if ([self checkAndHandleNoDataWithRARETableViewer:table withJavaUtilList:rows]) {
    return;
  }
  [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) showWaitCursor];
  (void) [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeWorkerTaskWithRAREiWorkerTask:[[CCPBVLabs_$3 alloc] initWithCCPBVLabs:self withRARETableViewer:table withJavaUtilList:rows]];
}

- (NSString *)getCategoryWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  return (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVLabs_CATEGORY_NAME_POSITION_])) getValue], [NSString class]);
}

- (NSString *)getSpeeedSheetColumnTitle {
  return [RAREPlatform getResourceAsStringWithNSString:@"bv.text.lab_test_all"];
}

- (void)handleSummaryLabsWithRARETableViewer:(RARETableViewer *)table
                            withJavaUtilList:(id<JavaUtilList>)rows {
  JavaUtilHashSet *map = [[JavaUtilHashSet alloc] init];
  JavaUtilDate *end = nil;
  JavaUtilDate *beg = nil;
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  if (len == 0) {
    return;
  }
  id<JavaUtilList> list = rows;
  if (uniqueSummaryEntries_) {
    list = [[JavaUtilArrayList alloc] initWithInt:[JavaLangMath minWithInt:len withInt:10]];
  }
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *row = [rows getWithInt:i];
    RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(row)) getWithInt:[CCPBVaResultsManager NAME_POSITION]];
    if (uniqueSummaryEntries_) {
      NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getLinkedData], [NSString class]);
      if ([map addWithId:key]) {
        [list addWithId:row];
        beg = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
        if (end == nil) {
          end = beg;
        }
      }
    }
    else {
      beg = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
      if (end == nil) {
        end = beg;
      }
    }
  }
  [((RARETableViewer *) nil_chk(table)) setAllWithJavaUtilCollection:list];
  NSString *s;
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if ([RAREScreenUtils isSmallScreen]) {
    int d = [RAREUTHelper daysBetweenWithJavaUtilDate:[[JavaUtilDate alloc] init] withJavaUtilDate:end];
    if (d > 30) {
      return;
    }
    s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.summary_labs_small" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:d] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  else {
    s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.time.general_short"];
    RAREUTSimpleDateFormatEx *df = [[RAREUTSimpleDateFormatEx alloc] initWithNSString:s];
    if ([((JavaUtilDate *) nil_chk(beg)) isEqual:end]) {
      s = [df formatWithJavaUtilDate:beg];
    }
    else {
      s = [NSString stringWithFormat:@"%@ - %@", [df formatWithJavaUtilDate:beg], [df formatWithJavaUtilDate:end]];
    }
    s = [w getStringWithNSString:@"bv.text.summary_labs" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  id<RAREiWidget> label = [((id<RAREiFormViewer>) nil_chk([table getFormViewer])) getWidgetWithNSString:@"labs_description"];
  NSString *value = s;
  [RAREPlatform runOnUIThreadWithJavaLangRunnable:[[CCPBVLabs_$4 alloc] initWithRAREiWidget:label withNSString:value]];
}

- (BOOL)hasCategories {
  return YES;
}

- (void)loadStainsWithRAREWindowViewer:(RAREWindowViewer *)w
                     withCCPBVDocument:(CCPBVDocument *)doc
                       withRAREiWidget:(id<RAREiWidget>)browser {
  CCPBVDocument_DocumentItem *di = ((CCPBVLabs_LabDocument *) nil_chk(doc))->stains_;
  @try {
    [((id<RAREiWidget>) nil_chk(browser)) setValueWithId:((CCPBVDocument_DocumentItem *) nil_chk(di))->itemBody_];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [w alertWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.labs_stains_error"]];
  }
}

- (void)loadSusceptibilitiesWithRAREWindowViewer:(RAREWindowViewer *)w
                               withCCPBVDocument:(CCPBVDocument *)doc
                             withRARETableViewer:(RARETableViewer *)table {
  BOOL error = NO;
  CCPBVDocument_DocumentItem *di = ((CCPBVLabs_LabDocument *) nil_chk(doc))->susceptibilities_;
  do {
    @try {
      RAREActionLink *link = [[RAREActionLink alloc] initWithNSString:((CCPBVDocument_DocumentItem *) nil_chk(di))->itemBody_ withNSString:di->mimeType_];
      [link setContextWithRAREUTiURLResolver:table];
      id<JavaUtilList> list = [RAREDataItemParserHandler parseWithRAREiWidget:table withRAREActionLink:link withInt:-1];
      int len = [((id<JavaUtilList>) nil_chk(list)) size];
      if (len < 2) {
        error = YES;
        break;
      }
      RARERenderableDataItem *cols = [list removeWithInt:0];
      id<JavaUtilList> tcols = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((RARETableViewer *) nil_chk(table)) getColumns]];
      len = [((RARERenderableDataItem *) nil_chk(cols)) size];
      RAREColumn *c;
      RAREUIFont *f = [RAREFontUtils getDefaultFont];
      f = [f deriveFontSizeWithFloat:[((RAREUIFont *) nil_chk(f)) getSize] - 2];
      for (int n = 2; n < len; n++) {
        [tcols addWithId:c = [table createColumnWithRARERenderableDataItem:[cols getItemWithInt:n]]];
        [((RAREColumn *) nil_chk(c)) setHeaderFontWithRAREUIFont:f];
        id<JavaLangCharSequence> s = [c getColumnTitle];
        [c setColumnWidthWithNSString:[NSString stringWithFormat:@"%dch", ([((id<JavaLangCharSequence>) nil_chk(s)) sequenceLength] + 1)]];
      }
      f = [RAREFontUtils getDefaultFont];
      [table setFontWithRAREUIFont:[((RAREUIFont *) nil_chk([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getFont])) deriveFontSizeWithFloat:[((RAREUIFont *) nil_chk(f)) getSize] - 1]];
      [table resetTableWithJavaUtilList:tcols withJavaUtilList:[CCPBVUtils groupRowsWithRARETableViewer:table withJavaUtilList:list withInt:0 withInt:0 withBoolean:NO]];
      for (int n = 2; n < len; n++) {
        [table sizeColumnToFitWithInt:n];
      }
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      error = YES;
    }
  }
  while (NO);
  if (error) {
    [w alertWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.labs_susceptibilities_error"]];
  }
}

- (void)processDataWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  @try {
    [CCPBVUtils checkRowsInReverseAndOptimizeDatesWithJavaUtilList:rows withInt:[CCPBVaResultsManager DATE_POSITION] withInt:RARERenderableDataItem_TYPE_DATETIME withCCPBViValueChecker:self];
    itemDates_ = [itemDatesSet_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilLinkedHashSet *) nil_chk(itemDatesSet_)) size] type:[IOSClass classWithClass:[JavaUtilDate class]]]];
    if (isSummary_) {
      [self handleSummaryLabsWithRARETableViewer:table withJavaUtilList:rows];
    }
    else {
      [JavaUtilArrays sortWithNSObjectArray:itemDates_];
      int len = (int) [((IOSObjectArray *) nil_chk(itemDates_)) count];
      spreadsheetPosition_ = [JavaLangMath maxWithInt:0 withInt:len - spreadSheetPageSize_];
      rows = [CCPBVUtils groupByDateWithRARETableViewer:table withJavaUtilList:rows];
      if ((collectionInfoMap_ != nil) && ![collectionInfoMap_ isEmpty]) {
        len = [((id<JavaUtilList>) nil_chk(rows)) size];
        for (int i = 0; i < len; i++) {
          RARERenderableDataItem *row = [rows getWithInt:i];
          JavaUtilDate *date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
          RARERenderableDataItem *ci = [collectionInfoMap_ getWithId:date];
          if (ci == nil) {
            continue;
          }
          RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(ci)) getItemExWithInt:CCPBVLabs_COMMENT_POSITION_];
          NSString *s = (item == nil) ? @"" : [item description];
          if ([@"true" isEqual:s]) {
            item = [row getItemExWithInt:[CCPBVaResultsManager NAME_POSITION]];
            [((RARERenderableDataItem *) nil_chk(item)) setIconWithRAREiPlatformIcon:noteIcon_];
            [item setIconPositionWithRARERenderableDataItem_IconPositionEnum:[RARERenderableDataItem_IconPositionEnum LEADING]];
          }
          [row setLinkedDataWithId:[((RARERenderableDataItem *) nil_chk([ci getItemExWithInt:[CCPBVaResultsManager VALUE_POSITION]])) getValue]];
        }
        [collectionInfoMap_ clear];
      }
      [((RARETableViewer *) nil_chk(table)) handleGroupedCollectionWithJavaUtilCollection:rows withBoolean:NO];
      dataLoaded_ = YES;
    }
  }
  @finally {
  }
}

- (BOOL)reportHasStainsWithCCPBVDocument:(CCPBVDocument *)doc {
  if ([doc isKindOfClass:[CCPBVLabs_LabDocument class]]) {
    return ((CCPBVLabs_LabDocument *) nil_chk(doc))->stains_ != nil;
  }
  return NO;
}

- (BOOL)reportHasSusceptibilitiesWithCCPBVDocument:(CCPBVDocument *)doc {
  if ([doc isKindOfClass:[CCPBVLabs_LabDocument class]]) {
    return ((CCPBVLabs_LabDocument *) nil_chk(doc))->susceptibilities_ != nil;
  }
  return NO;
}

- (void)reset {
  [super reset];
  if ([RAREUIScreen isLargeScreen]) {
    currentView_ = [CCPBVResultsViewEnum TRENDS];
  }
  overViewLoaded_ = NO;
}

- (void)copyAllFieldsTo:(CCPBVLabs *)other {
  [super copyAllFieldsTo:other];
  other->bunFound_ = bunFound_;
  other->bunID_ = bunID_;
  other->bunValue_ = bunValue_;
  other->collectionInfoKey_ = collectionInfoKey_;
  other->collectionInfoMap_ = collectionInfoMap_;
  other->creatFound_ = creatFound_;
  other->creatineID_ = creatineID_;
  other->creatinineValue_ = creatinineValue_;
  other->documentsInlined_ = documentsInlined_;
  other->isSummary_ = isSummary_;
  other->loadedDocument_ = loadedDocument_;
  other->noteIcon_ = noteIcon_;
  other->overViewLoaded_ = overViewLoaded_;
  other->pageIcon_ = pageIcon_;
  other->seeReport_ = seeReport_;
  other->showUnits_ = showUnits_;
  other->sortCategoriesOnLinkedData_ = sortCategoriesOnLinkedData_;
  other->temp_ = temp_;
  other->trendPanels_ = trendPanels_;
  other->trendsLayout_ = trendsLayout_;
  other->uniqueSummaryEntries_ = uniqueSummaryEntries_;
  other->unknowResultColor_ = unknowResultColor_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getDisplayedActionPath", NULL, "LCCPBVActionPath", 0x1, NULL },
    { "filterTableWithRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "checkRowWithRARERenderableDataItem:withInt:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "addCurrentPathIDWithCCPBVActionPath:", NULL, "V", 0x4, NULL },
    { "disposeOfLoadedDocument", NULL, "V", 0x2, NULL },
    { "showCollectionInfoWithRARETableViewer:withRARERenderableDataItem:", NULL, "V", 0x2, NULL },
    { "configureTrendFormsRendererWithRAREUIFormsLayoutRenderer:", NULL, "V", 0x4, NULL },
    { "dataParsedWithRAREiWidget:withJavaUtilList:withRAREActionLink:", NULL, "V", 0x4, NULL },
    { "getCategoryWithRARERenderableDataItem:", NULL, "LNSString", 0x4, NULL },
    { "getSpeeedSheetColumnTitle", NULL, "LNSString", 0x4, NULL },
    { "handleSummaryLabsWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "hasCategories", NULL, "Z", 0x4, NULL },
    { "loadStainsWithRAREWindowViewer:withCCPBVDocument:withRAREiWidget:", NULL, "V", 0x4, NULL },
    { "loadSusceptibilitiesWithRAREWindowViewer:withCCPBVDocument:withRARETableViewer:", NULL, "V", 0x4, NULL },
    { "processDataWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "reportHasStainsWithCCPBVDocument:", NULL, "Z", 0x4, NULL },
    { "reportHasSusceptibilitiesWithCCPBVDocument:", NULL, "Z", 0x4, NULL },
    { "reset", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "CATEGORY_NAME_POSITION_", NULL, 0x9, "I" },
    { "IS_DOCUMENT_POSITION_", NULL, 0x9, "I" },
    { "SORT_ORDER_POSITION_", NULL, 0x9, "I" },
    { "UNIT_POSITION_", NULL, 0x9, "I" },
    { "RESULT_ID_POSITION_", NULL, 0xa, "I" },
    { "COMMENT_POSITION_", NULL, 0xa, "I" },
    { "trendMap_", NULL, 0x8, "LJavaUtilLinkedHashMap" },
    { "bunFound_", NULL, 0x4, "Z" },
    { "creatFound_", NULL, 0x4, "Z" },
    { "bunID_", NULL, 0x4, "LNSString" },
    { "creatineID_", NULL, 0x4, "LNSString" },
    { "bunValue_", NULL, 0x4, "LCCPBVClinicalValue" },
    { "creatinineValue_", NULL, 0x4, "LCCPBVClinicalValue" },
    { "isSummary_", NULL, 0x4, "Z" },
    { "trendPanels_", NULL, 0x4, "LIOSObjectArray" },
    { "overViewLoaded_", NULL, 0x4, "Z" },
    { "trendsLayout_", NULL, 0x4, "LJavaUtilMap" },
    { "uniqueSummaryEntries_", NULL, 0x4, "Z" },
    { "documentsInlined_", NULL, 0x4, "Z" },
    { "sortCategoriesOnLinkedData_", NULL, 0x4, "Z" },
    { "pageIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "noteIcon_", NULL, 0x4, "LRAREiPlatformIcon" },
    { "seeReport_", NULL, 0x0, "LNSString" },
    { "unknowResultColor_", NULL, 0x0, "LRAREUIColor" },
    { "collectionInfoKey_", NULL, 0x0, "LNSString" },
    { "collectionInfoMap_", NULL, 0x0, "LJavaUtilHashMap" },
    { "showUnits_", NULL, 0x0, "Z" },
    { "temp_", NULL, 0x0, "LJavaLangStringBuilder" },
  };
  static J2ObjcClassInfo _CCPBVLabs = { "Labs", "com.sparseware.bellavista", NULL, 0x1, 18, methods, 28, fields, 0, NULL};
  return &_CCPBVLabs;
}

@end
@implementation CCPBVLabs_LabDocument

- (id)initWithRAREiWidget:(id<RAREiWidget>)widget
       withRAREActionLink:(RAREActionLink *)link
             withNSString:(NSString *)id_ {
  return [super initWithRAREiWidget:widget withRAREActionLink:link withNSString:id_];
}

- (CCPBVDocument_DocumentItem *)addAttachmentWithCCPBVDocument_DocumentItemTypeEnum:(CCPBVDocument_DocumentItemTypeEnum *)type
                                                                   withJavaUtilDate:(JavaUtilDate *)date
                                                                       withNSString:(NSString *)title
                                                                       withNSString:(NSString *)mimeType
                                                                       withNSString:(NSString *)body
                                                                       withNSString:(NSString *)href {
  CCPBVDocument_DocumentItem *di = [super addAttachmentWithCCPBVDocument_DocumentItemTypeEnum:type withJavaUtilDate:date withNSString:title withNSString:mimeType withNSString:body withNSString:href];
  if ([@"susceptibilities" equalsIgnoreCase:((CCPBVDocument_DocumentItem *) nil_chk(di))->customItemType_]) {
    susceptibilities_ = di;
    [((id<JavaUtilList>) nil_chk(docAttachments_)) removeWithId:di];
  }
  else if ([@"stains" equalsIgnoreCase:di->customItemType_]) {
    stains_ = di;
    [((id<JavaUtilList>) nil_chk(docAttachments_)) removeWithId:di];
  }
  return di;
}

- (CCPBVDocument_DocumentItem *)processDocumentRowWithCCPBVDocument_DocumentItem:(CCPBVDocument_DocumentItem *)doc
                                                      withRARERenderableDataItem:(RARERenderableDataItem *)row {
  CCPBVDocument_DocumentItem *di = [super processDocumentRowWithCCPBVDocument_DocumentItem:doc withRARERenderableDataItem:row];
  if (di != nil) {
    if ([@"susceptibilities" equalsIgnoreCase:di->customItemType_]) {
      susceptibilities_ = di;
      return nil;
    }
    else if ([@"stains" equalsIgnoreCase:di->customItemType_]) {
      stains_ = di;
      return nil;
    }
  }
  return di;
}

- (void)copyAllFieldsTo:(CCPBVLabs_LabDocument *)other {
  [super copyAllFieldsTo:other];
  other->stains_ = stains_;
  other->susceptibilities_ = susceptibilities_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "addAttachmentWithCCPBVDocument_DocumentItemTypeEnum:withJavaUtilDate:withNSString:withNSString:withNSString:withNSString:", NULL, "LCCPBVDocument_DocumentItem", 0x1, NULL },
    { "processDocumentRowWithCCPBVDocument_DocumentItem:withRARERenderableDataItem:", NULL, "LCCPBVDocument_DocumentItem", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "susceptibilities_", NULL, 0x0, "LCCPBVDocument_DocumentItem" },
    { "stains_", NULL, 0x0, "LCCPBVDocument_DocumentItem" },
  };
  static J2ObjcClassInfo _CCPBVLabs_LabDocument = { "LabDocument", "com.sparseware.bellavista", "Labs", 0x8, 2, methods, 2, fields, 0, NULL};
  return &_CCPBVLabs_LabDocument;
}

@end
@implementation CCPBVLabs_ChartHandler

- (id)initWithCCPBVLabs:(CCPBVLabs *)outer$
   withRAREUTJSONObject:(RAREUTJSONObject *)chartsInfo {
  return [super initWithNSString:@"Labs" withRAREUTJSONObject:chartsInfo withInt:[CCPBVaResultsManager NAME_POSITION] withInt:[CCPBVaResultsManager DATE_POSITION] withInt:[CCPBVaResultsManager VALUE_POSITION]];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcClassInfo _CCPBVLabs_ChartHandler = { "ChartHandler", "com.sparseware.bellavista", "Labs", 0x0, 0, NULL, 0, NULL, 0, NULL};
  return &_CCPBVLabs_ChartHandler;
}

@end
@implementation CCPBVLabs_$1

- (BOOL)passesWithId:(id)value
withRAREUTiStringConverter:(id<RAREUTiStringConverter>)converter {
  RARERenderableDataItem *row = (RARERenderableDataItem *) check_class_cast(value, [RARERenderableDataItem class]);
  BOOL pass;
  NSString *key = nil;
  if (this$0_->currentView_ == [CCPBVResultsViewEnum SPREADSHEET]) {
    pass = [((NSString *) nil_chk(val$cat_)) isEqual:[((RARERenderableDataItem *) nil_chk(row)) getLinkedData]];
    if (pass) {
      key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:0])) getLinkedData], [NSString class]);
    }
  }
  else {
    RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(row)) getItemExWithInt:[CCPBVLabs CATEGORY_NAME_POSITION]];
    pass = (item == nil) ? NO : [item valueEqualsWithId:val$cat_];
    if (pass) {
      key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager NAME_POSITION]])) getLinkedData], [NSString class]);
    }
  }
  if (pass && (val$fkeys_ != nil)) {
    if ((key != nil) && [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(this$0_->chartableItemsManager_)) isChartableWithNSString:key]) {
      [val$fkeys_ addWithId:key];
    }
  }
  return pass;
}

- (id)initWithCCPBVLabs:(CCPBVLabs *)outer$
           withNSString:(NSString *)capture$0
       withJavaUtilList:(id<JavaUtilList>)capture$1 {
  this$0_ = outer$;
  val$cat_ = capture$0;
  val$fkeys_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "passesWithId:withRAREUTiStringConverter:", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVLabs" },
    { "val$cat_", NULL, 0x1012, "LNSString" },
    { "val$fkeys_", NULL, 0x1012, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVLabs_$1 = { "$1", "com.sparseware.bellavista", "Labs", 0x8000, 1, methods, 3, fields, 0, NULL};
  return &_CCPBVLabs_$1;
}

@end
@implementation CCPBVLabs_$2

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  [((RAREWindowViewer *) nil_chk(val$win_)) hideWaitCursor];
  if ([returnValue isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(returnValue, [JavaLangThrowable class])];
    return;
  }
  if (canceled || [((RARETableViewer *) nil_chk(val$table_)) isDisposed]) {
    return;
  }
  id<RAREiContainer> v = (id<RAREiContainer>) check_protocol_cast([val$win_ createViewerWithRAREiWidget:[((RARETableViewer *) nil_chk(val$table_)) getFormViewer] withRARESPOTWidget:(RARESPOTWidget *) check_class_cast(returnValue, [RARESPOTWidget class])], @protocol(RAREiContainer));
  id<RAREiWidget> w = [((id<RAREiContainer>) nil_chk(v)) getWidgetWithNSString:@"accessionNumber"];
  if (w != nil) {
    [w setValueWithId:[((RAREUTJSONObject *) nil_chk(val$json_)) optStringWithNSString:@"accessionNumber"]];
  }
  w = [v getWidgetWithNSString:@"comment"];
  if (w != nil) {
    [w setValueWithId:[((RAREUTJSONObject *) nil_chk(val$json_)) optStringWithNSString:@"comment"]];
  }
  w = [v getWidgetWithNSString:@"requestor"];
  if (w != nil) {
    [w setValueWithId:[((RAREUTJSONObject *) nil_chk(val$json_)) optStringWithNSString:@"requestor"]];
  }
  w = [v getWidgetWithNSString:@"collectionDate"];
  if (w != nil) {
    [w setValueWithId:[((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(val$row_)) getWithInt:[CCPBVaResultsManager NAME_POSITION]])) getValue]];
  }
  w = [v getWidgetWithNSString:@"specimen"];
  if (w != nil) {
    [w setValueWithId:[((RAREUTJSONObject *) nil_chk(val$json_)) optStringWithNSString:@"specimen"]];
  }
  if ([RAREUIScreen isLargeScreen]) {
    RARESplitPaneViewer *sp = (RARESplitPaneViewer *) check_class_cast([val$table_ getFormViewer], [RARESplitPaneViewer class]);
    [val$win_ activateViewerWithRAREiViewer:v withNSString:[((id<RAREiTarget>) nil_chk([((RARESplitPaneViewer *) nil_chk(sp)) getRegionWithInt:1])) getName]];
  }
  else {
    [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:v];
  }
}

- (id)initWithRAREWindowViewer:(RAREWindowViewer *)capture$0
           withRARETableViewer:(RARETableViewer *)capture$1
          withRAREUTJSONObject:(RAREUTJSONObject *)capture$2
    withRARERenderableDataItem:(RARERenderableDataItem *)capture$3 {
  val$win_ = capture$0;
  val$table_ = capture$1;
  val$json_ = capture$2;
  val$row_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$win_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$json_", NULL, 0x1012, "LRAREUTJSONObject" },
    { "val$row_", NULL, 0x1012, "LRARERenderableDataItem" },
  };
  static J2ObjcClassInfo _CCPBVLabs_$2 = { "$2", "com.sparseware.bellavista", "Labs", 0x8000, 0, NULL, 4, fields, 0, NULL};
  return &_CCPBVLabs_$2;
}

@end
@implementation CCPBVLabs_$3

- (id)compute {
  @try {
    [this$0_ processDataWithRARETableViewer:val$table_ withJavaUtilList:val$rows_];
    return nil;
  }
  @catch (JavaLangException *e) {
    return e;
  }
}

- (void)finishWithId:(id)result {
  CCPBVActionPath *path = [CCPBVUtils getActionPathWithBoolean:YES];
  [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) hideWaitCursor];
  if ([result isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(result, [JavaLangThrowable class])];
  }
  else {
    if (this$0_->overViewLoaded_ && (this$0_->trendPanels_ != nil)) {
      id<RAREiContainer> c = (id<RAREiContainer>) check_protocol_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"labsOverview"], @protocol(RAREiContainer));
      if (c != nil) {
        RARETableViewer *ttable = (RARETableViewer *) check_class_cast([c getWidgetWithNSString:@"trendsTable"], [RARETableViewer class]);
        {
          IOSObjectArray *a__ = this$0_->trendPanels_;
          id const *b__ = a__->buffer_;
          id const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            CCPBVTrendPanel *p = (*b__++);
            [((CCPBVTrendPanel *) nil_chk(p)) popuplateTableWithRARETableViewer:ttable withJavaUtilMap:this$0_->trendsLayout_];
          }
        }
        [((RARETableViewer *) nil_chk(ttable)) refreshItems];
      }
    }
    else {
      NSString *key = (path == nil) ? nil : [path shift];
      if (key != nil) {
        [this$0_ handlePathKeyWithRARETableViewer:val$table_ withNSString:key withInt:1 withBoolean:YES];
      }
    }
  }
}

- (id)initWithCCPBVLabs:(CCPBVLabs *)outer$
    withRARETableViewer:(RARETableViewer *)capture$0
       withJavaUtilList:(id<JavaUtilList>)capture$1 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$rows_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compute", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVLabs" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$rows_", NULL, 0x1012, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVLabs_$3 = { "$3", "com.sparseware.bellavista", "Labs", 0x8000, 1, methods, 3, fields, 0, NULL};
  return &_CCPBVLabs_$3;
}

@end
@implementation CCPBVLabs_$4

- (void)run {
  if (val$label_ != nil) {
    if (![val$label_ isDisposed]) {
      [val$label_ setValueWithId:val$value_];
    }
  }
}

- (id)initWithRAREiWidget:(id<RAREiWidget>)capture$0
             withNSString:(NSString *)capture$1 {
  val$label_ = capture$0;
  val$value_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$label_", NULL, 0x1012, "LRAREiWidget" },
    { "val$value_", NULL, 0x1012, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVLabs_$4 = { "$4", "com.sparseware.bellavista", "Labs", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVLabs_$4;
}

@end
