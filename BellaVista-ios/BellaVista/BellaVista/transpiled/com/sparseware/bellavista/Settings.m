//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Settings.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSClass.h"
#include "IOSIntArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/aWorkerTask.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/iPlatformItemRenderer.h"
#include "com/appnativa/rare/viewer/CheckBoxListViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/TextFieldWidget.h"
#include "com/appnativa/rare/widget/aListWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/ObjectHolder.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iCancelable.h"
#include "com/appnativa/util/iPreferences.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/CardStack.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/external/aProtocolHandler.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Package.h"
#include "java/lang/Throwable.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/prefs/BackingStoreException.h"

@implementation CCPBVSettings

static id<JavaUtilList> CCPBVSettings_defaultServers_;

+ (id<JavaUtilList>)defaultServers {
  return CCPBVSettings_defaultServers_;
}

+ (void)setDefaultServers:(id<JavaUtilList>)defaultServers {
  CCPBVSettings_defaultServers_ = defaultServers;
}

- (id)init {
  if (self = [super init]) {
    (void) [CCPBVUtils setSettingsHandler:self];
    preferences_ = [[CCPBVSettings_AppPreferences alloc] init];
  }
  return self;
}

- (CCPBVSettings_AppPreferences *)getAppPreferencesWithNSString:(NSString *)user {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) setUserWithNSString:user];
  return preferences_;
}

- (CCPBVSettings_Server *)getDefaultServer {
  id<JavaUtilList> list = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  if ((list != nil) && ![list isEmpty]) {
    return [list getWithInt:0];
  }
  CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.local_demo"] withNSString:@"local" withBoolean:YES];
  (void) [s putWithNSString:@"restricted" withBoolean:NO];
  return s;
}

- (NSString *)getLastLoggedinUser {
  return [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getLastLoggedinUser];
}

- (void)onActionLoginComboBoxWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self updateLoginFormForSelectedServerWithRAREaListWidget:(RAREaListWidget *) check_class_cast(widget, [RAREaListWidget class])];
}

- (void)onBackButtonWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((id<RAREiWidget>) nil_chk(widget)) getFormViewer], [RAREStackPaneViewer class]);
  [((RAREStackPaneViewer *) nil_chk(sp)) switchToWithInt:0];
}

- (void)onCheckBoxActionWithNSString:(NSString *)eventName
                     withRAREiWidget:(id<RAREiWidget>)widget
             withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) putBooleanWithNSString:[((id<RAREiWidget>) nil_chk(widget)) getName] withBoolean:[widget isSelected]];
}

- (void)onConfigureBasicSettingsWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast(widget, @protocol(RAREiContainer));
  for (id<RAREiWidget> __strong w in nil_chk([((id<RAREiContainer>) nil_chk(fv)) getWidgetList])) {
    switch ([[((id<RAREiWidget>) nil_chk(w)) getWidgetType] ordinal]) {
      case RAREiWidget_WidgetType_CheckBox:
      [w setSelectedWithBoolean:[((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getBooleanWithNSString:[w getName] withBoolean:NO]];
      break;
      default:
      break;
    }
  }
  serversUpdated_ = NO;
}

- (void)onConfigureLoginComboBoxWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListWidget *lw = (RAREaListWidget *) check_class_cast(widget, [RAREaListWidget class]);
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if (CCPBVSettings_defaultServers_ == nil) {
    if ([((NSString *) nil_chk([((JavaNetURL *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getContextURL])) getProtocol])) isEqual:@"file"]) {
      [self loadDefaultServers];
    }
    else {
      RAREaWorkerTask *task = [[CCPBVSettings_$1 alloc] initWithCCPBVSettings:self withRAREWindowViewer:w withRAREaListWidget:lw];
      (void) [((RAREWindowViewer *) nil_chk(w)) spawnWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      [w showWaitCursor];
      return;
    }
  }
  [self populateLoginServersWidgetWithRAREaListWidget:lw];
}

- (void)onConfigureServersWithNSString:(NSString *)eventName
                       withRAREiWidget:(id<RAREiWidget>)widget
               withJavaUtilEventObject:(JavaUtilEventObject *)event {
  servers_ = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  [self populateServersWithRAREaListViewer:(RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class])];
}

- (void)onEventWithNSString:(NSString *)eventName
            withRAREiWidget:(id<RAREiWidget>)widget
    withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)onFinishedLoadingListWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class]);
  int len = [((RAREaListViewer *) nil_chk(lv)) size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [lv getWithInt:i];
    id o = [((RARERenderableDataItem *) nil_chk(item)) getValue];
    if ([o isKindOfClass:[NSString class]]) {
      [item setValueWithId:[RAREPlatform getResourceAsStringWithNSString:(NSString *) check_class_cast(o, [NSString class])]];
    }
  }
}

- (void)onNetworkServersAddActionWithNSString:(NSString *)eventName
                              withRAREiWidget:(id<RAREiWidget>)widget
                      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  @try {
    (void) [((RAREWindowViewer *) nil_chk(w)) createViewerWithNSString:@"/network_servers.rml" withRAREiFunctionCallback:[[CCPBVSettings_$2 alloc] initWithCCPBVSettings:self withRAREWindowViewer:w withRAREaListViewer:lv]];
    [w showWaitCursor];
  }
  @catch (JavaNetMalformedURLException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)onNetworkServersDownloadWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RARETextFieldWidget *tf = (RARETextFieldWidget *) check_class_cast([fv getWidgetWithNSString:@"url"], [RARETextFieldWidget class]);
  NSString *url = [((RARETextFieldWidget *) nil_chk(tf)) getValueAsString];
  if (url != nil) {
    url = [url trim];
  }
  if ((url == nil) || ([url sequenceLength] == 0)) {
    url = (NSString *) check_class_cast([tf getAttributeWithNSString:@"default_network_servers_url"], [NSString class]);
  }
  if ((url == nil) || ([url sequenceLength] == 0)) {
    return;
  }
  @try {
    (void) [((RAREWindowViewer *) nil_chk(w)) getContentAsJSONWithId:url withRAREiFunctionCallback:[[CCPBVSettings_$3 alloc] initWithRAREWindowViewer:w withRAREaListViewer:lv]];
    [w showWaitCursor];
  }
  @catch (JavaNetMalformedURLException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)onOtherOptionsActionWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  int n = [((RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class])) getSelectedIndex];
  if (n != -1) {
    [((RAREStackPaneViewer *) check_class_cast([((id<RAREiWidget>) nil_chk(widget)) getFormViewer], [RAREStackPaneViewer class])) switchToWithInt:n + 1];
  }
}

- (void)onPinFocusedWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"message"])) setValueWithId:@""];
}

- (void)onServersAddActionWithNSString:(NSString *)eventName
                       withRAREiWidget:(id<RAREiWidget>)widget
               withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:@"" withNSString:@"" withBoolean:NO];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  [((RAREaListViewer *) nil_chk(lv)) addWithId:[[RARERenderableDataItem alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.settings.new_server"] withId:s withRAREiPlatformIcon:nil]];
  [((id<JavaUtilList>) nil_chk(servers_)) addWithId:s];
  [lv setSelectedIndexWithInt:[lv size] - 1];
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVSettings_$4 alloc] initWithRAREiFormViewer:fv]];
}

- (void)onServersChangeWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class]);
  CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([lv getSelectionData], [CCPBVSettings_Server class]);
  RARETextFieldWidget *name = (RARETextFieldWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"name"], [RARETextFieldWidget class]);
  RARETextFieldWidget *url = (RARETextFieldWidget *) check_class_cast([fv getWidgetWithNSString:@"url"], [RARETextFieldWidget class]);
  id<RAREiWidget> context = [fv getWidgetWithNSString:@"context"];
  [((RARETextFieldWidget *) nil_chk(name)) setValueWithId:(s == nil) ? @"" : [s getName]];
  [((RARETextFieldWidget *) nil_chk(url)) setValueWithId:(s == nil) ? @"" : [s getURL]];
  [url setCaretPositionWithInt:0];
  [name setCaretPositionWithInt:0];
  [((id<RAREiWidget>) nil_chk(context)) setSelectedWithBoolean:(s == nil) ? NO : [s isContextServer]];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"update"])) setEnabledWithBoolean:(s != nil) && ![s isFrozen]];
  [name setEnabledWithBoolean:(s != nil) && ![s isFrozen]];
  [url setEnabledWithBoolean:(s != nil) && ![s isFrozen]];
  [context setEnabledWithBoolean:(s != nil) && ![s isFrozen]];
}

- (void)onServersDeleteActionWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RAREaListViewer *) nil_chk(lv)) getSelectionData], [CCPBVSettings_Server class]);
  if (s != nil) {
    int n = [lv getSelectedIndex];
    (void) [lv removeWithInt:n];
    if ([lv size] >= n) {
      n--;
    }
    if (n > -1) {
      [lv setSelectedIndexWithInt:n];
    }
  }
  [((id<JavaUtilList>) nil_chk(servers_)) removeWithId:s];
}

- (void)onServersUnloadWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiContainer>) check_protocol_cast(widget, @protocol(RAREiContainer))) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  if (lv != nil) {
    [((id<JavaUtilList>) nil_chk(servers_)) clear];
    int len = [lv size];
    for (int i = 0; i < len; i++) {
      [servers_ addWithId:(CCPBVSettings_Server *) check_class_cast([((RARERenderableDataItem *) nil_chk([lv getWithInt:i])) getLinkedData], [CCPBVSettings_Server class])];
    }
  }
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) setServersWithJavaUtilList:servers_];
  [preferences_ update];
}

- (void)onServersUpdateActionWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  int n = [((RAREaListViewer *) nil_chk(lv)) getSelectedIndex];
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if (n != -1) {
    NSString *url = [((NSString *) nil_chk([((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"url"])) getValueAsString])) trim];
    int p = [((NSString *) nil_chk(url)) indexOf:':'];
    NSString *protocol = (p == -1) ? nil : [url substring:0 endIndex:p];
    if ((protocol != nil) && ![CCPBVUtils isServerProtocolSupportedWithNSString:protocol]) {
      [w alertWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.settings.protocol_not_supported"]];
      return;
    }
    RARERenderableDataItem *item = [lv getSelectedItem];
    CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getLinkedData], [CCPBVSettings_Server class]);
    [((CCPBVSettings_Server *) nil_chk(s)) setNameWithNSString:[((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"name"])) getValueAsString]];
    [s setUrlWithNSString:url];
    s->serverType_ = [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"context"])) isSelected] ? CCPBVSettings_Server_TYPE_CONTEXT : 0;
    if ([((NSString *) nil_chk([s getName])) sequenceLength] == 0) {
      [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) beep];
    }
    else {
      CCPBVaProtocolHandler *h = [CCPBVUtils getProtocolHandlerWithNSString:protocol];
      [item setValueWithId:[s getName]];
      [lv rowChangedWithInt:n];
      if (h != nil) {
        [h serverConfigurationUpdatedWithCCPBVSettings_Server:s];
      }
    }
  }
}

- (void)onShownLoginFormWithNSString:(NSString *)eventName
                     withRAREiWidget:(id<RAREiWidget>)widget
             withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self updateLoginFormForSelectedServerWithRAREaListWidget:(RAREaListWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"server"], [RAREaListWidget class])];
}

- (void)onSubmitPinWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
  @try {
    NSString *pin = [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"pin"])) getValueAsString];
    if (pin == nil) {
      pin = @"";
    }
    RAREWindowViewer *w = [RAREPlatform getWindowViewer];
    id<RAREiWidget> l = [((id<RAREiFormViewer>) nil_chk([widget getFormViewer])) getWidgetWithNSString:@"message"];
    if (([((NSString *) nil_chk(pin)) sequenceLength] < [CCPBVCardStack getPinDigitCount]) || ![RAREUTSNumber isNumericWithNSString:pin]) {
      NSString *s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.invalid_pin" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:[CCPBVCardStack getPinDigitCount]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      [((id<RAREiWidget>) nil_chk(l)) setValueWithId:s];
      [w beep];
    }
    else {
      [((id<RAREiWidget>) nil_chk(l)) setValueWithId:@""];
      if ([CCPBVUtils isDemo]) {
        [l setValueWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.settings.pin_submitted"]];
      }
      else {
        RAREActionLink *link = [CCPBVUtils createLinkWithRAREiWidget:w withNSString:@"/hub/account/allow_pin"];
        JavaUtilHashMap *data = [[JavaUtilHashMap alloc] initWithInt:2];
        (void) [data putWithId:@"pin" withId:pin];
        RAREaWorkerTask *task = [[CCPBVSettings_$5 alloc] initWithRAREActionLink:link withRAREWindowViewer:w withJavaUtilHashMap:data withRAREiWidget:l];
        (void) [((RAREWindowViewer *) nil_chk(w)) spawnWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        [w showWaitCursor];
      }
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)saveLastLoggedinUserWithNSString:(NSString *)username {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) saveLastLoggedinUserWithNSString:username];
}

- (void)loadDefaultServers {
  if (CCPBVSettings_defaultServers_ == nil) {
    @try {
      RAREActionLink *l = [[RAREActionLink alloc] initWithNSString:@"/data/servers.json"];
      RAREUTJSONObject *o = [[RAREUTJSONObject alloc] initWithNSString:[l getContentAsString]];
      RAREUTJSONArray *a = [o getJSONArrayWithNSString:@"servers"];
      for (id __strong s in nil_chk(a)) {
        CCPBVSettings_Server *server = [[CCPBVSettings_Server alloc] initWithRAREUTJSONObject:(RAREUTJSONObject *) check_class_cast(s, [RAREUTJSONObject class])];
        if (CCPBVSettings_defaultServers_ == nil) {
          CCPBVSettings_defaultServers_ = [[JavaUtilArrayList alloc] initWithInt:3];
        }
        [((id<JavaUtilList>) nil_chk(CCPBVSettings_defaultServers_)) addWithId:server];
      }
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithJavaLangThrowable:e];
    }
  }
  if (CCPBVSettings_defaultServers_ == nil) {
    CCPBVSettings_defaultServers_ = [[JavaUtilArrayList alloc] initWithInt:1];
    [CCPBVSettings_defaultServers_ addWithId:[self getDefaultServer]];
  }
}

- (JavaUtilHashSet *)getServersSet {
  servers_ = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  JavaUtilHashSet *set = [[JavaUtilHashSet alloc] init];
  for (CCPBVSettings_Server * __strong s in nil_chk(servers_)) {
    if ([((CCPBVSettings_Server *) nil_chk(s)) isValid]) {
      [set addWithId:[s toHashKey]];
    }
  }
  return set;
}

- (void)populateLoginServersWidgetWithRAREaListWidget:(RAREaListWidget *)lw {
  servers_ = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  JavaUtilHashSet *set = [[JavaUtilHashSet alloc] init];
  for (CCPBVSettings_Server * __strong s in nil_chk(servers_)) {
    if ([((CCPBVSettings_Server *) nil_chk(s)) isValid]) {
      [((RAREaListWidget *) nil_chk(lw)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:[s getName] withId:s withRAREiPlatformIcon:nil]];
      [set addWithId:[s toHashKey]];
    }
  }
  if ([set isEmpty]) {
    for (CCPBVSettings_Server * __strong s in nil_chk(CCPBVSettings_defaultServers_)) {
      if ([((CCPBVSettings_Server *) nil_chk(s)) isValid] && ![set containsWithId:[s toHashKey]]) {
        [((RAREaListWidget *) nil_chk(lw)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:[s getName] withId:s withRAREiPlatformIcon:nil]];
      }
    }
  }
  else {
    CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.local_demo"] withNSString:@"local" withBoolean:YES];
    (void) [s putWithNSString:@"restricted" withBoolean:NO];
    if (![set containsWithId:[s toHashKey]]) {
      [((RAREaListWidget *) nil_chk(lw)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:[s getName] withId:s withRAREiPlatformIcon:nil]];
    }
  }
  [((RAREaListWidget *) nil_chk(lw)) refreshItems];
  [lw setSelectedIndexWithInt:0];
}

- (void)populateServersWithRAREaListViewer:(RAREaListViewer *)lv {
  for (CCPBVSettings_Server * __strong s in nil_chk(servers_)) {
    [((RAREaListViewer *) nil_chk(lv)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:[((CCPBVSettings_Server *) nil_chk(s)) getName] withId:s withRAREiPlatformIcon:nil]];
  }
  [((RAREaListViewer *) nil_chk(lv)) refreshItems];
}

- (void)showNetworkServersViewerWithRAREiContainer:(id<RAREiContainer>)v
                               withRAREaListViewer:(RAREaListViewer *)lv {
  NSString *url = [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) getStringWithNSString:@"network_servers_url" withNSString:nil];
  RARETextFieldWidget *tf = (RARETextFieldWidget *) check_class_cast([((id<RAREiContainer>) nil_chk(v)) getWidgetWithNSString:@"url"], [RARETextFieldWidget class]);
  RARECheckBoxListViewer *lb = (RARECheckBoxListViewer *) check_class_cast([v getWidgetWithNSString:@"servers"], [RARECheckBoxListViewer class]);
  [((id<RAREiPlatformItemRenderer>) nil_chk([((RARECheckBoxListViewer *) nil_chk(lb)) getItemRenderer])) setSelectionPaintedWithBoolean:NO];
  [tf setAttributeWithNSString:@"default_network_servers_url" withId:[((RARETextFieldWidget *) nil_chk(tf)) getValueAsString]];
  if ((url != nil) && ([url sequenceLength] > 0)) {
    [tf setValueWithId:url];
  }
  id<RAREiFunctionCallback> cb = [[CCPBVSettings_$6 alloc] initWithCCPBVSettings:self withRARECheckBoxListViewer:lb withRAREaListViewer:lv withRARETextFieldWidget:tf withRAREiContainer:v];
  [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) okCancelWithId:v withRAREiFunctionCallback:cb];
}

- (void)updateLoginFormForSelectedServerWithRAREaListWidget:(RAREaListWidget *)widget {
  CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RAREaListWidget *) nil_chk(widget)) getSelectionData], [CCPBVSettings_Server class]);
  if (s != nil) {
    id<RAREiFormViewer> fv = [widget getFormViewer];
    BOOL restricted = [s isRestricted];
    [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"usernameLabel"])) setEnabledWithBoolean:restricted];
    [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"username"])) setEnabledWithBoolean:restricted];
    [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"passwordLabel"])) setEnabledWithBoolean:restricted];
    [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"password"])) setEnabledWithBoolean:restricted];
    if (restricted) {
      if (![RAREPlatform isTouchDevice]) {
        [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"username"])) requestFocus];
      }
    }
    else {
      RAREPushButtonWidget *pb = (RAREPushButtonWidget *) check_class_cast([fv getWidgetWithNSString:@"signin"], [RAREPushButtonWidget class]);
      if ([s hasCustomLogin]) {
        NSString *text = [s optStringWithNSString:@"button_text" withNSString:nil];
        if (text == nil) {
          text = [RAREPlatform getResourceAsStringWithNSString:@"bv.text.continue"];
        }
        else {
          text = [((RAREPushButtonWidget *) nil_chk(pb)) expandStringWithNSString:text];
        }
        [((RAREPushButtonWidget *) nil_chk(pb)) setTextWithJavaLangCharSequence:text];
      }
      else {
        [((RAREPushButtonWidget *) nil_chk(pb)) setTextWithJavaLangCharSequence:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.sign_in"]];
      }
      [((RAREPushButtonWidget *) nil_chk(pb)) requestFocus];
    }
  }
}

- (void)copyAllFieldsTo:(CCPBVSettings *)other {
  [super copyAllFieldsTo:other];
  other->preferences_ = preferences_;
  other->servers_ = servers_;
  other->serversUpdated_ = serversUpdated_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAppPreferencesWithNSString:", NULL, "LCCPBVSettings_AppPreferences", 0x1, NULL },
    { "getDefaultServer", NULL, "LCCPBVSettings_Server", 0x1, NULL },
    { "getLastLoggedinUser", NULL, "LNSString", 0x1, NULL },
    { "loadDefaultServers", NULL, "V", 0x4, NULL },
    { "getServersSet", NULL, "LJavaUtilHashSet", 0x4, NULL },
    { "populateLoginServersWidgetWithRAREaListWidget:", NULL, "V", 0x4, NULL },
    { "populateServersWithRAREaListViewer:", NULL, "V", 0x4, NULL },
    { "showNetworkServersViewerWithRAREiContainer:withRAREaListViewer:", NULL, "V", 0x4, NULL },
    { "updateLoginFormForSelectedServerWithRAREaListWidget:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "defaultServers_", NULL, 0x8, "LJavaUtilList" },
    { "preferences_", NULL, 0x0, "LCCPBVSettings_AppPreferences" },
    { "servers_", NULL, 0x0, "LJavaUtilList" },
    { "serversUpdated_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _CCPBVSettings = { "Settings", "com.sparseware.bellavista", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_CCPBVSettings;
}

@end
@implementation CCPBVSettings_AppPreferences

- (id)init {
  if (self = [super init]) {
    settings_ = [[JavaUtilHashMap alloc] init];
    NSString *path = [((JavaLangPackage *) nil_chk([[IOSClass classWithClass:[CCPBVSettings class]] getPackage])) getName];
    path = [((NSString *) nil_chk(path)) replace:'.' withChar:'/'];
    globalPrefs_ = [RAREFunctions getPreferencesWithNSString:path];
  }
  return self;
}

- (void)dispose {
  if (edited_) {
    [self update];
  }
  globalPrefs_ = nil;
  prefs_ = nil;
}

- (BOOL)getBooleanWithNSString:(NSString *)key
                   withBoolean:(BOOL)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getBooleanWithNSString:key withBoolean:def];
}

- (int)getIntWithNSString:(NSString *)key
                  withInt:(int)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getIntWithNSString:key withInt:def];
}

- (NSString *)getLastLoggedinUser {
  @try {
    return [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getWithNSString:@"username" withNSString:nil];
  }
  @catch (JavaLangThrowable *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    return nil;
  }
}

- (NSString *)getPasswordWithNSString:(NSString *)key
                         withNSString:(NSString *)def {
  NSString *value = [((id<RAREUTiPreferences>) nil_chk(prefs_)) getWithNSString:key withNSString:nil];
  if (value != nil) {
    value = [RAREFunctions decodeBase64WithNSString:value];
  }
  return (value == nil) ? def : value;
}

- (id<JavaUtilList>)getServers {
  if (servers_ == nil) {
    JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:5];
    servers_ = list;
    @try {
      id<RAREUTiPreferences> p = [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getNodeWithNSString:@"servers"];
      int len = [((id<RAREUTiPreferences>) nil_chk(p)) getIntWithNSString:@"length" withInt:0];
      for (int i = 0; i < len; i++) {
        NSString *s = [p getWithNSString:[NSString stringWithFormat:@"s_%d", i] withNSString:nil];
        if ((s != nil) && ([s sequenceLength] > 0)) {
          @try {
            s = [RAREFunctions decodeBase64WithNSString:s];
            CCPBVSettings_Server *server = [[CCPBVSettings_Server alloc] initWithRAREUTJSONObject:[[RAREUTJSONObject alloc] initWithNSString:s]];
            if ([server isValid]) {
              [list addWithId:server];
            }
          }
          @catch (JavaLangException *e) {
            [RAREPlatform ignoreExceptionWithJavaLangThrowable:e];
          }
        }
      }
    }
    @catch (JavaLangException *e) {
      [RAREPlatform ignoreExceptionWithJavaLangThrowable:e];
    }
  }
  return servers_;
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getWithNSString:key withNSString:def];
}

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(BOOL)value {
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putBooleanWithNSString:key withBoolean:value];
  edited_ = YES;
}

- (void)putIntWithNSString:(NSString *)key
                   withInt:(int)value {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putIntWithNSString:key withInt:value];
}

- (void)putPasswordWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  value = [RAREFunctions base64WithNSString:value];
  [self putStringWithNSString:key withNSString:value];
}

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putWithNSString:key withNSString:value];
}

- (void)removeValueWithNSString:(NSString *)key {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) removeWithNSString:key];
}

- (void)saveLastLoggedinUserWithNSString:(NSString *)username {
  @try {
    [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) putWithNSString:@"username" withNSString:username];
  }
  @catch (JavaLangThrowable *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)setServersWithJavaUtilList:(id<JavaUtilList>)list {
  servers_ = list;
  id<RAREUTiPreferences> p = [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getNodeWithNSString:@"servers"];
  @try {
    [((id<RAREUTiPreferences>) nil_chk(p)) clear];
  }
  @catch (JavaUtilPrefsBackingStoreException *e) {
    [RAREPlatform ignoreExceptionWithJavaLangThrowable:e];
  }
  int len = (list == nil) ? 0 : [list size];
  [((id<RAREUTiPreferences>) nil_chk(p)) putIntWithNSString:@"length" withInt:len];
  int count = 0;
  for (int i = 0; i < len; i++) {
    CCPBVSettings_Server *s = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
    if ([((CCPBVSettings_Server *) nil_chk(s)) isValid]) {
      [p putWithNSString:[NSString stringWithFormat:@"s_%d", count] withNSString:[RAREFunctions base64WithNSString:[s description]]];
      count++;
    }
  }
  [p putIntWithNSString:@"length" withInt:count];
  for (int i = len - 1; i > -1; i--) {
    if (![((CCPBVSettings_Server *) nil_chk([((id<JavaUtilList>) nil_chk(list)) getWithInt:i])) isValid]) {
      (void) [list removeWithInt:i];
    }
  }
  edited_ = YES;
}

- (void)setUserWithNSString:(NSString *)user {
  self->user_ = user;
  prefs_ = [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getNodeWithNSString:user];
}

- (void)update {
  @try {
    if (globalPrefs_ != nil) {
      [globalPrefs_ flush];
      [globalPrefs_ sync];
    }
    if (prefs_ != nil) {
      [prefs_ flush];
      [prefs_ sync];
    }
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(CCPBVSettings_AppPreferences *)other {
  [super copyAllFieldsTo:other];
  other->edited_ = edited_;
  other->globalPrefs_ = globalPrefs_;
  other->prefs_ = prefs_;
  other->servers_ = servers_;
  other->settings_ = settings_;
  other->user_ = user_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBooleanWithNSString:withBoolean:", NULL, "Z", 0x1, NULL },
    { "getLastLoggedinUser", NULL, "LNSString", 0x1, NULL },
    { "getPasswordWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "getServers", NULL, "LJavaUtilList", 0x1, NULL },
    { "getStringWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "edited_", NULL, 0x0, "Z" },
    { "prefs_", NULL, 0x0, "LRAREUTiPreferences" },
    { "globalPrefs_", NULL, 0x0, "LRAREUTiPreferences" },
    { "user_", NULL, 0x0, "LNSString" },
    { "servers_", NULL, 0x0, "LJavaUtilList" },
    { "settings_", NULL, 0x0, "LJavaUtilHashMap" },
  };
  static J2ObjcClassInfo _CCPBVSettings_AppPreferences = { "AppPreferences", "com.sparseware.bellavista", "Settings", 0x9, 5, methods, 6, fields, 0, NULL};
  return &_CCPBVSettings_AppPreferences;
}

@end
@implementation CCPBVSettings_Server

+ (int)TYPE_CONTEXT {
  return CCPBVSettings_Server_TYPE_CONTEXT;
}

+ (int)TYPE_DEMO {
  return CCPBVSettings_Server_TYPE_DEMO;
}

+ (int)TYPE_OTHER {
  return CCPBVSettings_Server_TYPE_OTHER;
}

- (id)initWithRAREUTJSONObject:(RAREUTJSONObject *)o {
  if (self = [super initWithJavaUtilMap:[((RAREUTJSONObject *) nil_chk(o)) getObjectMap]]) {
    serverType_ = 0;
    [self populateWithRAREUTJSONObject:self];
  }
  return self;
}

- (id)initWithNSString:(NSString *)serverName
          withNSString:(NSString *)serverURL
           withBoolean:(BOOL)isContextServer {
  return [self initCCPBVSettings_ServerWithNSString:serverName withNSString:serverURL withInt:isContextServer ? CCPBVSettings_Server_TYPE_CONTEXT : 0];
}

- (id)initCCPBVSettings_ServerWithNSString:(NSString *)serverName
                              withNSString:(NSString *)serverURL
                                   withInt:(int)serverType {
  if (self = [super init]) {
    serverType_ = 0;
    (void) [self putWithNSString:@"type" withInt:serverType];
    (void) [self putWithNSString:@"name" withId:serverName];
    (void) [self putWithNSString:@"url" withId:serverURL];
    BOOL restricted = ![@"local" isEqual:serverURL];
    (void) [self putWithNSString:@"restricted" withBoolean:restricted];
  }
  return self;
}

- (id)initWithNSString:(NSString *)serverName
          withNSString:(NSString *)serverURL
               withInt:(int)serverType {
  return [self initCCPBVSettings_ServerWithNSString:serverName withNSString:serverURL withInt:serverType];
}

- (BOOL)isContextServer {
  return (serverType_ & CCPBVSettings_Server_TYPE_CONTEXT) != 0;
}

- (BOOL)isDemoServer {
  return (serverType_ & CCPBVSettings_Server_TYPE_DEMO) != 0;
}

- (BOOL)isFrozen {
  return (serverType_ & CCPBVSettings_Server_TYPE_OTHER) != 0;
}

- (BOOL)canChangePatient {
  return [self optBooleanWithNSString:@"can_change_patient" withBoolean:YES];
}

- (NSString *)toHashKey {
  return [NSString stringWithFormat:@"%@:%@", [self getName], [self getURL]];
}

- (void)setNameWithNSString:(NSString *)name {
  (void) [self putWithNSString:@"name" withId:name];
}

- (void)setUrlWithNSString:(NSString *)url {
  (void) [self putWithNSString:@"url" withId:url];
}

- (void)setTypeWithInt:(int)type {
  serverType_ = type;
  (void) [self putWithNSString:@"type" withInt:type];
}

- (NSString *)getName {
  return [self optStringWithNSString:@"name"];
}

- (NSString *)getURL {
  return [self optStringWithNSString:@"url"];
}

- (BOOL)hasCustomLogin {
  return [self optBooleanWithNSString:@"custom_login" withBoolean:NO];
}

- (BOOL)isRestricted {
  return [self optBooleanWithNSString:@"restricted"];
}

- (BOOL)isValid {
  if (([((NSString *) nil_chk([self getName])) sequenceLength] == 0) || ([((NSString *) nil_chk([self getURL])) sequenceLength] == 0)) {
    return NO;
  }
  return YES;
}

- (void)populateWithRAREUTJSONObject:(RAREUTJSONObject *)o {
  int type = [((RAREUTJSONObject *) nil_chk(o)) optIntWithNSString:@"type" withInt:-1];
  if (type == -1) {
    NSString *s = [o optStringWithNSString:@"type"];
    if ([((NSString *) nil_chk(s)) equalsIgnoreCase:@"default"]) {
      serverType_ = 0;
    }
    else if ([s equalsIgnoreCase:@"demo"]) {
      serverType_ = CCPBVSettings_Server_TYPE_DEMO;
    }
    else if ([s equalsIgnoreCase:@"context"]) {
      serverType_ = CCPBVSettings_Server_TYPE_CONTEXT;
    }
    else {
      serverType_ = CCPBVSettings_Server_TYPE_OTHER;
    }
  }
  else {
    serverType_ = type;
  }
  BOOL restricted = [self optBooleanWithNSString:@"restricted" withBoolean:YES];
  (void) [self putWithNSString:@"restricted" withBoolean:restricted];
}

- (void)copyAllFieldsTo:(CCPBVSettings_Server *)other {
  [super copyAllFieldsTo:other];
  other->serverType_ = serverType_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isContextServer", NULL, "Z", 0x1, NULL },
    { "isDemoServer", NULL, "Z", 0x1, NULL },
    { "isFrozen", NULL, "Z", 0x1, NULL },
    { "canChangePatient", NULL, "Z", 0x1, NULL },
    { "toHashKey", NULL, "LNSString", 0x1, NULL },
    { "setTypeWithInt:", NULL, "V", 0x0, NULL },
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getURL", NULL, "LNSString", 0x1, NULL },
    { "hasCustomLogin", NULL, "Z", 0x1, NULL },
    { "isRestricted", NULL, "Z", 0x1, NULL },
    { "isValid", NULL, "Z", 0x1, NULL },
    { "populateWithRAREUTJSONObject:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "TYPE_CONTEXT_", NULL, 0x19, "I" },
    { "TYPE_DEMO_", NULL, 0x19, "I" },
    { "TYPE_OTHER_", NULL, 0x19, "I" },
  };
  static J2ObjcClassInfo _CCPBVSettings_Server = { "Server", "com.sparseware.bellavista", "Settings", 0x9, 12, methods, 3, fields, 0, NULL};
  return &_CCPBVSettings_Server;
}

@end
@implementation CCPBVSettings_$1

- (id)compute {
  [this$0_ loadDefaultServers];
  return nil;
}

- (void)finishWithId:(id)result {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  [this$0_ populateLoginServersWidgetWithRAREaListWidget:val$lw_];
  if ([((id<RAREiFormViewer>) nil_chk([((RAREaListWidget *) nil_chk(val$lw_)) getFormViewer])) getWidgetWithNSString:@"password"] != nil) {
    [this$0_ updateLoginFormForSelectedServerWithRAREaListWidget:val$lw_];
  }
}

- (id)initWithCCPBVSettings:(CCPBVSettings *)outer$
       withRAREWindowViewer:(RAREWindowViewer *)capture$0
        withRAREaListWidget:(RAREaListWidget *)capture$1 {
  this$0_ = outer$;
  val$w_ = capture$0;
  val$lw_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compute", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVSettings" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$lw_", NULL, 0x1012, "LRAREaListWidget" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$1 = { "$1", "com.sparseware.bellavista", "Settings", 0x8000, 1, methods, 3, fields, 0, NULL};
  return &_CCPBVSettings_$1;
}

@end
@implementation CCPBVSettings_$2

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ([returnValue isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(returnValue, [JavaLangThrowable class])];
  }
  else {
    [this$0_ showNetworkServersViewerWithRAREiContainer:(id<RAREiContainer>) check_protocol_cast(returnValue, @protocol(RAREiContainer)) withRAREaListViewer:val$lv_];
  }
}

- (id)initWithCCPBVSettings:(CCPBVSettings *)outer$
       withRAREWindowViewer:(RAREWindowViewer *)capture$0
        withRAREaListViewer:(RAREaListViewer *)capture$1 {
  this$0_ = outer$;
  val$w_ = capture$0;
  val$lv_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVSettings" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$lv_", NULL, 0x1012, "LRAREaListViewer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$2 = { "$2", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_CCPBVSettings_$2;
}

@end
@implementation CCPBVSettings_$3

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ([returnValue isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(returnValue, [JavaLangThrowable class])];
  }
  else {
    @try {
      RAREUTObjectHolder *oh = (RAREUTObjectHolder *) check_class_cast(returnValue, [RAREUTObjectHolder class]);
      RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast(((RAREUTObjectHolder *) nil_chk(oh))->value_, [RAREUTJSONObject class]);
      RAREUTJSONArray *a = [((RAREUTJSONObject *) nil_chk(o)) getJSONArrayWithNSString:@"servers"];
      [((RAREaListViewer *) nil_chk(val$lv_)) clear];
      for (id __strong s in nil_chk(a)) {
        CCPBVSettings_Server *server = [[CCPBVSettings_Server alloc] initWithRAREUTJSONObject:(RAREUTJSONObject *) check_class_cast(s, [RAREUTJSONObject class])];
        RARERenderableDataItem *item = [[RARERenderableDataItem alloc] initWithNSString:[server getName] withId:server withRAREiPlatformIcon:nil];
        [val$lv_ addExWithRARERenderableDataItem:item];
      }
      [val$lv_ refreshItems];
    }
    @catch (JavaLangException *e) {
      [val$w_ alertWithId:[val$w_ getStringWithNSString:@"bv.text.invalid_network_servers_data"]];
      [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    }
  }
}

- (id)initWithRAREWindowViewer:(RAREWindowViewer *)capture$0
           withRAREaListViewer:(RAREaListViewer *)capture$1 {
  val$w_ = capture$0;
  val$lv_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$lv_", NULL, 0x1012, "LRAREaListViewer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$3 = { "$3", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVSettings_$3;
}

@end
@implementation CCPBVSettings_$4

- (void)run {
  if (![((id<RAREiFormViewer>) nil_chk(val$fv_)) isDisposed]) {
    id<RAREiWidget> w = [val$fv_ getWidgetWithNSString:@"name"];
    if ((w != nil) && ![w isDisposed]) {
      [w requestFocus];
    }
  }
}

- (id)initWithRAREiFormViewer:(id<RAREiFormViewer>)capture$0 {
  val$fv_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$fv_", NULL, 0x1012, "LRAREiFormViewer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$4 = { "$4", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVSettings_$4;
}

@end
@implementation CCPBVSettings_$5

- (id)compute {
  @try {
    (void) [((RAREActionLink *) nil_chk(val$link_)) sendFormDataWithRAREUTiURLResolver:val$w_ withJavaUtilMap:val$data_];
    return [val$link_ getContentAsString];
  }
  @catch (JavaLangException *e) {
    return e;
  }
}

- (void)finishWithId:(id)result {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ([result isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(result, [JavaLangThrowable class])];
  }
  else {
    NSString *s = (NSString *) check_class_cast(result, [NSString class]);
    if (s != nil) {
      s = [s trim];
    }
    if ((s == nil) || ([s sequenceLength] == 0)) {
      s = [val$w_ getStringWithNSString:@"bv.text.settings.pin_submitted"];
    }
    [((id<RAREiWidget>) nil_chk(val$l_)) setValueWithId:s];
  }
}

- (id)initWithRAREActionLink:(RAREActionLink *)capture$0
        withRAREWindowViewer:(RAREWindowViewer *)capture$1
         withJavaUtilHashMap:(JavaUtilHashMap *)capture$2
             withRAREiWidget:(id<RAREiWidget>)capture$3 {
  val$link_ = capture$0;
  val$w_ = capture$1;
  val$data_ = capture$2;
  val$l_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compute", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$link_", NULL, 0x1012, "LRAREActionLink" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$data_", NULL, 0x1012, "LJavaUtilHashMap" },
    { "val$l_", NULL, 0x1012, "LRAREiWidget" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$5 = { "$5", "com.sparseware.bellavista", "Settings", 0x8000, 1, methods, 4, fields, 0, NULL};
  return &_CCPBVSettings_$5;
}

@end
@implementation CCPBVSettings_$6

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  if (!canceled && [((JavaLangBoolean *) nil_chk([JavaLangBoolean getTRUE])) isEqual:returnValue]) {
    IOSIntArray *sels = [((RARECheckBoxListViewer *) nil_chk(val$lb_)) getSelectedIndexes];
    if (sels != nil) {
      JavaUtilHashSet *set = [this$0_ getServersSet];
      {
        IOSIntArray *a__ = sels;
        int const *b__ = a__->buffer_;
        int const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          int i = (*b__++);
          CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RARERenderableDataItem *) nil_chk([val$lb_ getWithInt:i])) getLinkedData], [CCPBVSettings_Server class]);
          if ([((CCPBVSettings_Server *) nil_chk(s)) isValid] && ![((JavaUtilHashSet *) nil_chk(set)) containsWithId:[s toHashKey]]) {
            [((id<JavaUtilList>) nil_chk(this$0_->servers_)) addWithId:s];
          }
        }
      }
      [this$0_ populateServersWithRAREaListViewer:val$lv_];
      NSString *url = [((RARETextFieldWidget *) nil_chk(val$tf_)) getValueAsString];
      NSString *ourl = (NSString *) check_class_cast([val$tf_ getAttributeWithNSString:@"network_servers_url"], [NSString class]);
      if (![((NSString *) nil_chk(url)) isEqual:ourl]) {
        [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) putStringWithNSString:@"network_servers_url" withNSString:url];
      }
    }
  }
  [((id<RAREiContainer>) nil_chk(val$v_)) dispose];
}

- (id)initWithCCPBVSettings:(CCPBVSettings *)outer$
 withRARECheckBoxListViewer:(RARECheckBoxListViewer *)capture$0
        withRAREaListViewer:(RAREaListViewer *)capture$1
    withRARETextFieldWidget:(RARETextFieldWidget *)capture$2
         withRAREiContainer:(id<RAREiContainer>)capture$3 {
  this$0_ = outer$;
  val$lb_ = capture$0;
  val$lv_ = capture$1;
  val$tf_ = capture$2;
  val$v_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVSettings" },
    { "val$lb_", NULL, 0x1012, "LRARECheckBoxListViewer" },
    { "val$lv_", NULL, 0x1012, "LRAREaListViewer" },
    { "val$tf_", NULL, 0x1012, "LRARETextFieldWidget" },
    { "val$v_", NULL, 0x1012, "LRAREiContainer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$6 = { "$6", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 5, fields, 0, NULL};
  return &_CCPBVSettings_$6;
}

@end
