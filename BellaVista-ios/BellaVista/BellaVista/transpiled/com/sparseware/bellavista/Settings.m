//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Settings.java
//
//  Created by decoteaud on 11/19/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/aWorkerTask.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aListViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/widget/aListWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iPreferences.h"
#include "com/sparseware/bellavista/CardStack.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/Utils.h"
#include "java/lang/Exception.h"
#include "java/lang/Package.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/prefs/BackingStoreException.h"

@implementation CCPBVSettings

- (id)init {
  if (self = [super init]) {
    (void) [CCPBVUtils setSettingsHandler:self];
    preferences_ = [[CCPBVSettings_AppPreferences alloc] init];
  }
  return self;
}

- (CCPBVSettings_AppPreferences *)getAppPreferencesWithNSString:(NSString *)user {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) setUserWithNSString:user];
  return preferences_;
}

- (NSString *)getLastLoggedinUser {
  return [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getLastLoggedinUser];
}

- (void)onBackButtonWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((id<RAREiWidget>) nil_chk(widget)) getFormViewer], [RAREStackPaneViewer class]);
  [((RAREStackPaneViewer *) nil_chk(sp)) switchToWithInt:0];
}

- (void)onCheckBoxActionWithNSString:(NSString *)eventName
                     withRAREiWidget:(id<RAREiWidget>)widget
             withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) putBooleanWithNSString:[((id<RAREiWidget>) nil_chk(widget)) getName] withBoolean:[widget isSelected]];
}

- (void)onSubmitPinWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
  @try {
    NSString *pin = [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"pin"])) getValueAsString];
    if (pin == nil) {
      pin = @"";
    }
    RAREWindowViewer *w = [RAREPlatform getWindowViewer];
    id<RAREiWidget> l = [((id<RAREiFormViewer>) nil_chk([widget getFormViewer])) getWidgetWithNSString:@"message"];
    if (([((NSString *) nil_chk(pin)) sequenceLength] < [CCPBVCardStack getPinDigitCount]) || ![RAREUTSNumber isNumericWithNSString:pin]) {
      NSString *s = [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.invalid_pin" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:[CCPBVCardStack getPinDigitCount]] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
      [((id<RAREiWidget>) nil_chk(l)) setValueWithId:s];
      [w beep];
    }
    else {
      [((id<RAREiWidget>) nil_chk(l)) setValueWithId:@""];
      if ([CCPBVUtils isDemo]) {
        [l setValueWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.settings.pin_submitted"]];
      }
      else {
        RAREActionLink *link = [CCPBVUtils createLinkWithRAREiWidget:w withNSString:@"/hub/account/allow_pin"];
        JavaUtilHashMap *data = [[JavaUtilHashMap alloc] initWithInt:2];
        (void) [data putWithId:@"pin" withId:pin];
        RAREaWorkerTask *task = [[CCPBVSettings_$1 alloc] initWithRAREWindowViewer:w withRAREiWidget:l withRAREActionLink:link withJavaUtilHashMap:data];
        (void) [((RAREWindowViewer *) nil_chk(w)) spawnWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
        [w showWaitCursor];
      }
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)onPinFocusedWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"message"])) setValueWithId:@""];
}

- (void)onCloseWithNSString:(NSString *)eventName
            withRAREiWidget:(id<RAREiWidget>)widget
    withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"settingsStack"], [RAREStackPaneViewer class]);
  id<RAREiWidget> gb = (sp == nil) ? nil : [sp getWidgetWithNSString:@"serversSettings"];
  if (gb != nil) {
    [self onServersUnloadWithNSString:eventName withRAREiWidget:gb withJavaUtilEventObject:event];
  }
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) setServersWithJavaUtilList:servers_];
  [preferences_ update];
  [((RAREWindowViewer *) nil_chk([widget getWindow])) close];
}

- (void)onConfigureBasicSettingsWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast(widget, @protocol(RAREiContainer));
  for (id<RAREiWidget> __strong w in nil_chk([((id<RAREiContainer>) nil_chk(fv)) getWidgetList])) {
    switch ([[((id<RAREiWidget>) nil_chk(w)) getWidgetType] ordinal]) {
      case RAREiWidget_WidgetType_CheckBox:
      [w setSelectedWithBoolean:[((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getBooleanWithNSString:[w getName] withBoolean:NO]];
      break;
      default:
      break;
    }
  }
  serversUpdated_ = NO;
}

- (void)onConfigureLoginComboBoxWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListWidget *lw = (RAREaListWidget *) check_class_cast(widget, [RAREaListWidget class]);
  servers_ = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  for (CCPBVSettings_Server * __strong s in nil_chk(servers_)) {
    [((RAREaListWidget *) nil_chk(lw)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:((CCPBVSettings_Server *) nil_chk(s))->serverName_ withId:s withRAREiPlatformIcon:nil]];
  }
  CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.local_demo"] withNSString:@"local" withBoolean:YES];
  [((RAREaListWidget *) nil_chk(lw)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:s->serverName_ withId:s withRAREiPlatformIcon:nil]];
  [lw refreshItems];
  [lw setSelectedIndexWithInt:0];
}

- (CCPBVSettings_Server *)getDefaultServer {
  id<JavaUtilList> list = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  if ((list != nil) && ![list isEmpty]) {
    return [list getWithInt:0];
  }
  return [[CCPBVSettings_Server alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.local_demo"] withNSString:@"local" withBoolean:YES];
}

- (void)onConfigureServersWithNSString:(NSString *)eventName
                       withRAREiWidget:(id<RAREiWidget>)widget
               withJavaUtilEventObject:(JavaUtilEventObject *)event {
  servers_ = [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) getServers];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class]);
  for (CCPBVSettings_Server * __strong s in nil_chk(servers_)) {
    [((RAREaListViewer *) nil_chk(lv)) addExWithRARERenderableDataItem:[[RARERenderableDataItem alloc] initWithNSString:((CCPBVSettings_Server *) nil_chk(s))->serverName_ withId:s withRAREiPlatformIcon:nil]];
  }
  [((RAREaListViewer *) nil_chk(lv)) refreshItems];
}

- (void)onEventWithNSString:(NSString *)eventName
            withRAREiWidget:(id<RAREiWidget>)widget
    withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)onFinishedLoadingListWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class]);
  int len = [((RAREaListViewer *) nil_chk(lv)) size];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [lv getWithInt:i];
    id o = [((RARERenderableDataItem *) nil_chk(item)) getValue];
    if ([o isKindOfClass:[NSString class]]) {
      [item setValueWithId:[RAREPlatform getResourceAsStringWithNSString:(NSString *) check_class_cast(o, [NSString class])]];
    }
  }
}

- (void)onOtherOptionsActionWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  int n = [((RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class])) getSelectedIndex];
  if (n != -1) {
    [((RAREStackPaneViewer *) check_class_cast([((id<RAREiWidget>) nil_chk(widget)) getFormViewer], [RAREStackPaneViewer class])) switchToWithInt:n + 1];
  }
}

- (void)onServersAddActionWithNSString:(NSString *)eventName
                       withRAREiWidget:(id<RAREiWidget>)widget
               withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:@"" withNSString:@"" withBoolean:NO];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  [((RAREaListViewer *) nil_chk(lv)) addWithId:[[RARERenderableDataItem alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.settings.new_server"] withId:s withRAREiPlatformIcon:nil]];
  [((id<JavaUtilList>) nil_chk(servers_)) addWithId:s];
  [lv setSelectedIndexWithInt:[lv size] - 1];
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVSettings_$2 alloc] initWithRAREiFormViewer:fv]];
}

- (void)onServersAddRemoteActionWithNSString:(NSString *)eventName
                             withRAREiWidget:(id<RAREiWidget>)widget
                     withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  CCPBVSettings_Server *s = [[CCPBVSettings_Server alloc] initWithNSString:@"" withNSString:@"" withBoolean:NO];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([widget getFormViewer])) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  [((RAREaListViewer *) nil_chk(lv)) addWithId:[[RARERenderableDataItem alloc] initWithNSString:[RAREPlatform getResourceAsStringWithNSString:@"bv.text.settings.new_server"] withId:s withRAREiPlatformIcon:nil]];
  [((id<JavaUtilList>) nil_chk(servers_)) addWithId:s];
  [lv setSelectedIndexWithInt:[lv size] - 1];
  [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVSettings_$3 alloc] initWithRAREiFormViewer:fv]];
}

- (void)onServersChangeWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast(widget, [RAREaListViewer class]);
  CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([lv getSelectionData], [CCPBVSettings_Server class]);
  [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"name"])) setValueWithId:(s == nil) ? @"" : s->serverName_];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"url"])) setValueWithId:(s == nil) ? @"" : s->serverURL_];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"context"])) setSelectedWithBoolean:(s == nil) ? NO : [s isContextServer]];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"update"])) setEnabledWithBoolean:s != nil && ![s isFrozen]];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"name"])) setEnabledWithBoolean:s != nil && ![s isFrozen]];
  [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"url"])) setEnabledWithBoolean:s != nil && ![s isFrozen]];
}

- (void)onServersDeleteActionWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RAREaListViewer *) nil_chk(lv)) getSelectionData], [CCPBVSettings_Server class]);
  if (s != nil) {
    (void) [lv removeWithInt:[lv getSelectedIndex]];
  }
  [((id<JavaUtilList>) nil_chk(servers_)) removeWithId:s];
}

- (void)onServersUnloadWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiContainer>) check_protocol_cast(widget, @protocol(RAREiContainer))) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  if (lv != nil) {
    [((id<JavaUtilList>) nil_chk(servers_)) clear];
    int len = [lv size];
    for (int i = 0; i < len; i++) {
      [servers_ addWithId:(CCPBVSettings_Server *) check_class_cast([((RARERenderableDataItem *) nil_chk([lv getWithInt:i])) getLinkedData], [CCPBVSettings_Server class])];
    }
  }
}

- (void)onServersUpdateActionWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RAREaListViewer *lv = (RAREaListViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"servers"], [RAREaListViewer class]);
  int n = [((RAREaListViewer *) nil_chk(lv)) getSelectedIndex];
  if (n != -1) {
    NSString *protocol = [((NSString *) nil_chk([((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"url"])) getValueAsString])) trim];
    int p = [((NSString *) nil_chk(protocol)) indexOf:':'];
    if ((p == -1) || ![CCPBVUtils isServerProtocolSupportedWithNSString:[protocol substring:0 endIndex:p]]) {
      [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) alertWithId:[((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStringWithNSString:@"bv.text.settings.protocol_not_supported"]];
      return;
    }
    RARERenderableDataItem *item = [lv getSelectedItem];
    CCPBVSettings_Server *s = (CCPBVSettings_Server *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getLinkedData], [CCPBVSettings_Server class]);
    ((CCPBVSettings_Server *) nil_chk(s))->serverName_ = [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"name"])) getValueAsString];
    s->serverURL_ = protocol;
    s->serverType_ = [((id<RAREiWidget>) nil_chk([fv getWidgetWithNSString:@"context"])) isSelected] ? CCPBVSettings_Server_TYPE_CONTEXT : 0;
    if ([((NSString *) nil_chk(s->serverName_)) sequenceLength] == 0) {
      [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) beep];
    }
    else {
      [item setValueWithId:s->serverName_];
      [lv rowChangedWithInt:n];
    }
  }
}

- (void)saveLastLoggedinUserWithNSString:(NSString *)username {
  [((CCPBVSettings_AppPreferences *) nil_chk(preferences_)) saveLastLoggedinUserWithNSString:username];
}

- (void)copyAllFieldsTo:(CCPBVSettings *)other {
  [super copyAllFieldsTo:other];
  other->preferences_ = preferences_;
  other->servers_ = servers_;
  other->serversUpdated_ = serversUpdated_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getAppPreferencesWithNSString:", NULL, "LCCPBVSettings_AppPreferences", 0x1, NULL },
    { "getLastLoggedinUser", NULL, "LNSString", 0x1, NULL },
    { "getDefaultServer", NULL, "LCCPBVSettings_Server", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "preferences_", NULL, 0x0, "LCCPBVSettings_AppPreferences" },
    { "servers_", NULL, 0x0, "LJavaUtilList" },
    { "serversUpdated_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _CCPBVSettings = { "Settings", "com.sparseware.bellavista", NULL, 0x1, 3, methods, 3, fields, 0, NULL};
  return &_CCPBVSettings;
}

@end
@implementation CCPBVSettings_AppPreferences

- (id)init {
  if (self = [super init]) {
    settings_ = [[JavaUtilHashMap alloc] init];
    NSString *path = [((JavaLangPackage *) nil_chk([[IOSClass classWithClass:[CCPBVSettings class]] getPackage])) getName];
    path = [((NSString *) nil_chk(path)) replace:'.' withChar:'/'];
    globalPrefs_ = [RAREFunctions getPreferencesWithNSString:path];
  }
  return self;
}

- (void)dispose {
  if (edited_) {
    [self update];
  }
  globalPrefs_ = nil;
  prefs_ = nil;
}

- (BOOL)getBooleanWithNSString:(NSString *)key
                   withBoolean:(BOOL)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getBooleanWithNSString:key withBoolean:def];
}

- (int)getIntWithNSString:(NSString *)key
                  withInt:(int)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getIntWithNSString:key withInt:def];
}

- (NSString *)getLastLoggedinUser {
  @try {
    return [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getWithNSString:@"username" withNSString:nil];
  }
  @catch (JavaLangThrowable *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
    return nil;
  }
}

- (NSString *)getPasswordWithNSString:(NSString *)key
                         withNSString:(NSString *)def {
  NSString *value = [((id<RAREUTiPreferences>) nil_chk(prefs_)) getWithNSString:key withNSString:nil];
  if (value != nil) {
    value = [RAREFunctions decodeBase64WithNSString:value];
  }
  return (value == nil) ? def : value;
}

- (id<JavaUtilList>)getServers {
  if (servers_ == nil) {
    JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:5];
    NSString *s = [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getWithNSString:@"servers" withNSString:nil];
    if ((s != nil) && ([s sequenceLength] > 0)) {
      s = [RAREFunctions decodeBase64WithNSString:s];
      RAREUTCharScanner *sc = [[RAREUTCharScanner alloc] initWithNSString:s];
      while ((s = [sc nextTokenWithChar:0x0009]) != nil) {
        CCPBVSettings_Server *server = [[CCPBVSettings_Server alloc] initWithNSString:s];
        if ([server isValid]) {
          [list addWithId:server];
        }
      }
      [sc close];
    }
    servers_ = list;
  }
  return servers_;
}

- (NSString *)getStringWithNSString:(NSString *)key
                       withNSString:(NSString *)def {
  return [((id<RAREUTiPreferences>) nil_chk(prefs_)) getWithNSString:key withNSString:def];
}

- (void)putBooleanWithNSString:(NSString *)key
                   withBoolean:(BOOL)value {
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putBooleanWithNSString:key withBoolean:value];
  edited_ = YES;
}

- (void)putIntWithNSString:(NSString *)key
                   withInt:(int)value {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putIntWithNSString:key withInt:value];
}

- (void)putPasswordWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  value = [RAREFunctions base64WithNSString:value];
  [self putStringWithNSString:key withNSString:value];
}

- (void)putStringWithNSString:(NSString *)key
                 withNSString:(NSString *)value {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) putWithNSString:key withNSString:value];
}

- (void)removeValueWithNSString:(NSString *)key {
  edited_ = YES;
  [((id<RAREUTiPreferences>) nil_chk(prefs_)) removeWithNSString:key];
}

- (void)saveLastLoggedinUserWithNSString:(NSString *)username {
  @try {
    [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) putWithNSString:@"username" withNSString:username];
  }
  @catch (JavaLangThrowable *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)setServersWithJavaUtilList:(id<JavaUtilList>)list {
  servers_ = list;
  if ((list == nil) || [list isEmpty]) {
    [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) removeWithNSString:@"servers"];
  }
  else {
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
    BOOL hasInvalid = NO;
    for (CCPBVSettings_Server * __strong s in list) {
      if ([((CCPBVSettings_Server *) nil_chk(s)) isValid]) {
        (void) [((JavaLangStringBuilder *) nil_chk([s toStringWithJavaLangStringBuilder:sb])) appendWithChar:0x0009];
      }
      else {
        hasInvalid = YES;
      }
    }
    if ([sb sequenceLength] == 0) {
      [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) removeWithNSString:@"servers"];
    }
    else {
      [sb setLengthWithInt:[sb sequenceLength] - 1];
      [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) putWithNSString:@"servers" withNSString:[RAREFunctions base64WithNSString:[sb description]]];
    }
    if (hasInvalid) {
      int len = [list size];
      for (int i = len - 1; i > -1; i--) {
        if (![((CCPBVSettings_Server *) nil_chk([list getWithInt:i])) isValid]) {
          (void) [list removeWithInt:i];
        }
      }
    }
  }
  edited_ = YES;
}

- (void)setUserWithNSString:(NSString *)user {
  self->user_ = user;
  prefs_ = [((id<RAREUTiPreferences>) nil_chk(globalPrefs_)) getNodeWithNSString:user];
}

- (void)update {
  @try {
    if (globalPrefs_ != nil) {
      [globalPrefs_ flush];
      [globalPrefs_ sync];
    }
    if (prefs_ != nil) {
      [prefs_ flush];
      [prefs_ sync];
    }
  }
  @catch (JavaUtilPrefsBackingStoreException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(CCPBVSettings_AppPreferences *)other {
  [super copyAllFieldsTo:other];
  other->edited_ = edited_;
  other->globalPrefs_ = globalPrefs_;
  other->prefs_ = prefs_;
  other->servers_ = servers_;
  other->settings_ = settings_;
  other->user_ = user_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getBooleanWithNSString:withBoolean:", NULL, "Z", 0x1, NULL },
    { "getLastLoggedinUser", NULL, "LNSString", 0x1, NULL },
    { "getPasswordWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
    { "getServers", NULL, "LJavaUtilList", 0x1, NULL },
    { "getStringWithNSString:withNSString:", NULL, "LNSString", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "edited_", NULL, 0x0, "Z" },
    { "prefs_", NULL, 0x0, "LRAREUTiPreferences" },
    { "globalPrefs_", NULL, 0x0, "LRAREUTiPreferences" },
    { "user_", NULL, 0x0, "LNSString" },
    { "servers_", NULL, 0x0, "LJavaUtilList" },
    { "settings_", NULL, 0x0, "LJavaUtilHashMap" },
  };
  static J2ObjcClassInfo _CCPBVSettings_AppPreferences = { "AppPreferences", "com.sparseware.bellavista", "Settings", 0x9, 5, methods, 6, fields, 0, NULL};
  return &_CCPBVSettings_AppPreferences;
}

@end
@implementation CCPBVSettings_Server

+ (int)TYPE_CONTEXT {
  return CCPBVSettings_Server_TYPE_CONTEXT;
}

+ (int)TYPE_DEMO {
  return CCPBVSettings_Server_TYPE_DEMO;
}

+ (int)TYPE_FROZEN {
  return CCPBVSettings_Server_TYPE_FROZEN;
}

- (id)initWithNSString:(NSString *)s {
  if (self = [super init]) {
    serverType_ = 0;
    id<JavaUtilList> list = [RAREUTCharScanner getTokensWithNSString:s withChar:'^' withBoolean:YES];
    if ([((id<JavaUtilList>) nil_chk(list)) size] < 3) {
      return self;
    }
    else {
      [self populateWithJavaUtilList:list];
    }
  }
  return self;
}

- (void)populateWithJavaUtilList:(id<JavaUtilList>)values {
  serverType_ = [RAREUTSNumber intValueWithNSString:[((id<JavaUtilList>) nil_chk(values)) getWithInt:0]];
  serverName_ = [values getWithInt:1];
  serverURL_ = [values getWithInt:2];
}

- (id)initWithNSString:(NSString *)serverName
          withNSString:(NSString *)serverURL
           withBoolean:(BOOL)isContextServer {
  if (self = [super init]) {
    serverType_ = 0;
    self->serverName_ = serverName;
    self->serverURL_ = serverURL;
    self->serverType_ = isContextServer ? CCPBVSettings_Server_TYPE_CONTEXT : 0;
  }
  return self;
}

- (id)initWithNSString:(NSString *)serverName
          withNSString:(NSString *)serverURL
               withInt:(int)serverType {
  if (self = [super init]) {
    serverType_ = 0;
    self->serverName_ = serverName;
    self->serverURL_ = serverURL;
    self->serverType_ = serverType;
  }
  return self;
}

- (BOOL)isContextServer {
  return (serverType_ & CCPBVSettings_Server_TYPE_CONTEXT) != 0;
}

- (BOOL)isDemoServer {
  return (serverType_ & CCPBVSettings_Server_TYPE_DEMO) != 0;
}

- (BOOL)isFrozen {
  return (serverType_ & CCPBVSettings_Server_TYPE_FROZEN) != 0;
}

- (BOOL)isValid {
  if ((serverName_ == nil) || ([serverName_ sequenceLength] == 0) || (serverURL_ == nil)) {
    return NO;
  }
  return YES;
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([self toStringWithJavaLangStringBuilder:[[JavaLangStringBuilder alloc] init]])) description];
}

- (JavaLangStringBuilder *)toStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:serverType_])) appendWithNSString:@"^"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:serverName_])) appendWithNSString:@"^"])) appendWithNSString:serverURL_];
  return sb;
}

- (void)copyAllFieldsTo:(CCPBVSettings_Server *)other {
  [super copyAllFieldsTo:other];
  other->serverName_ = serverName_;
  other->serverType_ = serverType_;
  other->serverURL_ = serverURL_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "populateWithJavaUtilList:", NULL, "V", 0x4, NULL },
    { "isContextServer", NULL, "Z", 0x1, NULL },
    { "isDemoServer", NULL, "Z", 0x1, NULL },
    { "isFrozen", NULL, "Z", 0x1, NULL },
    { "isValid", NULL, "Z", 0x1, NULL },
    { "toStringWithJavaLangStringBuilder:", NULL, "LJavaLangStringBuilder", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "serverName_", NULL, 0x1, "LNSString" },
    { "serverURL_", NULL, 0x1, "LNSString" },
    { "serverType_", NULL, 0x1, "I" },
    { "TYPE_CONTEXT_", NULL, 0x19, "I" },
    { "TYPE_DEMO_", NULL, 0x19, "I" },
    { "TYPE_FROZEN_", NULL, 0x19, "I" },
  };
  static J2ObjcClassInfo _CCPBVSettings_Server = { "Server", "com.sparseware.bellavista", "Settings", 0x9, 6, methods, 6, fields, 0, NULL};
  return &_CCPBVSettings_Server;
}

@end
@implementation CCPBVSettings_$1

- (void)finishWithId:(id)result {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ([result isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(result, [JavaLangThrowable class])];
  }
  else {
    NSString *s = (NSString *) check_class_cast(result, [NSString class]);
    if (s != nil) {
      s = [s trim];
    }
    if ((s == nil) || ([s sequenceLength] == 0)) {
      s = [val$w_ getStringWithNSString:@"bv.text.settings.pin_submitted"];
    }
    [((id<RAREiWidget>) nil_chk(val$l_)) setValueWithId:s];
  }
}

- (id)compute {
  @try {
    (void) [((RAREActionLink *) nil_chk(val$link_)) sendFormDataWithRAREiWidget:val$w_ withJavaUtilMap:val$data_];
    return [val$link_ getContentAsString];
  }
  @catch (JavaLangException *e) {
    return e;
  }
}

- (id)initWithRAREWindowViewer:(RAREWindowViewer *)capture$0
               withRAREiWidget:(id<RAREiWidget>)capture$1
            withRAREActionLink:(RAREActionLink *)capture$2
           withJavaUtilHashMap:(JavaUtilHashMap *)capture$3 {
  val$w_ = capture$0;
  val$l_ = capture$1;
  val$link_ = capture$2;
  val$data_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compute", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$l_", NULL, 0x1012, "LRAREiWidget" },
    { "val$link_", NULL, 0x1012, "LRAREActionLink" },
    { "val$data_", NULL, 0x1012, "LJavaUtilHashMap" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$1 = { "$1", "com.sparseware.bellavista", "Settings", 0x8000, 1, methods, 4, fields, 0, NULL};
  return &_CCPBVSettings_$1;
}

@end
@implementation CCPBVSettings_$2

- (void)run {
  if (![((id<RAREiFormViewer>) nil_chk(val$fv_)) isDisposed]) {
    id<RAREiWidget> w = [val$fv_ getWidgetWithNSString:@"name"];
    if ((w != nil) && ![w isDisposed]) {
      [w requestFocus];
    }
  }
}

- (id)initWithRAREiFormViewer:(id<RAREiFormViewer>)capture$0 {
  val$fv_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$fv_", NULL, 0x1012, "LRAREiFormViewer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$2 = { "$2", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVSettings_$2;
}

@end
@implementation CCPBVSettings_$3

- (void)run {
  if (![((id<RAREiFormViewer>) nil_chk(val$fv_)) isDisposed]) {
    id<RAREiWidget> w = [val$fv_ getWidgetWithNSString:@"name"];
    if ((w != nil) && ![w isDisposed]) {
      [w requestFocus];
    }
  }
}

- (id)initWithRAREiFormViewer:(id<RAREiFormViewer>)capture$0 {
  val$fv_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$fv_", NULL, 0x1012, "LRAREiFormViewer" },
  };
  static J2ObjcClassInfo _CCPBVSettings_$3 = { "$3", "com.sparseware.bellavista", "Settings", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVSettings_$3;
}

@end
