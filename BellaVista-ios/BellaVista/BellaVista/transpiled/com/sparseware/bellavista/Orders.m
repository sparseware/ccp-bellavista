//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Orders.java
//
//  Created by decoteaud on 5/11/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/widget/ComboBoxWidget.h"
#include "com/appnativa/rare/widget/LabelWidget.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/Document.h"
#include "com/sparseware/bellavista/Orders.h"
#include "com/sparseware/bellavista/ResultsView.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/aResultsManager.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation CCPBVOrders

static int CCPBVOrders_SIG_COLUMN_ = 10;
static int CCPBVOrders_STATUS_COLUMN_ = 8;
static int CCPBVOrders_SUMMARY_STATUS_COLUMN_ = 1;

+ (int)CATEGORY_NAME_POSITION {
  return CCPBVOrders_CATEGORY_NAME_POSITION;
}

+ (int)CLINICAL_CATEGORY_POSITION {
  return CCPBVOrders_CLINICAL_CATEGORY_POSITION;
}

+ (int)SIG_COLUMN {
  return CCPBVOrders_SIG_COLUMN_;
}

+ (int *)SIG_COLUMNRef {
  return &CCPBVOrders_SIG_COLUMN_;
}

+ (int)STATUS_COLUMN {
  return CCPBVOrders_STATUS_COLUMN_;
}

+ (int *)STATUS_COLUMNRef {
  return &CCPBVOrders_STATUS_COLUMN_;
}

+ (int)SUMMARY_STATUS_COLUMN {
  return CCPBVOrders_SUMMARY_STATUS_COLUMN_;
}

+ (int *)SUMMARY_STATUS_COLUMNRef {
  return &CCPBVOrders_SUMMARY_STATUS_COLUMN_;
}

- (id)init {
  if (self = [super initWithNSString:@"orders" withNSString:@"Orders"]) {
    categorySortPosition_ = -1;
    cmedsCategoryID_ = @"_c_meds_";
    BOOL cardstack = [CCPBVUtils isCardStack];
    currentView_ = [CCPBVResultsViewEnum DOCUMENT];
    RAREUTJSONObject *info = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"ordersInfo"], [RAREUTJSONObject class]);
    hasClinicalCategories_ = cardstack ? NO : [((RAREUTJSONObject *) nil_chk(info)) optBooleanWithNSString:@"hasClinicalCategories" withBoolean:NO];
    includeIVsInCategorizedMeds_ = [((RAREUTJSONObject *) nil_chk(info)) optBooleanWithNSString:@"includeIVsInCategorizedMeds" withBoolean:YES];
    categorizedMedsTitle_ = [info optStringWithNSString:@"categorizedMedsTitle" withNSString:@"Medications (Categorized)"];
    missingClinicalCategoryTitle_ = [info optStringWithNSString:@"missingClinicalCategoryTitle" withNSString:@"unclassified medications"];
    missingCategoryTitle_ = [info optStringWithNSString:@"missingCategoryTitle" withNSString:@"Misc. Orders"];
    medsCategoryID_ = [info optStringWithNSString:@"medsCategoryID" withNSString:@"meds"];
    ivsCategoryID_ = [info optStringWithNSString:@"ivsCategoryID" withNSString:@"ivs"];
    statusColors_ = [info optJSONObjectWithNSString:@"statusColors"];
    if (cardstack) {
      startHtml_ = [info optStringWithNSString:@"csDirectionsHtmlStart" withNSString:nil];
      endHtml_ = [info optStringWithNSString:@"csDirectionsHtmlEnd" withNSString:nil];
    }
    if (startHtml_ == nil) {
      startHtml_ = [info optStringWithNSString:@"directionsHtmlStart" withNSString:@""];
    }
    if (endHtml_ == nil) {
      endHtml_ = [info optStringWithNSString:@"directionsHtmlEnd" withNSString:@""];
    }
    startHtmlSC_ = [info optStringWithNSString:@"csDirectionsStatusColorHtmlStart" withNSString:nil];
    if (startHtmlSC_ == nil) {
      startHtmlSC_ = [info optStringWithNSString:@"directionsStatusColorHtmlStart" withNSString:startHtml_];
    }
    endHtmlSC_ = [info optStringWithNSString:@"csDirectionsStatusColorHtmlEnd" withNSString:nil];
    if (endHtmlSC_ == nil) {
      endHtmlSC_ = [info optStringWithNSString:@"directionsStatusColorHtmlEnd" withNSString:endHtml_];
    }
    if (startHtml_ == nil) {
      startHtml_ = @"";
    }
    if (endHtml_ == nil) {
      endHtml_ = @"";
    }
  }
  return self;
}

- (void)onDisposeWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [super onDisposeWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  categorizedMeds_ = nil;
  allOrders_ = nil;
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiWidget> cw = [((RAREActionEvent *) nil_chk(e)) getWidget];
  RARERenderableDataItem *item = nil;
  if ([(id) cw isKindOfClass:[RAREPushButtonWidget class]]) {
    item = [((RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class])) getSelectedItem];
  }
  else if ([(id) cw isKindOfClass:[RAREComboBoxWidget class]]) {
    item = [((RAREComboBoxWidget *) check_class_cast(cw, [RAREComboBoxWidget class])) getSelectedItem];
  }
  if (item != nil) {
    NSString *cat = (NSString *) check_class_cast([item getLinkedData], [NSString class]);
    [self filterTableWithRARETableViewer:dataTable_ withNSString:cat];
  }
}

- (void)onSummaryTableActionWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *key = [((RARETableViewer *) check_class_cast(widget, [RARETableViewer class])) getSelectionDataAsStringWithInt:0];
  CCPBVActionPath *path = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"orders", key } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  [CCPBVUtils handleActionPathWithCCPBVActionPath:path];
}

- (void)onCreatedWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ([CCPBVUtils isCardStack]) {
    id<RAREiContainer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
    id<RAREiContainer> itemsForm = (id<RAREiContainer>) check_protocol_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"itemsForm"], @protocol(RAREiContainer));
    [CCPBVCardStackUtils setViewerTitleWithRAREiViewer:fv withNSString:[fv getTitle] withNSString:[((id<RAREiContainer>) nil_chk(itemsForm)) getTitle]];
  }
}

- (void)onTableActionWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget
          withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  RARERenderableDataItem *row = [((RARETableViewer *) nil_chk(table)) getSelectedItem];
  NSString *id_ = (row == nil) ? nil : (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:0])) getLinkedData], [NSString class]);
  if (id_ == nil) {
    id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
    id<RAREiContainer> dv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"documentViewer"], @protocol(RAREiContainer));
    [self clearFormWithRAREiContainer:dv == nil ? ((id) fv) : ((id) dv)];
    return;
  }
  id o = [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:3])) getValue];
  JavaUtilDate *date = ([o isKindOfClass:[JavaUtilDate class]]) ? (JavaUtilDate *) check_class_cast(o, [JavaUtilDate class]) : nil;
  @try {
    NSString *order = [nil_chk([((RARERenderableDataItem *) nil_chk([row getWithInt:1])) getValue]) description];
    JavaNetURL *url = [table getURLWithNSString:[NSString stringWithFormat:@"order/%@.html", id_]];
    CCPBVDocument *doc = [[CCPBVDocument alloc] initWithRAREiWidget:table withRAREActionLink:[[RAREActionLink alloc] initWithJavaNetURL:url] withNSString:id_];
    [doc setMainDocumentInfoWithJavaUtilDate:date withNSString:order];
    id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
    id<RAREiContainer> dv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"documentViewer"], @protocol(RAREiContainer));
    if (dv == nil) {
      RAREActionLink *link = [[RAREActionLink alloc] initWithRAREiWidget:fv withNSString:@"/document_viewer.rml"];
      [link setTargetNameWithNSString:[RAREiTarget TARGET_WORKSPACE]];
      [doc loadAndPopulateViewerWithRAREActionLink:link];
    }
    else {
      [doc loadAndPopulateViewerWithRAREiContainer:dv];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)onFinishedLoadingWithNSString:(NSString *)eventName
                      withRAREiWidget:(id<RAREiWidget>)widget
              withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ([CCPBVUtils isCardStack]) {
    RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
    id<RAREiFormViewer> fv = [((RARETableViewer *) nil_chk(table)) getFormViewer];
    [self populateCardStackWithRAREiContainer:fv withJavaUtilList:table];
    [CCPBVCardStackUtils setViewerActionWithRAREiViewer:fv withId:[[CCPBVOrders_OrdersStackActionListener alloc] initWithCCPBVOrders:self] withBoolean:YES];
    [CCPBVCardStackUtils switchToViewerWithRAREiViewer:[table getParent]];
    [CCPBVCardStackUtils updateTitleWithRAREiViewer:fv withBoolean:NO];
  }
}

- (void)dataParsedWithRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilList:(id<JavaUtilList>)rows
               withRAREActionLink:(RAREActionLink *)link {
  originalRows_ = rows;
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  appendDirections_ = ([((RARETableViewer *) nil_chk(table)) getColumnCount] < 3) || ([((RAREColumn *) nil_chk([table getColumnWithInt:2])) getRenderDetail] == [RAREColumn_RenderDetailEnum ICON_ONLY]);
  [table setWidgetDataLinkWithRAREActionLink:link];
  hasNoData_ = NO;
  categorizedMeds_ = nil;
  if ([self checkAndHandleNoDataWithRARETableViewer:table withJavaUtilList:rows]) {
    if ([CCPBVUtils isCardStack]) {
      RARELabelWidget *tapLabel = (RARELabelWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk([table getFormViewer])) getWidgetWithNSString:@"tapLabel"], [RARELabelWidget class]);
      [((RARELabelWidget *) nil_chk(tapLabel)) setValueWithId:[RAREPlatform getResourceAsStringWithNSString:[NSString stringWithFormat:@"bv.text.no_%@", namePrefix_]]];
      [tapLabel setVerticalAlignmentWithRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
    }
    else {
      [self updateCategoriesWithRAREiFormViewer:[table getFormViewer] withJavaUtilList:nil withInt:-1];
    }
    return;
  }
  [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) showWaitCursor];
  (void) [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVOrders_$1 alloc] initWithCCPBVOrders:self withRARETableViewer:table withJavaUtilList:rows]];
}

- (void)populateCardStackWithRAREiContainer:(id<RAREiContainer>)fv
                           withJavaUtilList:(id<JavaUtilList>)rows {
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  id<RAREiContainer> itemsForm = (id<RAREiContainer>) check_protocol_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"itemsForm"], @protocol(RAREiContainer));
  int count = [JavaLangMath minWithInt:[((id<RAREiContainer>) nil_chk(itemsForm)) getWidgetCount] / 2 withInt:len];
  int n = 0;
  for (int i = 0; i < count; i++) {
    RARERenderableDataItem *row = [rows getWithInt:i];
    RARERenderableDataItem *name = [((RARERenderableDataItem *) nil_chk(row)) getWithInt:[CCPBVaResultsManager NAME_POSITION]];
    RARERenderableDataItem *item = [row getItemExWithInt:CCPBVOrders_STATUS_COLUMN_];
    NSString *status = item == nil ? @"" : [item description];
    RARELabelWidget *nl = (RARELabelWidget *) check_class_cast([itemsForm getWidgetWithInt:n++], [RARELabelWidget class]);
    RARELabelWidget *sl = (RARELabelWidget *) check_class_cast([itemsForm getWidgetWithInt:n++], [RARELabelWidget class]);
    if ([((RARERenderableDataItem *) nil_chk(name)) getForeground] != nil) {
      [((RARELabelWidget *) nil_chk(nl)) setForegroundWithRAREUIColor:[name getForeground]];
      [((RARELabelWidget *) nil_chk(sl)) setForegroundWithRAREUIColor:[name getForeground]];
    }
    [((RARELabelWidget *) nil_chk(nl)) setValueWithId:name];
    [((RARELabelWidget *) nil_chk(sl)) setValueWithId:status];
  }
  if (count < len) {
    NSString *s = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStringWithNSString:@"bv.format.tap_to_see_more" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:count], [RAREUTStringCache valueOfWithInt:len] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    id<RAREiWidget> tapLabel = [fv getWidgetWithNSString:@"tapLabel"];
    [((id<RAREiWidget>) nil_chk(tapLabel)) setValueWithId:s];
  }
}

- (void)filterTableWithRARETableViewer:(RARETableViewer *)table
                          withNSString:(NSString *)filter {
  if (filter == nil) {
    if (categorizedMedsLoaded_) {
      categorizedMedsLoaded_ = NO;
      [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
    }
    else {
      if ([((RARETableViewer *) nil_chk(table)) isEmpty]) {
        [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
      }
      else {
        [table unfilter];
      }
    }
  }
  else if ([filter isEqual:cmedsCategoryID_]) {
    if (!categorizedMedsLoaded_) {
      categorizedMedsLoaded_ = YES;
      [self updateTableWithRARETableViewer:table withJavaUtilList:categorizedMeds_];
    }
  }
  else {
    if (categorizedMedsLoaded_ || [((RARETableViewer *) nil_chk(table)) isEmpty]) {
      categorizedMedsLoaded_ = NO;
      [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
    }
    else {
      [table unfilter];
    }
    [((RARETableViewer *) nil_chk(table)) filterWithInt:0 withNSString:filter withBoolean:NO];
  }
}

- (void)processDataWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  CCPBVActionPath *path = [CCPBVUtils getActionPathWithBoolean:YES];
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  @try {
    if ([((RARETableViewer *) nil_chk(table)) isDisposed]) {
      return;
    }
    int len = [((id<JavaUtilList>) nil_chk(rows)) size];
    RARERenderableDataItem *item, *row, *category;
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    NSString *name = nil;
    NSString *statusColor;
    RAREUIColor *statusColorC;
    NSString *s;
    RAREUIFont *defaultFont = nil;
    id<JavaUtilList> categories = [[JavaUtilArrayList alloc] init];
    JavaUtilHashSet *categorySet = [[JavaUtilHashSet alloc] init];
    id<RAREiPlatformIcon> icon = [RAREPlatform getResourceAsIconWithNSString:@"bv.icon.dash"];
    id<JavaUtilMap> orderStates = (id<JavaUtilMap>) check_protocol_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"pt_orderStates"], @protocol(JavaUtilMap));
    BOOL hasCC = hasClinicalCategories_;
    BOOL hasMeds = NO;
    if (orderStates != nil) {
      defaultFont = [table getFont];
    }
    BOOL cardstack = [CCPBVUtils isCardStack];
    for (int i = 0; i < len; i++) {
      row = [rows getWithInt:i];
      statusColor = nil;
      statusColorC = nil;
      if (([((RARERenderableDataItem *) nil_chk(row)) size] > CCPBVOrders_STATUS_COLUMN_)) {
        s = [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_STATUS_COLUMN_])) description];
        if ((s != nil) && (statusColors_ != nil)) {
          statusColor = [statusColors_ optStringWithNSString:s withNSString:nil];
          if (statusColor != nil) {
            statusColorC = [((RAREWindowViewer *) nil_chk(w)) getColorWithNSString:statusColor];
          }
        }
      }
      item = [row getWithInt:2];
      NSString *sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getValue], [NSString class]);
      if (((sig == nil) || ([sig sequenceLength] == 0)) && ([row size] > CCPBVOrders_SIG_COLUMN_)) {
        sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_SIG_COLUMN_])) getValue], [NSString class]);
        [item setValueWithId:sig];
        if (statusColorC != nil) {
          [item setForegroundWithRAREUIColor:statusColorC];
        }
      }
      item = [row getWithInt:1];
      name = [((RARERenderableDataItem *) nil_chk(item)) description];
      if (appendDirections_) {
        ca->_length_ = 0;
        (void) [ca appendWithNSString:@"<html>"];
        if (statusColor != nil) {
          (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"<font color='"])) appendWithNSString:statusColor])) appendWithNSString:@"'>"];
        }
        (void) [ca appendWithNSString:name];
        (void) [ca appendWithNSString:(statusColor == nil) ? startHtml_ : startHtmlSC_];
        (void) [ca appendWithNSString:sig];
        (void) [ca appendWithNSString:(statusColor == nil) ? endHtml_ : endHtmlSC_];
        if (statusColor != nil) {
          (void) [ca appendWithNSString:@"</font>"];
        }
        (void) [ca appendWithNSString:@"</html>"];
        if (cardstack) {
          [CCPBVCardStackUtils setItemTextWithRARERenderableDataItem:row withNSString:[ca description]];
        }
        else {
          [item setValueWithId:[ca description]];
        }
      }
      else if (statusColorC != nil) {
        [item setForegroundWithRAREUIColor:statusColorC];
      }
      NSString *type = [((RARERenderableDataItem *) nil_chk([row getWithInt:0])) description];
      if (!cardstack) {
        if (hasCC) {
          RARERenderableDataItem *cc = [row getWithInt:CCPBVOrders_CLINICAL_CATEGORY_POSITION];
          s = [((RARERenderableDataItem *) nil_chk(cc)) description];
          if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
            if ([((NSString *) nil_chk(medsCategoryID_)) isEqual:type]) {
              [cc setValueWithId:missingClinicalCategoryTitle_];
            }
          }
        }
        s = [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_CATEGORY_NAME_POSITION])) description];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          s = missingCategoryTitle_;
          [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_CATEGORY_NAME_POSITION])) setValueWithId:s];
        }
        if (![categorySet containsWithId:s]) {
          [categories addWithId:category = [[RARERenderableDataItem alloc] initWithNSString:s withId:type withRAREiPlatformIcon:icon]];
          [category setActionListenerWithRAREiActionListener:self];
          [categorySet addWithId:s];
        }
        if (orderStates != nil) {
          RARERenderableDataItem *item0 = [row getWithInt:0];
          id<JavaUtilMap> map = (id<JavaUtilMap>) check_protocol_cast([orderStates getWithId:type], @protocol(JavaUtilMap));
          RAREUIFont *strikeThrough = nil;
          if (map != nil) {
            JavaLangInteger *state = (JavaLangInteger *) check_class_cast([map getWithId:[((RARERenderableDataItem *) nil_chk(item0)) getLinkedData]], [JavaLangInteger class]);
            if ((state != nil) && ([state intValue] & 4) != 0) {
              if (defaultFont == nil) {
                defaultFont = [((RAREWindowViewer *) nil_chk(w)) getFont];
              }
              if (strikeThrough == nil) {
                strikeThrough = [((RAREUIFont *) nil_chk(defaultFont)) deriveStrikethrough];
              }
              [item setFontWithRAREUIFont:strikeThrough];
            }
          }
        }
      }
    }
    if (cardstack) {
      dataLoaded_ = YES;
      allOrders_ = rows;
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVOrders_$2 alloc] initWithCCPBVOrders:self withRARETableViewer:table]];
    }
    else {
      [JavaUtilCollections sortWithJavaUtilList:categories];
      allOrders_ = rows = [CCPBVUtils groupRowsWithRARETableViewer:table withJavaUtilList:rows withInt:CCPBVOrders_CATEGORY_NAME_POSITION withInt:-1 withBoolean:NO];
      if (hasClinicalCategories_) {
        RARERenderableDataItem *ivs = nil;
        RARERenderableDataItem *meds = nil;
        len = [((id<JavaUtilList>) nil_chk(rows)) size];
        for (int i = 0; i < len; i++) {
          row = [rows getWithInt:i];
          item = [((RARERenderableDataItem *) nil_chk(row)) getWithInt:0];
          item = [((RARERenderableDataItem *) nil_chk(item)) getWithInt:0];
          s = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(item)) getWithInt:0])) getValue], [NSString class]);
          if ([((NSString *) nil_chk(s)) isEqual:ivsCategoryID_]) {
            ivs = row;
          }
          else if ([s isEqual:medsCategoryID_]) {
            meds = [row getWithInt:0];
          }
        }
        if (meds != nil) {
          categorizedMeds_ = [CCPBVUtils groupRowsWithRARETableViewer:table withJavaUtilList:[meds getItems] withInt:CCPBVOrders_CLINICAL_CATEGORY_POSITION withInt:-1 withBoolean:NO];
          RARESubItemComparator *c = [[RARESubItemComparator alloc] init];
          [c setOptionsWithInt:0 withBoolean:NO];
          [JavaUtilCollections sortWithJavaUtilList:categorizedMeds_ withJavaUtilComparator:c];
        }
        if (ivs != nil) {
          if (categorizedMeds_ != nil) {
            [categorizedMeds_ addWithInt:0 withId:ivs];
          }
          else {
            categorizedMeds_ = [[JavaUtilArrayList alloc] initWithInt:1];
            [categorizedMeds_ addWithId:ivs];
          }
        }
        if (categorizedMeds_ != nil && [categorizedMeds_ isEmpty]) {
          categorizedMeds_ = nil;
        }
        if (categorizedMeds_ != nil) {
          [categories addWithInt:0 withId:category = [[RARERenderableDataItem alloc] initWithNSString:categorizedMedsTitle_ withId:cmedsCategoryID_ withRAREiPlatformIcon:icon]];
          [category setActionListenerWithRAREiActionListener:self];
        }
      }
      else {
        int pos = [RARERenderableDataItem findLinkedObjectIndexWithJavaUtilList:categories withId:medsCategoryID_];
        if (pos != -1) {
          category = [categories removeWithInt:pos];
          [categories addWithInt:0 withId:category];
          hasMeds = YES;
        }
      }
      [categories addWithInt:0 withId:category = [[RARERenderableDataItem alloc] initWithNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.all_orders"] withId:nil withRAREiPlatformIcon:icon]];
      [category setActionListenerWithRAREiActionListener:self];
      int selectedIndex;
      if (categorizedMeds_ != nil || hasMeds) {
        selectedIndex = 1;
      }
      else {
        selectedIndex = 0;
      }
      dataLoaded_ = YES;
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVOrders_$3 alloc] initWithCCPBVOrders:self withRARETableViewer:table withJavaUtilList:categories withInt:selectedIndex withCCPBVActionPath:path]];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
  @finally {
    [((RAREWindowViewer *) nil_chk(w)) hideWaitCursor];
  }
}

- (void)reset {
  [super reset];
  currentView_ = [CCPBVResultsViewEnum DOCUMENT];
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  categorizedMeds_ = nil;
  allOrders_ = nil;
  categorizedMedsLoaded_ = NO;
}

- (void)updateCategoriesWithRAREiFormViewer:(id<RAREiFormViewer>)fv
                           withJavaUtilList:(id<JavaUtilList>)categories
                                    withInt:(int)selectedIndex {
  RAREaWidget *cw = (RAREaWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"categories"], [RAREaWidget class]);
  if (cw != nil) {
    if (categories == nil || [categories isEmpty]) {
      [cw setEnabledWithBoolean:NO];
      [cw setValueWithId:nil];
    }
    else if ([cw isKindOfClass:[RAREaWidget class]]) {
      [cw setEnabledWithBoolean:YES];
      if (selectedIndex == -1) {
        selectedIndex = 0;
      }
      [cw addAllWithJavaUtilCollection:categories];
      if ([cw isKindOfClass:[RAREPushButtonWidget class]]) {
        RAREPushButtonWidget *pb = (RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class]);
        [pb setPopupScrollableWithBoolean:YES];
        [pb setSelectedIndexWithInt:selectedIndex];
      }
      else if ([cw conformsToProtocol: @protocol(RAREiListHandler)]) {
        [((id<RAREiListHandler>) check_protocol_cast(cw, @protocol(RAREiListHandler))) setSelectedIndexWithInt:selectedIndex];
      }
      RARERenderableDataItem *item = [categories getWithInt:selectedIndex];
      [self filterTableWithRARETableViewer:dataTable_ withNSString:(NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getLinkedData], [NSString class])];
    }
    [cw update];
  }
}

- (void)updateTableWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  [((RARETableViewer *) nil_chk(table)) clear];
  [table handleGroupedCollectionWithJavaUtilCollection:rows withBoolean:YES];
  [table finishedLoading];
}

- (void)clearFormWithRAREiContainer:(id<RAREiContainer>)fv {
  id<RAREiWidget> field;
  @try {
    field = [((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"documentDate"];
    if (field != nil) {
      [field clearContents];
    }
    field = [fv getWidgetWithNSString:@"documentTitle"];
    if (field != nil) {
      [field clearContents];
    }
    field = [fv getWidgetWithNSString:@"documentDetail"];
    if (field != nil) {
      [field clearContents];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)copyAllFieldsTo:(CCPBVOrders *)other {
  [super copyAllFieldsTo:other];
  other->allOrders_ = allOrders_;
  other->appendDirections_ = appendDirections_;
  other->categorizedMeds_ = categorizedMeds_;
  other->categorizedMedsLoaded_ = categorizedMedsLoaded_;
  other->categorizedMedsTitle_ = categorizedMedsTitle_;
  other->categorySortPosition_ = categorySortPosition_;
  other->cmedsCategoryID_ = cmedsCategoryID_;
  other->endHtml_ = endHtml_;
  other->endHtmlSC_ = endHtmlSC_;
  other->hasClinicalCategories_ = hasClinicalCategories_;
  other->includeIVsInCategorizedMeds_ = includeIVsInCategorizedMeds_;
  other->ivsCategoryID_ = ivsCategoryID_;
  other->medsCategoryID_ = medsCategoryID_;
  other->missingCategoryTitle_ = missingCategoryTitle_;
  other->missingClinicalCategoryTitle_ = missingClinicalCategoryTitle_;
  other->startHtml_ = startHtml_;
  other->startHtmlSC_ = startHtmlSC_;
  other->statusColors_ = statusColors_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "dataParsedWithRAREiWidget:withJavaUtilList:withRAREActionLink:", NULL, "V", 0x4, NULL },
    { "populateCardStackWithRAREiContainer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "filterTableWithRARETableViewer:withNSString:", NULL, "V", 0x4, NULL },
    { "processDataWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "reset", NULL, "V", 0x4, NULL },
    { "updateCategoriesWithRAREiFormViewer:withJavaUtilList:withInt:", NULL, "V", 0x4, NULL },
    { "updateTableWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "clearFormWithRAREiContainer:", NULL, "V", 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "CATEGORY_NAME_POSITION_", NULL, 0x19, "I" },
    { "CLINICAL_CATEGORY_POSITION_", NULL, 0x19, "I" },
    { "SIG_COLUMN_", NULL, 0x9, "I" },
    { "STATUS_COLUMN_", NULL, 0x9, "I" },
    { "SUMMARY_STATUS_COLUMN_", NULL, 0x9, "I" },
    { "categorySortPosition_", NULL, 0x4, "I" },
    { "hasClinicalCategories_", NULL, 0x4, "Z" },
    { "statusColors_", NULL, 0x4, "LRAREUTJSONObject" },
    { "endHtml_", NULL, 0x4, "LNSString" },
    { "startHtml_", NULL, 0x4, "LNSString" },
    { "endHtmlSC_", NULL, 0x4, "LNSString" },
    { "startHtmlSC_", NULL, 0x4, "LNSString" },
    { "appendDirections_", NULL, 0x4, "Z" },
    { "includeIVsInCategorizedMeds_", NULL, 0x4, "Z" },
    { "categorizedMedsTitle_", NULL, 0x4, "LNSString" },
    { "missingClinicalCategoryTitle_", NULL, 0x4, "LNSString" },
    { "missingCategoryTitle_", NULL, 0x4, "LNSString" },
    { "ivsCategoryID_", NULL, 0x4, "LNSString" },
    { "medsCategoryID_", NULL, 0x4, "LNSString" },
    { "cmedsCategoryID_", NULL, 0x4, "LNSString" },
    { "categorizedMeds_", NULL, 0x4, "LJavaUtilList" },
    { "categorizedMedsLoaded_", NULL, 0x4, "Z" },
    { "allOrders_", NULL, 0x4, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVOrders = { "Orders", "com.sparseware.bellavista", NULL, 0x1, 8, methods, 23, fields, 0, NULL};
  return &_CCPBVOrders;
}

@end
@implementation CCPBVOrders_OrdersStackActionListener

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  RAREStackPaneViewer *sp = [CCPBVCardStackUtils createListItemsOrPageViewerWithNSString:nil withRAREiContainer:[((RARETableViewer *) nil_chk(this$0_->dataTable_)) getFormViewer] withJavaUtilList:this$0_->allOrders_ withInt:-1 withInt:1 withRAREiActionListener:nil withBoolean:NO withBoolean:YES];
  [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:sp withBoolean:NO];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
  };
  static J2ObjcClassInfo _CCPBVOrders_OrdersStackActionListener = { "OrdersStackActionListener", "com.sparseware.bellavista", "Orders", 0x4, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVOrders_OrdersStackActionListener;
}

@end
@implementation CCPBVOrders_$1

- (void)run {
  [this$0_ processDataWithRARETableViewer:val$table_ withJavaUtilList:val$rows_];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0
         withJavaUtilList:(id<JavaUtilList>)capture$1 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$rows_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$rows_", NULL, 0x1012, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$1 = { "$1", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_CCPBVOrders_$1;
}

@end
@implementation CCPBVOrders_$2

- (void)run {
  [this$0_ updateTableWithRARETableViewer:val$table_ withJavaUtilList:this$0_->allOrders_];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0 {
  this$0_ = outer$;
  val$table_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$2 = { "$2", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVOrders_$2;
}

@end
@implementation CCPBVOrders_$3

- (void)run {
  if (![((RARETableViewer *) nil_chk(val$table_)) isDisposed]) {
    [this$0_ filterTableWithRARETableViewer:val$table_ withNSString:this$0_->categorizedMeds_ != nil ? this$0_->cmedsCategoryID_ : this$0_->medsCategoryID_];
    [this$0_ updateCategoriesWithRAREiFormViewer:[val$table_ getFormViewer] withJavaUtilList:val$categories_ withInt:val$selectedIndex_];
  }
  NSString *key = val$path_ == nil ? nil : [val$path_ shift];
  if (key != nil) {
    [this$0_ handlePathKeyWithRARETableViewer:val$table_ withNSString:key withInt:0 withBoolean:YES];
  }
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0
         withJavaUtilList:(id<JavaUtilList>)capture$1
                  withInt:(int)capture$2
      withCCPBVActionPath:(CCPBVActionPath *)capture$3 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$categories_ = capture$1;
  val$selectedIndex_ = capture$2;
  val$path_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$categories_", NULL, 0x1012, "LJavaUtilList" },
    { "val$selectedIndex_", NULL, 0x1012, "I" },
    { "val$path_", NULL, 0x1012, "LCCPBVActionPath" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$3 = { "$3", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 5, fields, 0, NULL};
  return &_CCPBVOrders_$3;
}

@end
