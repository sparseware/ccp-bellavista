//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Orders.java
//
//  Created by decoteaud on 12/1/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIAction.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIColorHelper.h"
#include "com/appnativa/rare/ui/UICompoundIcon.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIImageIcon.h"
#include "com/appnativa/rare/ui/UIMenuItem.h"
#include "com/appnativa/rare/ui/UIPopupMenu.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/iListHandler.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/widget/ComboBoxWidget.h"
#include "com/appnativa/rare/widget/LabelWidget.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/Document.h"
#include "com/sparseware/bellavista/OrderManager.h"
#include "com/sparseware/bellavista/Orders.h"
#include "com/sparseware/bellavista/ResultsView.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/aResultsManager.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation CCPBVOrders

static int CCPBVOrders_SIG_COLUMN_ = 10;
static int CCPBVOrders_STATUS_COLUMN_ = 8;
static int CCPBVOrders_SUMMARY_STATUS_COLUMN_ = 1;
static int CCPBVOrders_SIGNED_COLUMN_ = 16;
static int CCPBVOrders_FLAGGED_COLUMN_ = 17;
static BOOL CCPBVOrders_hasOrderDiscontinueSupport_;
static BOOL CCPBVOrders_hasOrderEntrySupport_;
static BOOL CCPBVOrders_hasOrderDictationSupport_;
static BOOL CCPBVOrders_hasOrderFlagSupport_;
static BOOL CCPBVOrders_hasOrderRewriteSupport_;
static BOOL CCPBVOrders_hasOrderHoldSupport_;
static BOOL CCPBVOrders_hasOrderSignSupport_;
static BOOL CCPBVOrders_hasOrderSentenceSupport_;
static BOOL CCPBVOrders_showActionWaitMessage_;
static BOOL CCPBVOrders_verifyOrderEntryCancel_;
static BOOL CCPBVOrders_verifyOrderEntryDelete_;
static BOOL CCPBVOrders_signatureRequiredForSumbission_;
static BOOL CCPBVOrders_showRequiredFieldsOnlyDefault_;
static id<JavaUtilList> CCPBVOrders_holdableStatus_;
static id<JavaUtilList> CCPBVOrders_stopableStatus_;
static NSString * CCPBVOrders_holdStatusValue_;
static NSString * CCPBVOrders_unholdStatusValue_;
static NSString * CCPBVOrders_defaultOrderType_;
static NSString * CCPBVOrders_medicationOrderType_;
static NSString * CCPBVOrders_defaultRoute_;
static NSString * CCPBVOrders_booleanFieldTrueValue_;
static NSString * CCPBVOrders_booleanFieldFalseValue_;
static NSString * CCPBVOrders_booleanFieldTrueDisplayValue_;
static NSString * CCPBVOrders_booleanFieldFalseDisplayValue_;
static RAREUTJSONObject * CCPBVOrders_statusColors_;
static NSString * CCPBVOrders_endHtml_;
static NSString * CCPBVOrders_startHtml_;
static NSString * CCPBVOrders_endHtmlSC_;
static NSString * CCPBVOrders_startHtmlSC_;
static id<RAREiPlatformIcon> CCPBVOrders_unsignedIcon_;
static id<RAREiPlatformIcon> CCPBVOrders_flaggedIcon_;
static id<RAREiPlatformIcon> CCPBVOrders_holdIcon_;
static id<RAREiPlatformIcon> CCPBVOrders_flaggedAndUnsignedIcon_;
static id<RAREiPlatformIcon> CCPBVOrders_flaggedAndHoldIcon_;
static RAREUIMenuItem * CCPBVOrders_holdItem_;
static RAREUIMenuItem * CCPBVOrders_flagItem_;
static RAREUIMenuItem * CCPBVOrders_unholdItem_;
static RAREUIMenuItem * CCPBVOrders_unflagItem_;

+ (int)CATEGORY_NAME_POSITION {
  return CCPBVOrders_CATEGORY_NAME_POSITION;
}

+ (int)CLINICAL_CATEGORY_POSITION {
  return CCPBVOrders_CLINICAL_CATEGORY_POSITION;
}

+ (int)SIG_COLUMN {
  return CCPBVOrders_SIG_COLUMN_;
}

+ (int *)SIG_COLUMNRef {
  return &CCPBVOrders_SIG_COLUMN_;
}

+ (int)STATUS_COLUMN {
  return CCPBVOrders_STATUS_COLUMN_;
}

+ (int *)STATUS_COLUMNRef {
  return &CCPBVOrders_STATUS_COLUMN_;
}

+ (int)SUMMARY_STATUS_COLUMN {
  return CCPBVOrders_SUMMARY_STATUS_COLUMN_;
}

+ (int *)SUMMARY_STATUS_COLUMNRef {
  return &CCPBVOrders_SUMMARY_STATUS_COLUMN_;
}

+ (int)SIGNED_COLUMN {
  return CCPBVOrders_SIGNED_COLUMN_;
}

+ (int *)SIGNED_COLUMNRef {
  return &CCPBVOrders_SIGNED_COLUMN_;
}

+ (int)FLAGGED_COLUMN {
  return CCPBVOrders_FLAGGED_COLUMN_;
}

+ (int *)FLAGGED_COLUMNRef {
  return &CCPBVOrders_FLAGGED_COLUMN_;
}

+ (char)FLAGGED_FLAG {
  return CCPBVOrders_FLAGGED_FLAG;
}

+ (char)UNSIGNED_FLAG {
  return CCPBVOrders_UNSIGNED_FLAG;
}

+ (char)HOLDABLE_FLAG {
  return CCPBVOrders_HOLDABLE_FLAG;
}

+ (char)ONHOLD_FLAG {
  return CCPBVOrders_ONHOLD_FLAG;
}

+ (char)STOPABLE_FLAG {
  return CCPBVOrders_STOPABLE_FLAG;
}

+ (char)STOPPED_FLAG {
  return CCPBVOrders_STOPPED_FLAG;
}

+ (char)REQUIRED_FLAG {
  return CCPBVOrders_REQUIRED_FLAG;
}

+ (BOOL)hasOrderDiscontinueSupport {
  return CCPBVOrders_hasOrderDiscontinueSupport_;
}

+ (BOOL *)hasOrderDiscontinueSupportRef {
  return &CCPBVOrders_hasOrderDiscontinueSupport_;
}

+ (BOOL)hasOrderEntrySupport {
  return CCPBVOrders_hasOrderEntrySupport_;
}

+ (BOOL *)hasOrderEntrySupportRef {
  return &CCPBVOrders_hasOrderEntrySupport_;
}

+ (BOOL)hasOrderDictationSupport {
  return CCPBVOrders_hasOrderDictationSupport_;
}

+ (BOOL *)hasOrderDictationSupportRef {
  return &CCPBVOrders_hasOrderDictationSupport_;
}

+ (BOOL)hasOrderFlagSupport {
  return CCPBVOrders_hasOrderFlagSupport_;
}

+ (BOOL *)hasOrderFlagSupportRef {
  return &CCPBVOrders_hasOrderFlagSupport_;
}

+ (BOOL)hasOrderRewriteSupport {
  return CCPBVOrders_hasOrderRewriteSupport_;
}

+ (BOOL *)hasOrderRewriteSupportRef {
  return &CCPBVOrders_hasOrderRewriteSupport_;
}

+ (BOOL)hasOrderHoldSupport {
  return CCPBVOrders_hasOrderHoldSupport_;
}

+ (BOOL *)hasOrderHoldSupportRef {
  return &CCPBVOrders_hasOrderHoldSupport_;
}

+ (BOOL)hasOrderSignSupport {
  return CCPBVOrders_hasOrderSignSupport_;
}

+ (BOOL *)hasOrderSignSupportRef {
  return &CCPBVOrders_hasOrderSignSupport_;
}

+ (BOOL)hasOrderSentenceSupport {
  return CCPBVOrders_hasOrderSentenceSupport_;
}

+ (BOOL *)hasOrderSentenceSupportRef {
  return &CCPBVOrders_hasOrderSentenceSupport_;
}

+ (BOOL)showActionWaitMessage {
  return CCPBVOrders_showActionWaitMessage_;
}

+ (BOOL *)showActionWaitMessageRef {
  return &CCPBVOrders_showActionWaitMessage_;
}

+ (BOOL)verifyOrderEntryCancel {
  return CCPBVOrders_verifyOrderEntryCancel_;
}

+ (BOOL *)verifyOrderEntryCancelRef {
  return &CCPBVOrders_verifyOrderEntryCancel_;
}

+ (BOOL)verifyOrderEntryDelete {
  return CCPBVOrders_verifyOrderEntryDelete_;
}

+ (BOOL *)verifyOrderEntryDeleteRef {
  return &CCPBVOrders_verifyOrderEntryDelete_;
}

+ (BOOL)signatureRequiredForSumbission {
  return CCPBVOrders_signatureRequiredForSumbission_;
}

+ (BOOL *)signatureRequiredForSumbissionRef {
  return &CCPBVOrders_signatureRequiredForSumbission_;
}

+ (BOOL)showRequiredFieldsOnlyDefault {
  return CCPBVOrders_showRequiredFieldsOnlyDefault_;
}

+ (BOOL *)showRequiredFieldsOnlyDefaultRef {
  return &CCPBVOrders_showRequiredFieldsOnlyDefault_;
}

+ (id<JavaUtilList>)holdableStatus {
  return CCPBVOrders_holdableStatus_;
}

+ (void)setHoldableStatus:(id<JavaUtilList>)holdableStatus {
  CCPBVOrders_holdableStatus_ = holdableStatus;
}

+ (id<JavaUtilList>)stopableStatus {
  return CCPBVOrders_stopableStatus_;
}

+ (void)setStopableStatus:(id<JavaUtilList>)stopableStatus {
  CCPBVOrders_stopableStatus_ = stopableStatus;
}

+ (NSString *)holdStatusValue {
  return CCPBVOrders_holdStatusValue_;
}

+ (void)setHoldStatusValue:(NSString *)holdStatusValue {
  CCPBVOrders_holdStatusValue_ = holdStatusValue;
}

+ (NSString *)unholdStatusValue {
  return CCPBVOrders_unholdStatusValue_;
}

+ (void)setUnholdStatusValue:(NSString *)unholdStatusValue {
  CCPBVOrders_unholdStatusValue_ = unholdStatusValue;
}

+ (NSString *)defaultOrderType {
  return CCPBVOrders_defaultOrderType_;
}

+ (void)setDefaultOrderType:(NSString *)defaultOrderType {
  CCPBVOrders_defaultOrderType_ = defaultOrderType;
}

+ (NSString *)medicationOrderType {
  return CCPBVOrders_medicationOrderType_;
}

+ (void)setMedicationOrderType:(NSString *)medicationOrderType {
  CCPBVOrders_medicationOrderType_ = medicationOrderType;
}

+ (NSString *)defaultRoute {
  return CCPBVOrders_defaultRoute_;
}

+ (void)setDefaultRoute:(NSString *)defaultRoute {
  CCPBVOrders_defaultRoute_ = defaultRoute;
}

+ (NSString *)booleanFieldTrueValue {
  return CCPBVOrders_booleanFieldTrueValue_;
}

+ (void)setBooleanFieldTrueValue:(NSString *)booleanFieldTrueValue {
  CCPBVOrders_booleanFieldTrueValue_ = booleanFieldTrueValue;
}

+ (NSString *)booleanFieldFalseValue {
  return CCPBVOrders_booleanFieldFalseValue_;
}

+ (void)setBooleanFieldFalseValue:(NSString *)booleanFieldFalseValue {
  CCPBVOrders_booleanFieldFalseValue_ = booleanFieldFalseValue;
}

+ (NSString *)booleanFieldTrueDisplayValue {
  return CCPBVOrders_booleanFieldTrueDisplayValue_;
}

+ (void)setBooleanFieldTrueDisplayValue:(NSString *)booleanFieldTrueDisplayValue {
  CCPBVOrders_booleanFieldTrueDisplayValue_ = booleanFieldTrueDisplayValue;
}

+ (NSString *)booleanFieldFalseDisplayValue {
  return CCPBVOrders_booleanFieldFalseDisplayValue_;
}

+ (void)setBooleanFieldFalseDisplayValue:(NSString *)booleanFieldFalseDisplayValue {
  CCPBVOrders_booleanFieldFalseDisplayValue_ = booleanFieldFalseDisplayValue;
}

+ (RAREUTJSONObject *)statusColors {
  return CCPBVOrders_statusColors_;
}

+ (void)setStatusColors:(RAREUTJSONObject *)statusColors {
  CCPBVOrders_statusColors_ = statusColors;
}

+ (NSString *)endHtml {
  return CCPBVOrders_endHtml_;
}

+ (void)setEndHtml:(NSString *)endHtml {
  CCPBVOrders_endHtml_ = endHtml;
}

+ (NSString *)startHtml {
  return CCPBVOrders_startHtml_;
}

+ (void)setStartHtml:(NSString *)startHtml {
  CCPBVOrders_startHtml_ = startHtml;
}

+ (NSString *)endHtmlSC {
  return CCPBVOrders_endHtmlSC_;
}

+ (void)setEndHtmlSC:(NSString *)endHtmlSC {
  CCPBVOrders_endHtmlSC_ = endHtmlSC;
}

+ (NSString *)startHtmlSC {
  return CCPBVOrders_startHtmlSC_;
}

+ (void)setStartHtmlSC:(NSString *)startHtmlSC {
  CCPBVOrders_startHtmlSC_ = startHtmlSC;
}

+ (id<RAREiPlatformIcon>)unsignedIcon {
  return CCPBVOrders_unsignedIcon_;
}

+ (void)setUnsignedIcon:(id<RAREiPlatformIcon>)unsignedIcon {
  CCPBVOrders_unsignedIcon_ = unsignedIcon;
}

+ (id<RAREiPlatformIcon>)flaggedIcon {
  return CCPBVOrders_flaggedIcon_;
}

+ (void)setFlaggedIcon:(id<RAREiPlatformIcon>)flaggedIcon {
  CCPBVOrders_flaggedIcon_ = flaggedIcon;
}

+ (id<RAREiPlatformIcon>)holdIcon {
  return CCPBVOrders_holdIcon_;
}

+ (void)setHoldIcon:(id<RAREiPlatformIcon>)holdIcon {
  CCPBVOrders_holdIcon_ = holdIcon;
}

+ (id<RAREiPlatformIcon>)flaggedAndUnsignedIcon {
  return CCPBVOrders_flaggedAndUnsignedIcon_;
}

+ (void)setFlaggedAndUnsignedIcon:(id<RAREiPlatformIcon>)flaggedAndUnsignedIcon {
  CCPBVOrders_flaggedAndUnsignedIcon_ = flaggedAndUnsignedIcon;
}

+ (id<RAREiPlatformIcon>)flaggedAndHoldIcon {
  return CCPBVOrders_flaggedAndHoldIcon_;
}

+ (void)setFlaggedAndHoldIcon:(id<RAREiPlatformIcon>)flaggedAndHoldIcon {
  CCPBVOrders_flaggedAndHoldIcon_ = flaggedAndHoldIcon;
}

+ (RAREUIMenuItem *)holdItem {
  return CCPBVOrders_holdItem_;
}

+ (void)setHoldItem:(RAREUIMenuItem *)holdItem {
  CCPBVOrders_holdItem_ = holdItem;
}

+ (RAREUIMenuItem *)flagItem {
  return CCPBVOrders_flagItem_;
}

+ (void)setFlagItem:(RAREUIMenuItem *)flagItem {
  CCPBVOrders_flagItem_ = flagItem;
}

+ (RAREUIMenuItem *)unholdItem {
  return CCPBVOrders_unholdItem_;
}

+ (void)setUnholdItem:(RAREUIMenuItem *)unholdItem {
  CCPBVOrders_unholdItem_ = unholdItem;
}

+ (RAREUIMenuItem *)unflagItem {
  return CCPBVOrders_unflagItem_;
}

+ (void)setUnflagItem:(RAREUIMenuItem *)unflagItem {
  CCPBVOrders_unflagItem_ = unflagItem;
}

- (id)init {
  if (self = [super initWithNSString:@"orders" withNSString:@"Orders"]) {
    categorySortPosition_ = -1;
    cmedsCategoryID_ = @"_c_meds_";
    BOOL cardstack = [CCPBVUtils isCardStack];
    currentView_ = [CCPBVResultsViewEnum DOCUMENT];
    RAREUTJSONObject *info = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"ordersInfo"], [RAREUTJSONObject class]);
    hasClinicalCategories_ = cardstack ? NO : [((RAREUTJSONObject *) nil_chk(info)) optBooleanWithNSString:@"hasClinicalCategories" withBoolean:NO];
    includeIVsInCategorizedMeds_ = [((RAREUTJSONObject *) nil_chk(info)) optBooleanWithNSString:@"includeIVsInCategorizedMeds" withBoolean:YES];
    categorizedMedsTitle_ = [info optStringWithNSString:@"categorizedMedsTitle" withNSString:@"Medications (Categorized)"];
    missingClinicalCategoryTitle_ = [info optStringWithNSString:@"missingClinicalCategoryTitle" withNSString:@"unclassified medications"];
    missingCategoryTitle_ = [info optStringWithNSString:@"missingCategoryTitle" withNSString:@"Misc. Orders"];
    medsCategoryID_ = [info optStringWithNSString:@"medsCategoryID" withNSString:@"meds"];
    ivsCategoryID_ = [info optStringWithNSString:@"ivsCategoryID" withNSString:@"ivs"];
  }
  return self;
}

+ (void)setupEnvironmentWithRAREWindowViewer:(RAREWindowViewer *)w {
  RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"ordersInfo"], [RAREUTJSONObject class]);
  CCPBVOrders_hasOrderDiscontinueSupport_ = [((RAREUTJSONObject *) nil_chk(o)) optBooleanWithNSString:@"hasOrderDiscontinueSupport"];
  CCPBVOrders_hasOrderEntrySupport_ = [o optBooleanWithNSString:@"hasOrderEntrySupport"];
  CCPBVOrders_hasOrderDictationSupport_ = [o optBooleanWithNSString:@"hasOrderDictationSupport"];
  CCPBVOrders_hasOrderRewriteSupport_ = [o optBooleanWithNSString:@"hasOrderRewriteSupport"];
  CCPBVOrders_hasOrderFlagSupport_ = [o optBooleanWithNSString:@"hasOrderFlagSupport"];
  CCPBVOrders_hasOrderHoldSupport_ = [o optBooleanWithNSString:@"hasOrderHoldSupport"];
  CCPBVOrders_hasOrderSignSupport_ = [o optBooleanWithNSString:@"hasOrderSignSupport"];
  CCPBVOrders_hasOrderSentenceSupport_ = [o optBooleanWithNSString:@"hasOrderSentenceSupport"];
  CCPBVOrders_showActionWaitMessage_ = [o optBooleanWithNSString:@"showActionWaitMessage"];
  CCPBVOrders_verifyOrderEntryCancel_ = [o optBooleanWithNSString:@"verifyOrderEntryCancel"];
  CCPBVOrders_verifyOrderEntryDelete_ = [o optBooleanWithNSString:@"verifyOrderEntryDelete"];
  CCPBVOrders_signatureRequiredForSumbission_ = [o optBooleanWithNSString:@"signatureRequiredForSumbission"];
  CCPBVOrders_showRequiredFieldsOnlyDefault_ = [o optBooleanWithNSString:@"showRequiredFieldsOnlyDefault"];
  CCPBVOrders_holdStatusValue_ = [o optStringWithNSString:@"holdStatusValue" withNSString:@"Hold"];
  CCPBVOrders_unholdStatusValue_ = [o optStringWithNSString:@"unholdStatusValue" withNSString:@"Unhold"];
  CCPBVOrders_defaultOrderType_ = [o optStringWithNSString:@"defaultOrderType" withNSString:@""];
  CCPBVOrders_medicationOrderType_ = [o optStringWithNSString:@"medicationOrderType" withNSString:@""];
  CCPBVOrders_defaultRoute_ = [o optStringWithNSString:@"defaultRoute" withNSString:@""];
  RAREUTJSONArray *a = [o optJSONArrayWithNSString:@"holdableStatus"];
  CCPBVOrders_holdableStatus_ = (a != nil) ? [a getObjectList] : [JavaUtilCollections EMPTY_LIST];
  a = [o optJSONArrayWithNSString:@"stopableStatus"];
  CCPBVOrders_stopableStatus_ = (a != nil) ? [a getObjectList] : [JavaUtilCollections EMPTY_LIST];
  RAREUTJSONObject *bo = [o getJSONObjectWithNSString:@"booleanFieldTypeInfo"];
  CCPBVOrders_booleanFieldTrueValue_ = [((RAREUTJSONObject *) nil_chk(bo)) optStringWithNSString:@"trueValue" withNSString:@"true"];
  CCPBVOrders_booleanFieldFalseValue_ = [bo optStringWithNSString:@"falseValue" withNSString:@"false"];
  CCPBVOrders_booleanFieldTrueDisplayValue_ = [bo optStringWithNSString:@"trueDisplayValue" withNSString:CCPBVOrders_booleanFieldTrueValue_];
  CCPBVOrders_booleanFieldFalseDisplayValue_ = [bo optStringWithNSString:@"falseDisplayValue" withNSString:CCPBVOrders_booleanFieldFalseValue_];
  CCPBVOrders_booleanFieldTrueDisplayValue_ = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) expandStringWithNSString:CCPBVOrders_booleanFieldTrueDisplayValue_];
  CCPBVOrders_booleanFieldFalseDisplayValue_ = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) expandStringWithNSString:CCPBVOrders_booleanFieldFalseDisplayValue_];
  CCPBVOrders_statusColors_ = [o optJSONObjectWithNSString:@"statusColors"];
  if ([CCPBVUtils isCardStack]) {
    CCPBVOrders_startHtml_ = [o optStringWithNSString:@"csDirectionsHtmlStart" withNSString:nil];
    CCPBVOrders_endHtml_ = [o optStringWithNSString:@"csDirectionsHtmlEnd" withNSString:nil];
  }
  if (CCPBVOrders_startHtml_ == nil) {
    CCPBVOrders_startHtml_ = [o optStringWithNSString:@"directionsHtmlStart" withNSString:@""];
  }
  if (CCPBVOrders_endHtml_ == nil) {
    CCPBVOrders_endHtml_ = [o optStringWithNSString:@"directionsHtmlEnd" withNSString:@""];
  }
  CCPBVOrders_startHtmlSC_ = [o optStringWithNSString:@"csDirectionsStatusColorHtmlStart" withNSString:nil];
  if (CCPBVOrders_startHtmlSC_ == nil) {
    CCPBVOrders_startHtmlSC_ = [o optStringWithNSString:@"directionsStatusColorHtmlStart" withNSString:CCPBVOrders_startHtml_];
  }
  CCPBVOrders_endHtmlSC_ = [o optStringWithNSString:@"csDirectionsStatusColorHtmlEnd" withNSString:nil];
  if (CCPBVOrders_endHtmlSC_ == nil) {
    CCPBVOrders_endHtmlSC_ = [o optStringWithNSString:@"directionsStatusColorHtmlEnd" withNSString:CCPBVOrders_endHtml_];
  }
  if (CCPBVOrders_startHtml_ == nil) {
    CCPBVOrders_startHtml_ = @"";
  }
  if (CCPBVOrders_endHtml_ == nil) {
    CCPBVOrders_endHtml_ = @"";
  }
  id<RAREiPlatformAppContext> app = [RAREPlatform getAppContext];
  NSString *s;
  if (CCPBVOrders_hasOrderHoldSupport_) {
    CCPBVOrders_holdItem_ = [[RAREUIMenuItem alloc] initWithRAREUIAction:[((id<RAREiPlatformAppContext>) nil_chk(app)) getActionWithNSString:s = @"bv.action.order_hold"]];
    [CCPBVOrders_holdItem_ setNameWithNSString:s];
    CCPBVOrders_unholdItem_ = [[RAREUIMenuItem alloc] initWithRAREUIAction:[app getActionWithNSString:s = @"bv.action.order_unhold"]];
    [CCPBVOrders_unholdItem_ setNameWithNSString:s];
    [CCPBVOrders_holdItem_ setDisposableWithBoolean:NO];
    [CCPBVOrders_unholdItem_ setDisposableWithBoolean:NO];
  }
  CCPBVOrders_flaggedIcon_ = [((id<RAREiPlatformAppContext>) nil_chk(app)) getResourceAsIconWithNSString:@"bv.icon.order_flagged"];
  CCPBVOrders_unsignedIcon_ = [app getResourceAsIconWithNSString:@"bv.icon.order_unsigned"];
  RAREUICompoundIcon *ic = [[RAREUICompoundIcon alloc] initWithRAREiPlatformIcon:CCPBVOrders_flaggedIcon_ withRAREiPlatformIcon:CCPBVOrders_unsignedIcon_];
  [ic alignSideBySideWithBoolean:NO withInt:[RAREUIScreen PLATFORM_PIXELS_2] withBoolean:NO];
  CCPBVOrders_flaggedAndUnsignedIcon_ = ic;
  CCPBVOrders_holdIcon_ = [app getResourceAsIconWithNSString:@"bv.icon.order_hold"];
  ic = [[RAREUICompoundIcon alloc] initWithRAREiPlatformIcon:CCPBVOrders_flaggedIcon_ withRAREiPlatformIcon:CCPBVOrders_holdIcon_];
  [ic alignSideBySideWithBoolean:NO withInt:[RAREUIScreen PLATFORM_PIXELS_2] withBoolean:NO];
  CCPBVOrders_flaggedAndHoldIcon_ = ic;
  if (CCPBVOrders_hasOrderFlagSupport_) {
    CCPBVOrders_flagItem_ = [[RAREUIMenuItem alloc] initWithRAREUIAction:[app getActionWithNSString:s = @"bv.action.order_flag"]];
    [CCPBVOrders_flagItem_ setNameWithNSString:s];
    CCPBVOrders_unflagItem_ = [[RAREUIMenuItem alloc] initWithRAREUIAction:[app getActionWithNSString:s = @"bv.action.order_unflag"]];
    [CCPBVOrders_unflagItem_ setNameWithNSString:s];
    [CCPBVOrders_flagItem_ setDisposableWithBoolean:NO];
    [CCPBVOrders_unflagItem_ setDisposableWithBoolean:NO];
  }
}

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  id<RAREiWidget> cw = [((RAREActionEvent *) nil_chk(e)) getWidget];
  RARERenderableDataItem *item = nil;
  if ([(id) cw isKindOfClass:[RAREPushButtonWidget class]]) {
    item = [((RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class])) getSelectedItem];
  }
  else if ([(id) cw isKindOfClass:[RAREComboBoxWidget class]]) {
    item = [((RAREComboBoxWidget *) check_class_cast(cw, [RAREComboBoxWidget class])) getSelectedItem];
  }
  if (item != nil) {
    NSString *cat = (NSString *) check_class_cast([item getLinkedData], [NSString class]);
    [self filterTableWithRARETableViewer:dataTable_ withNSString:cat];
  }
}

- (BOOL)isHoldableWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  if (CCPBVOrders_holdableStatus_ != nil) {
    return [CCPBVOrders_holdableStatus_ indexOfWithId:[nil_chk([((RARERenderableDataItem *) nil_chk(row)) getCustomPropertyWithId:[JavaLangInteger valueOfWithInt:CCPBVOrders_STATUS_COLUMN_]]) description]] != -1;
  }
  return YES;
}

- (BOOL)needsSigningWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  if (CCPBVOrders_holdableStatus_ != nil) {
    return [CCPBVOrders_holdableStatus_ indexOfWithId:[nil_chk([((RARERenderableDataItem *) nil_chk(row)) getCustomPropertyWithId:[JavaLangInteger valueOfWithInt:CCPBVOrders_STATUS_COLUMN_]]) description]] != -1;
  }
  return YES;
}

- (void)onCreatedWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  lastOrderActionTime_ = [CCPBVOrderManager getLastOrderActionTtime];
  if ([CCPBVUtils isCardStack]) {
    id<RAREiContainer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
    id<RAREiContainer> itemsForm = (id<RAREiContainer>) check_protocol_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"itemsForm"], @protocol(RAREiContainer));
    [CCPBVCardStackUtils setViewerTitleWithRAREiViewer:fv withNSString:[fv getTitle] withNSString:[((id<RAREiContainer>) nil_chk(itemsForm)) getTitle]];
  }
}

- (void)onConfigureWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)onDisposeWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [super onDisposeWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  categorizedMeds_ = nil;
  allOrders_ = nil;
  if (loadedDocument_ != nil) {
    [loadedDocument_ dispose];
    loadedDocument_ = nil;
  }
}

- (void)onTableShownWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  long long int time = [CCPBVOrderManager getLastOrderActionTtime];
  if (time > lastOrderActionTime_) {
    [self reloadTableDataWithRARETableViewer:(RARETableViewer *) check_class_cast(widget, [RARETableViewer class])];
  }
  lastOrderActionTime_ = time;
}

- (void)onTableHiddenWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget
          withJavaUtilEventObject:(JavaUtilEventObject *)event {
  lastOrderActionTime_ = [CCPBVOrderManager getLastOrderActionTtime];
}

- (void)onFinishedLoadingWithNSString:(NSString *)eventName
                      withRAREiWidget:(id<RAREiWidget>)widget
              withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ([CCPBVUtils isCardStack]) {
    RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
    id<RAREiFormViewer> fv = [((RARETableViewer *) nil_chk(table)) getFormViewer];
    [self populateCardStackWithRAREiContainer:fv withJavaUtilList:table];
    [CCPBVCardStackUtils setViewerActionWithRAREiViewer:fv withId:[[CCPBVOrders_OrdersStackActionListener alloc] initWithCCPBVOrders:self] withBoolean:YES];
    [CCPBVCardStackUtils switchToViewerWithRAREiViewer:[table getParent]];
    [CCPBVCardStackUtils updateTitleWithRAREiViewer:fv withBoolean:NO];
  }
}

- (void)onPopupMenuWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  int index = [((RARETableViewer *) nil_chk(table)) getContextMenuIndex];
  RARERenderableDataItem *row = [table getWithInt:index];
  int status = [((RARERenderableDataItem *) nil_chk(row)) getUserStateFlags];
  RAREUIPopupMenu *menu = (RAREUIPopupMenu *) check_class_cast([((JavaUtilEventObject *) nil_chk(event)) getSource], [RAREUIPopupMenu class]);
  RAREUIMenuItem *mi;
  int n;
  id<RAREiPlatformAppContext> app = [RAREPlatform getAppContext];
  BOOL valid = [((RARERenderableDataItem *) nil_chk([row getWithInt:0])) getLinkedData] != nil;
  [((RAREUIAction *) nil_chk([((id<RAREiPlatformAppContext>) nil_chk(app)) getActionWithNSString:@"bv.action.order_sign"])) setEnabledWithBoolean:valid && CCPBVOrders_hasOrderSignSupport_ && (status & CCPBVOrders_UNSIGNED_FLAG) != 0];
  [((RAREUIAction *) nil_chk([app getActionWithNSString:@"bv.action.order_discontinue"])) setEnabledWithBoolean:valid && CCPBVOrders_hasOrderDiscontinueSupport_ && (status & CCPBVOrders_STOPABLE_FLAG) != 0 && (status & CCPBVOrders_STOPPED_FLAG) == 0];
  [((RAREUIAction *) nil_chk([app getActionWithNSString:@"bv.action.order_new"])) setEnabledWithBoolean:valid && CCPBVOrders_hasOrderEntrySupport_];
  [((RAREUIAction *) nil_chk([app getActionWithNSString:@"bv.action.order_rewrite"])) setEnabledWithBoolean:valid && CCPBVOrders_hasOrderRewriteSupport_];
  if (CCPBVOrders_hasOrderFlagSupport_) {
    mi = [((RAREUIPopupMenu *) nil_chk(menu)) getMenuItemWithNSString:@"bv.action.order_flag"];
    if (mi == nil) {
      mi = [menu getMenuItemWithNSString:@"bv.action.order_unflag"];
    }
    if (mi != nil) {
      n = [menu indexOfWithId:mi];
      if ((status & CCPBVOrders_FLAGGED_FLAG) != 0) {
        mi = CCPBVOrders_unflagItem_;
      }
      else {
        mi = CCPBVOrders_flagItem_;
      }
      [((RAREUIAction *) nil_chk([((RAREUIMenuItem *) nil_chk(mi)) getAction])) setEnabledWithBoolean:valid && (status & CCPBVOrders_STOPPED_FLAG) == 0];
      (void) [menu setWithInt:n withId:mi];
    }
  }
  else {
    [((RAREUIAction *) nil_chk([app getActionWithNSString:@"bv.action.order_flag"])) setEnabledWithBoolean:NO];
  }
  if (CCPBVOrders_hasOrderHoldSupport_) {
    mi = [((RAREUIPopupMenu *) nil_chk(menu)) getMenuItemWithNSString:@"bv.action.order_hold"];
    if (mi == nil) {
      mi = [menu getMenuItemWithNSString:@"bv.action.order_unhold"];
    }
    if (mi != nil) {
      n = [menu indexOfWithId:mi];
      if ((status & CCPBVOrders_ONHOLD_FLAG) != 0) {
        mi = CCPBVOrders_unholdItem_;
      }
      else {
        mi = CCPBVOrders_holdItem_;
      }
      if ((status & CCPBVOrders_UNSIGNED_FLAG) != 0) {
        [((RAREUIAction *) nil_chk([((RAREUIMenuItem *) nil_chk(mi)) getAction])) setEnabledWithBoolean:NO];
      }
      else {
        [((RAREUIAction *) nil_chk([((RAREUIMenuItem *) nil_chk(mi)) getAction])) setEnabledWithBoolean:valid && (status & CCPBVOrders_STOPPED_FLAG) == 0];
      }
      (void) [menu setWithInt:n withId:mi];
    }
  }
  else {
    [((RAREUIAction *) nil_chk([app getActionWithNSString:@"bv.action.order_hold"])) setEnabledWithBoolean:NO];
  }
}

- (void)onSummaryTableActionWithNSString:(NSString *)eventName
                         withRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *key = [((RARETableViewer *) check_class_cast(widget, [RARETableViewer class])) getSelectionDataAsStringWithInt:0];
  CCPBVActionPath *path = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"orders", key } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  [CCPBVUtils handleActionPathWithCCPBVActionPath:path];
}

- (void)onTableActionWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget
          withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  RARERenderableDataItem *row = [((RARETableViewer *) nil_chk(table)) getSelectedItem];
  NSString *id_ = (row == nil) ? nil : (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:0])) getLinkedData], [NSString class]);
  id<RAREiFormViewer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  if (id_ == nil) {
    id<RAREiContainer> dv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"documentViewer"], @protocol(RAREiContainer));
    [self clearFormWithRAREiContainer:(dv == nil) ? ((id) fv) : ((id) dv)];
    return;
  }
  if ([self hasDocumentLoadedWithNSString:id_ withRAREiContainer:fv]) {
    return;
  }
  if (loadedDocument_ != nil) {
    [loadedDocument_ dispose];
  }
  id o = [((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:3])) getValue];
  JavaUtilDate *date = ([o isKindOfClass:[JavaUtilDate class]]) ? (JavaUtilDate *) check_class_cast(o, [JavaUtilDate class]) : nil;
  @try {
    NSString *order = [nil_chk([((RARERenderableDataItem *) nil_chk([row getWithInt:1])) getValue]) description];
    JavaNetURL *url = [table getURLWithNSString:[NSString stringWithFormat:@"order/%@.html", id_]];
    CCPBVDocument *doc = [[CCPBVDocument alloc] initWithRAREiWidget:table withRAREActionLink:[[RAREActionLink alloc] initWithJavaNetURL:url] withNSString:id_];
    loadedDocument_ = doc;
    [doc setMainDocumentInfoWithJavaUtilDate:date withNSString:order];
    id<RAREiContainer> dv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"documentViewer"], @protocol(RAREiContainer));
    if (dv == nil) {
      RAREActionLink *link = [[RAREActionLink alloc] initWithRAREiWidget:fv withNSString:@"/document_viewer.rml"];
      [link setTargetNameWithNSString:[RAREiTarget TARGET_WORKSPACE]];
      [doc loadAndPopulateViewerWithRAREActionLink:link];
    }
    else {
      [doc loadAndPopulateViewerWithRAREiContainer:dv];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)clearFormWithRAREiContainer:(id<RAREiContainer>)fv {
  id<RAREiWidget> field;
  @try {
    field = [((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"documentDate"];
    if (field != nil) {
      [field clearContents];
    }
    field = [fv getWidgetWithNSString:@"documentTitle"];
    if (field != nil) {
      [field clearContents];
    }
    field = [fv getWidgetWithNSString:@"documentDetail"];
    if (field != nil) {
      [field clearContents];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
  if (loadedDocument_ != nil) {
    [loadedDocument_ dispose];
    loadedDocument_ = nil;
  }
}

- (void)dataParsedWithRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilList:(id<JavaUtilList>)rows
               withRAREActionLink:(RAREActionLink *)link {
  originalRows_ = rows;
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  appendDirections_ = ([((RARETableViewer *) nil_chk(table)) getColumnCount] < 3) || ([((RAREColumn *) nil_chk([table getColumnWithInt:2])) getRenderDetail] == [RAREColumn_RenderDetailEnum ICON_ONLY]);
  [table setWidgetDataLinkWithRAREActionLink:link];
  hasNoData_ = NO;
  categorizedMeds_ = nil;
  if ([self checkAndHandleNoDataWithRARETableViewer:table withJavaUtilList:rows]) {
    if ([CCPBVUtils isCardStack]) {
      RARELabelWidget *tapLabel = (RARELabelWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk([table getFormViewer])) getWidgetWithNSString:@"tapLabel"], [RARELabelWidget class]);
      [((RARELabelWidget *) nil_chk(tapLabel)) setValueWithId:[RAREPlatform getResourceAsStringWithNSString:[NSString stringWithFormat:@"bv.text.no_%@", namePrefix_]]];
      [tapLabel setVerticalAlignmentWithRARERenderableDataItem_VerticalAlignEnum:[RARERenderableDataItem_VerticalAlignEnum CENTER]];
    }
    else {
      [self updateCategoriesWithRAREiFormViewer:[table getFormViewer] withJavaUtilList:nil withInt:-1];
    }
    return;
  }
  [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) showWaitCursor];
  (void) [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVOrders_$1 alloc] initWithCCPBVOrders:self withRARETableViewer:table withJavaUtilList:rows]];
}

- (void)filterTableWithRARETableViewer:(RARETableViewer *)table
                          withNSString:(NSString *)filter {
  if (filter == nil) {
    if (categorizedMedsLoaded_) {
      categorizedMedsLoaded_ = NO;
      [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
    }
    else {
      if ([((RARETableViewer *) nil_chk(table)) isEmpty]) {
        [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
      }
      else {
        [table unfilter];
      }
    }
  }
  else if ([filter isEqual:cmedsCategoryID_]) {
    if (!categorizedMedsLoaded_) {
      categorizedMedsLoaded_ = YES;
      [self updateTableWithRARETableViewer:table withJavaUtilList:categorizedMeds_];
    }
  }
  else {
    if (categorizedMedsLoaded_ || [((RARETableViewer *) nil_chk(table)) isEmpty]) {
      categorizedMedsLoaded_ = NO;
      [self updateTableWithRARETableViewer:table withJavaUtilList:allOrders_];
    }
    else {
      [table unfilter];
    }
    [((RARETableViewer *) nil_chk(table)) filterWithInt:0 withNSString:filter withBoolean:NO];
  }
}

- (void)populateCardStackWithRAREiContainer:(id<RAREiContainer>)fv
                           withJavaUtilList:(id<JavaUtilList>)rows {
  int len = [((id<JavaUtilList>) nil_chk(rows)) size];
  id<RAREiContainer> itemsForm = (id<RAREiContainer>) check_protocol_cast([((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"itemsForm"], @protocol(RAREiContainer));
  int count = [JavaLangMath minWithInt:[((id<RAREiContainer>) nil_chk(itemsForm)) getWidgetCount] / 2 withInt:len];
  int n = 0;
  for (int i = 0; i < count; i++) {
    RARERenderableDataItem *row = [rows getWithInt:i];
    RARERenderableDataItem *name = [((RARERenderableDataItem *) nil_chk(row)) getWithInt:[CCPBVaResultsManager NAME_POSITION]];
    RARERenderableDataItem *item = [row getItemExWithInt:CCPBVOrders_STATUS_COLUMN_];
    NSString *status = (item == nil) ? @"" : [item description];
    RARELabelWidget *nl = (RARELabelWidget *) check_class_cast([itemsForm getWidgetWithInt:n++], [RARELabelWidget class]);
    RARELabelWidget *sl = (RARELabelWidget *) check_class_cast([itemsForm getWidgetWithInt:n++], [RARELabelWidget class]);
    if ([((RARERenderableDataItem *) nil_chk(name)) getForeground] != nil) {
      [((RARELabelWidget *) nil_chk(nl)) setForegroundWithRAREUIColor:[name getForeground]];
      [((RARELabelWidget *) nil_chk(sl)) setForegroundWithRAREUIColor:[name getForeground]];
    }
    [((RARELabelWidget *) nil_chk(nl)) setValueWithId:name];
    [((RARELabelWidget *) nil_chk(sl)) setValueWithId:status];
  }
  if (count < len) {
    NSString *s = [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStringWithNSString:@"bv.format.tap_to_see_more" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:count], [RAREUTStringCache valueOfWithInt:len] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    id<RAREiWidget> tapLabel = [fv getWidgetWithNSString:@"tapLabel"];
    [((id<RAREiWidget>) nil_chk(tapLabel)) setValueWithId:s];
  }
}

- (void)processDataWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  CCPBVActionPath *path = [CCPBVUtils getActionPathWithBoolean:YES];
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  categorizedMeds_ = nil;
  allOrders_ = nil;
  categorizedMedsLoaded_ = NO;
  @try {
    if ([((RARETableViewer *) nil_chk(table)) isDisposed]) {
      return;
    }
    int len = [((id<JavaUtilList>) nil_chk(rows)) size];
    RARERenderableDataItem *row, *category;
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    NSString *name = nil;
    NSString *statusColor;
    NSString *s;
    id<JavaUtilList> categories = [[JavaUtilArrayList alloc] init];
    JavaUtilHashSet *categorySet = [[JavaUtilHashSet alloc] init];
    id<RAREiPlatformIcon> icon = [RAREPlatform getResourceAsIconWithNSString:@"bv.icon.dash"];
    id<JavaUtilMap> orderStatuses = [CCPBVOrderManager getOrderStatusesWithBoolean:NO];
    BOOL hasCC = hasClinicalCategories_;
    BOOL hasMeds = NO;
    RAREUIFont *strikeThrough = nil;
    BOOL cardstack = [CCPBVUtils isCardStack];
    int rowSize;
    int istatus;
    RAREUTJSONObject *order;
    RAREUTJSONObject *demo = [CCPBVOrderManager getDemoOrderObjectWithBoolean:NO];
    for (int i = 0; i < len; i++) {
      row = [rows getWithInt:i];
      rowSize = [((RARERenderableDataItem *) nil_chk(row)) size];
      statusColor = nil;
      istatus = -1;
      RARERenderableDataItem *item0 = [row getWithInt:0];
      RARERenderableDataItem *item1 = [row getWithInt:1];
      RARERenderableDataItem *item2 = [row getWithInt:2];
      NSString *orderID = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item0)) getLinkedData], [NSString class]);
      NSString *status = nil;
      order = (demo == nil) ? nil : [demo getJSONObjectWithNSString:orderID];
      if (([row size] > CCPBVOrders_STATUS_COLUMN_)) {
        s = [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_STATUS_COLUMN_])) description];
        if ((s != nil) && (CCPBVOrders_statusColors_ != nil)) {
          statusColor = [CCPBVOrders_statusColors_ optStringWithNSString:s withNSString:nil];
        }
        status = s;
      }
      if (!cardstack) {
        if (order != nil) {
          istatus = [CCPBVOrderManager getDemoOrderStatusWithRAREUTJSONObject:order];
        }
        if (istatus == -1) {
          istatus = 0;
          if ((rowSize > CCPBVOrders_SIGNED_COLUMN_) && [@"false" isEqual:[((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_SIGNED_COLUMN_])) description]]) {
            istatus |= CCPBVOrders_UNSIGNED_FLAG;
            if ((statusColor == nil) && (CCPBVOrders_statusColors_ != nil)) {
              statusColor = [CCPBVOrders_statusColors_ optStringWithNSString:@"Unsigned" withNSString:nil];
            }
          }
          if ((rowSize > CCPBVOrders_FLAGGED_COLUMN_) && [@"true" isEqual:[((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_FLAGGED_COLUMN_])) description]]) {
            istatus |= CCPBVOrders_FLAGGED_FLAG;
            if ((statusColor == nil) && (CCPBVOrders_statusColors_ != nil)) {
              statusColor = [CCPBVOrders_statusColors_ optStringWithNSString:@"Flagged" withNSString:nil];
            }
          }
          if (status != nil) {
            if ([((id<JavaUtilList>) nil_chk(CCPBVOrders_holdableStatus_)) indexOfWithId:status] != -1) {
              if ((istatus & CCPBVOrders_UNSIGNED_FLAG) == 0 || ([CCPBVOrders_holdableStatus_ indexOfWithId:@"Unsigned"] != -1)) {
                istatus |= CCPBVOrders_HOLDABLE_FLAG;
              }
            }
            if ([((id<JavaUtilList>) nil_chk(CCPBVOrders_stopableStatus_)) indexOfWithId:status] != -1) {
              istatus |= CCPBVOrders_STOPABLE_FLAG;
            }
            if ([status isEqual:CCPBVOrders_holdableStatus_]) {
              istatus |= CCPBVOrders_ONHOLD_FLAG;
            }
          }
        }
        [CCPBVOrders updateStatusIconWithRARERenderableDataItem:row withRARERenderableDataItem:item0 withInt:istatus];
      }
      NSString *sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item2)) getValue], [NSString class]);
      if (((sig == nil) || ([sig sequenceLength] == 0)) && (rowSize > CCPBVOrders_SIG_COLUMN_)) {
        sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_SIG_COLUMN_])) getValue], [NSString class]);
        [item2 setValueWithId:sig];
      }
      name = [((RARERenderableDataItem *) nil_chk(item1)) description];
      if (appendDirections_) {
        ca->_length_ = 0;
        (void) [ca appendWithNSString:@"<html>"];
        if (statusColor != nil) {
          (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"<font color='"])) appendWithNSString:statusColor])) appendWithNSString:@"'>"];
        }
        (void) [ca appendWithNSString:name];
        (void) [ca appendWithNSString:(statusColor == nil) ? CCPBVOrders_startHtml_ : CCPBVOrders_startHtmlSC_];
        (void) [ca appendWithNSString:sig];
        (void) [ca appendWithNSString:(statusColor == nil) ? CCPBVOrders_endHtml_ : CCPBVOrders_endHtmlSC_];
        if (statusColor != nil) {
          (void) [ca appendWithNSString:@"</font>"];
        }
        (void) [ca appendWithNSString:@"</html>"];
        if (cardstack) {
          [CCPBVCardStackUtils setItemTextWithRARERenderableDataItem:row withNSString:[ca description]];
        }
        else {
          [item1 setValueWithId:[ca description]];
        }
      }
      NSString *type = [item0 description];
      if (!cardstack) {
        if (hasCC) {
          RARERenderableDataItem *cc = [row getWithInt:CCPBVOrders_CLINICAL_CATEGORY_POSITION];
          s = [((RARERenderableDataItem *) nil_chk(cc)) description];
          if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
            if ([((NSString *) nil_chk(medsCategoryID_)) isEqual:type]) {
              [cc setValueWithId:missingClinicalCategoryTitle_];
            }
          }
        }
        s = [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_CATEGORY_NAME_POSITION])) description];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          s = missingCategoryTitle_;
          [((RARERenderableDataItem *) nil_chk([row getWithInt:CCPBVOrders_CATEGORY_NAME_POSITION])) setValueWithId:s];
        }
        if (![categorySet containsWithId:s]) {
          [categories addWithId:category = [[RARERenderableDataItem alloc] initWithNSString:s withId:type withRAREiPlatformIcon:icon]];
          [category setActionListenerWithRAREiActionListener:self];
          [categorySet addWithId:s];
        }
        if (orderStatuses != nil) {
          if ([CCPBVOrderManager isDiscontinuedWithNSString:orderID withJavaUtilMap:orderStatuses]) {
            if (strikeThrough == nil) {
              strikeThrough = [((RAREUIFont *) nil_chk([((RAREUIFont *) nil_chk([table getFont])) deriveItalic])) deriveStrikethrough];
            }
            istatus |= CCPBVOrders_STOPPED_FLAG;
            [row setFontWithRAREUIFont:strikeThrough];
            NSString *c = [((RAREUTJSONObject *) nil_chk(CCPBVOrders_statusColors_)) optStringWithNSString:@"Discontinued" withNSString:nil];
            if (c == nil) {
              c = [CCPBVOrders_statusColors_ optStringWithNSString:@"Stopped" withNSString:nil];
            }
            if (c != nil) {
              statusColor = c;
            }
          }
        }
      }
      [row setUserStateFlagWithByte:(char) istatus];
      if (statusColor != nil) {
        [row setForegroundWithRAREUIColor:[((RAREWindowViewer *) nil_chk(w)) getColorWithNSString:statusColor]];
      }
    }
    if (cardstack) {
      dataLoaded_ = YES;
      allOrders_ = rows;
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVOrders_$2 alloc] initWithCCPBVOrders:self withRARETableViewer:table]];
    }
    else {
      [JavaUtilCollections sortWithJavaUtilList:categories];
      allOrders_ = rows = [CCPBVUtils groupRowsWithRARETableViewer:table withJavaUtilList:rows withInt:CCPBVOrders_CATEGORY_NAME_POSITION withInt:-1 withBoolean:NO];
      if (hasClinicalCategories_) {
        RARERenderableDataItem *ivs = nil;
        RARERenderableDataItem *meds = nil;
        len = [((id<JavaUtilList>) nil_chk(rows)) size];
        for (int i = 0; i < len; i++) {
          row = [rows getWithInt:i];
          RARERenderableDataItem *item = [((RARERenderableDataItem *) nil_chk(row)) getWithInt:0];
          item = [((RARERenderableDataItem *) nil_chk(item)) getWithInt:0];
          s = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(item)) getWithInt:0])) getValue], [NSString class]);
          if ([((NSString *) nil_chk(s)) isEqual:ivsCategoryID_]) {
            ivs = row;
          }
          else if ([s isEqual:medsCategoryID_]) {
            meds = [row getWithInt:0];
          }
        }
        if (meds != nil) {
          categorizedMeds_ = [CCPBVUtils groupRowsWithRARETableViewer:table withJavaUtilList:[meds getItems] withInt:CCPBVOrders_CLINICAL_CATEGORY_POSITION withInt:-1 withBoolean:NO];
          RARESubItemComparator *c = [[RARESubItemComparator alloc] init];
          [c setOptionsWithInt:0 withBoolean:NO];
          [JavaUtilCollections sortWithJavaUtilList:categorizedMeds_ withJavaUtilComparator:c];
        }
        if (ivs != nil) {
          if (categorizedMeds_ != nil) {
            [categorizedMeds_ addWithInt:0 withId:ivs];
          }
          else {
            categorizedMeds_ = [[JavaUtilArrayList alloc] initWithInt:1];
            [categorizedMeds_ addWithId:ivs];
          }
        }
        if ((categorizedMeds_ != nil) && [categorizedMeds_ isEmpty]) {
          categorizedMeds_ = nil;
        }
        if (categorizedMeds_ != nil) {
          [categories addWithInt:0 withId:category = [[RARERenderableDataItem alloc] initWithNSString:categorizedMedsTitle_ withId:cmedsCategoryID_ withRAREiPlatformIcon:icon]];
          [category setActionListenerWithRAREiActionListener:self];
        }
      }
      else {
        int pos = [RARERenderableDataItem findLinkedObjectIndexWithJavaUtilList:categories withId:medsCategoryID_];
        if (pos != -1) {
          category = [categories removeWithInt:pos];
          [categories addWithInt:0 withId:category];
          hasMeds = YES;
        }
      }
      [categories addWithInt:0 withId:category = [[RARERenderableDataItem alloc] initWithNSString:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.all_orders"] withId:nil withRAREiPlatformIcon:icon]];
      [category setActionListenerWithRAREiActionListener:self];
      int selectedIndex;
      if ((categorizedMeds_ != nil) || hasMeds) {
        selectedIndex = 1;
      }
      else {
        selectedIndex = 0;
      }
      dataLoaded_ = YES;
      [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVOrders_$3 alloc] initWithCCPBVOrders:self withRARETableViewer:table withJavaUtilList:categories withInt:selectedIndex withCCPBVActionPath:path]];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
  @finally {
    [((RAREWindowViewer *) nil_chk(w)) hideWaitCursor];
  }
}

- (void)reset {
  [super reset];
  currentView_ = [CCPBVResultsViewEnum DOCUMENT];
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  if (categorizedMeds_ != nil) {
    [categorizedMeds_ clear];
  }
  categorizedMeds_ = nil;
  allOrders_ = nil;
  categorizedMedsLoaded_ = NO;
}

- (void)updateCategoriesWithRAREiFormViewer:(id<RAREiFormViewer>)fv
                           withJavaUtilList:(id<JavaUtilList>)categories
                                    withInt:(int)selectedIndex {
  RAREaWidget *cw = (RAREaWidget *) check_class_cast([((id<RAREiFormViewer>) nil_chk(fv)) getWidgetWithNSString:@"categories"], [RAREaWidget class]);
  if (cw != nil) {
    [cw clear];
    if ((categories == nil) || [categories isEmpty]) {
      [cw setEnabledWithBoolean:NO];
      [cw setValueWithId:nil];
    }
    else if ([cw isKindOfClass:[RAREaWidget class]]) {
      [cw setEnabledWithBoolean:YES];
      if (selectedIndex == -1) {
        selectedIndex = 0;
      }
      [cw addAllWithJavaUtilCollection:categories];
      if ([cw isKindOfClass:[RAREPushButtonWidget class]]) {
        RAREPushButtonWidget *pb = (RAREPushButtonWidget *) check_class_cast(cw, [RAREPushButtonWidget class]);
        [pb setPopupScrollableWithBoolean:YES];
        [pb setSelectedIndexWithInt:selectedIndex];
      }
      else if ([cw conformsToProtocol: @protocol(RAREiListHandler)]) {
        [((id<RAREiListHandler>) check_protocol_cast(cw, @protocol(RAREiListHandler))) setSelectedIndexWithInt:selectedIndex];
      }
      RARERenderableDataItem *item = [categories getWithInt:selectedIndex];
      [self filterTableWithRARETableViewer:dataTable_ withNSString:(NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(item)) getLinkedData], [NSString class])];
    }
    [cw update];
  }
}

- (void)updateTableWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  [((RARETableViewer *) nil_chk(table)) clear];
  [table handleGroupedCollectionWithJavaUtilCollection:rows withBoolean:YES];
  [table finishedLoading];
}

+ (NSString *)getOrderDirectionsWithRARERenderableDataItem:(RARERenderableDataItem *)orderItem {
  NSString *sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(orderItem)) getWithInt:2])) getValue], [NSString class]);
  if (((sig == nil) || ([sig sequenceLength] == 0)) && ([orderItem size] > CCPBVOrders_SIG_COLUMN_)) {
    sig = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([orderItem getWithInt:CCPBVOrders_SIG_COLUMN_])) getValue], [NSString class]);
  }
  return sig;
}

+ (RARERenderableDataItem *)getOrderedItemWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  return [((RARERenderableDataItem *) nil_chk(row)) getWithInt:1];
}

+ (int)indexOfOrderWithRARETableViewer:(RARETableViewer *)table
                          withNSString:(NSString *)id_ {
  int len = [((RARETableViewer *) nil_chk(table)) size];
  for (int i = 0; i < len; i++) {
    if ([((NSString *) nil_chk(id_)) isEqual:[((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk([table getWithInt:i])) getWithInt:0])) getLinkedData]]) {
      return i;
    }
  }
  return -1;
}

+ (void)updateStatusIconWithRARERenderableDataItem:(RARERenderableDataItem *)row
                        withRARERenderableDataItem:(RARERenderableDataItem *)item
                                           withInt:(int)istatus {
  id<RAREiPlatformIcon> icon = nil;
  NSString *color = nil;
  if ((istatus & CCPBVOrders_UNSIGNED_FLAG) != 0) {
    color = [((RAREUTJSONObject *) nil_chk(CCPBVOrders_statusColors_)) optStringWithNSString:@"Unsigned" withNSString:nil];
    if ((istatus & CCPBVOrders_FLAGGED_FLAG) != 0) {
      if (color != nil) {
        color = [CCPBVOrders_statusColors_ optStringWithNSString:@"Flagged" withNSString:nil];
      }
      icon = CCPBVOrders_flaggedAndUnsignedIcon_;
    }
    else {
      icon = CCPBVOrders_unsignedIcon_;
    }
  }
  else if ((istatus & CCPBVOrders_FLAGGED_FLAG) != 0) {
    color = [((RAREUTJSONObject *) nil_chk(CCPBVOrders_statusColors_)) optStringWithNSString:@"Flagged" withNSString:nil];
    if ((istatus & CCPBVOrders_ONHOLD_FLAG) != 0) {
      icon = CCPBVOrders_flaggedAndHoldIcon_;
      if (color != nil) {
        color = [CCPBVOrders_statusColors_ optStringWithNSString:CCPBVOrders_holdStatusValue_ withNSString:nil];
      }
    }
    else {
      icon = CCPBVOrders_flaggedIcon_;
    }
  }
  else if ((istatus & CCPBVOrders_ONHOLD_FLAG) != 0) {
    icon = CCPBVOrders_holdIcon_;
    color = [((RAREUTJSONObject *) nil_chk(CCPBVOrders_statusColors_)) optStringWithNSString:CCPBVOrders_holdStatusValue_ withNSString:nil];
  }
  [((RARERenderableDataItem *) nil_chk(item)) setIconWithRAREiPlatformIcon:icon];
  if (color != nil) {
    [((RARERenderableDataItem *) nil_chk(row)) setForegroundWithRAREUIColor:[RAREUIColorHelper getColorWithNSString:color]];
  }
  else {
    [((RARERenderableDataItem *) nil_chk(row)) setForegroundWithRAREUIColor:nil];
  }
}

- (void)copyAllFieldsTo:(CCPBVOrders *)other {
  [super copyAllFieldsTo:other];
  other->allOrders_ = allOrders_;
  other->appendDirections_ = appendDirections_;
  other->categorizedMeds_ = categorizedMeds_;
  other->categorizedMedsLoaded_ = categorizedMedsLoaded_;
  other->categorizedMedsTitle_ = categorizedMedsTitle_;
  other->categorySortPosition_ = categorySortPosition_;
  other->cmedsCategoryID_ = cmedsCategoryID_;
  other->hasClinicalCategories_ = hasClinicalCategories_;
  other->includeIVsInCategorizedMeds_ = includeIVsInCategorizedMeds_;
  other->ivsCategoryID_ = ivsCategoryID_;
  other->lastOrderActionTime_ = lastOrderActionTime_;
  other->loadedDocument_ = loadedDocument_;
  other->medsCategoryID_ = medsCategoryID_;
  other->missingCategoryTitle_ = missingCategoryTitle_;
  other->missingClinicalCategoryTitle_ = missingClinicalCategoryTitle_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "isHoldableWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "needsSigningWithRARERenderableDataItem:", NULL, "Z", 0x1, NULL },
    { "clearFormWithRAREiContainer:", NULL, "V", 0x4, NULL },
    { "dataParsedWithRAREiWidget:withJavaUtilList:withRAREActionLink:", NULL, "V", 0x4, NULL },
    { "filterTableWithRARETableViewer:withNSString:", NULL, "V", 0x4, NULL },
    { "populateCardStackWithRAREiContainer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "processDataWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "reset", NULL, "V", 0x4, NULL },
    { "updateCategoriesWithRAREiFormViewer:withJavaUtilList:withInt:", NULL, "V", 0x4, NULL },
    { "updateTableWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "getOrderDirectionsWithRARERenderableDataItem:", NULL, "LNSString", 0x9, NULL },
    { "getOrderedItemWithRARERenderableDataItem:", NULL, "LRARERenderableDataItem", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "CATEGORY_NAME_POSITION_", NULL, 0x19, "I" },
    { "CLINICAL_CATEGORY_POSITION_", NULL, 0x19, "I" },
    { "SIG_COLUMN_", NULL, 0x9, "I" },
    { "STATUS_COLUMN_", NULL, 0x9, "I" },
    { "SUMMARY_STATUS_COLUMN_", NULL, 0x9, "I" },
    { "SIGNED_COLUMN_", NULL, 0x9, "I" },
    { "FLAGGED_COLUMN_", NULL, 0x9, "I" },
    { "FLAGGED_FLAG_", NULL, 0x19, "B" },
    { "UNSIGNED_FLAG_", NULL, 0x19, "B" },
    { "HOLDABLE_FLAG_", NULL, 0x19, "B" },
    { "ONHOLD_FLAG_", NULL, 0x19, "B" },
    { "STOPABLE_FLAG_", NULL, 0x19, "B" },
    { "STOPPED_FLAG_", NULL, 0x19, "B" },
    { "REQUIRED_FLAG_", NULL, 0x19, "B" },
    { "hasOrderDiscontinueSupport_", NULL, 0x9, "Z" },
    { "hasOrderEntrySupport_", NULL, 0x9, "Z" },
    { "hasOrderDictationSupport_", NULL, 0x9, "Z" },
    { "hasOrderFlagSupport_", NULL, 0x9, "Z" },
    { "hasOrderRewriteSupport_", NULL, 0x9, "Z" },
    { "hasOrderHoldSupport_", NULL, 0x9, "Z" },
    { "hasOrderSignSupport_", NULL, 0x9, "Z" },
    { "hasOrderSentenceSupport_", NULL, 0x9, "Z" },
    { "showActionWaitMessage_", NULL, 0x9, "Z" },
    { "verifyOrderEntryCancel_", NULL, 0x9, "Z" },
    { "verifyOrderEntryDelete_", NULL, 0x9, "Z" },
    { "signatureRequiredForSumbission_", NULL, 0x9, "Z" },
    { "showRequiredFieldsOnlyDefault_", NULL, 0x9, "Z" },
    { "holdableStatus_", NULL, 0x9, "LJavaUtilList" },
    { "stopableStatus_", NULL, 0x9, "LJavaUtilList" },
    { "holdStatusValue_", NULL, 0x9, "LNSString" },
    { "unholdStatusValue_", NULL, 0x9, "LNSString" },
    { "defaultOrderType_", NULL, 0x9, "LNSString" },
    { "medicationOrderType_", NULL, 0x9, "LNSString" },
    { "defaultRoute_", NULL, 0x9, "LNSString" },
    { "booleanFieldTrueValue_", NULL, 0x9, "LNSString" },
    { "booleanFieldFalseValue_", NULL, 0x9, "LNSString" },
    { "booleanFieldTrueDisplayValue_", NULL, 0x9, "LNSString" },
    { "booleanFieldFalseDisplayValue_", NULL, 0x9, "LNSString" },
    { "statusColors_", NULL, 0x9, "LRAREUTJSONObject" },
    { "endHtml_", NULL, 0x9, "LNSString" },
    { "startHtml_", NULL, 0x9, "LNSString" },
    { "endHtmlSC_", NULL, 0x9, "LNSString" },
    { "startHtmlSC_", NULL, 0x9, "LNSString" },
    { "unsignedIcon_", NULL, 0x8, "LRAREiPlatformIcon" },
    { "flaggedIcon_", NULL, 0x8, "LRAREiPlatformIcon" },
    { "holdIcon_", NULL, 0x8, "LRAREiPlatformIcon" },
    { "flaggedAndUnsignedIcon_", NULL, 0x8, "LRAREiPlatformIcon" },
    { "flaggedAndHoldIcon_", NULL, 0x8, "LRAREiPlatformIcon" },
    { "holdItem_", NULL, 0x8, "LRAREUIMenuItem" },
    { "flagItem_", NULL, 0x8, "LRAREUIMenuItem" },
    { "unholdItem_", NULL, 0x8, "LRAREUIMenuItem" },
    { "unflagItem_", NULL, 0x8, "LRAREUIMenuItem" },
    { "categorySortPosition_", NULL, 0x4, "I" },
    { "hasClinicalCategories_", NULL, 0x4, "Z" },
    { "appendDirections_", NULL, 0x4, "Z" },
    { "includeIVsInCategorizedMeds_", NULL, 0x4, "Z" },
    { "categorizedMedsTitle_", NULL, 0x4, "LNSString" },
    { "missingClinicalCategoryTitle_", NULL, 0x4, "LNSString" },
    { "missingCategoryTitle_", NULL, 0x4, "LNSString" },
    { "ivsCategoryID_", NULL, 0x4, "LNSString" },
    { "medsCategoryID_", NULL, 0x4, "LNSString" },
    { "cmedsCategoryID_", NULL, 0x4, "LNSString" },
    { "categorizedMeds_", NULL, 0x4, "LJavaUtilList" },
    { "categorizedMedsLoaded_", NULL, 0x4, "Z" },
    { "allOrders_", NULL, 0x4, "LJavaUtilList" },
    { "lastOrderActionTime_", NULL, 0x4, "J" },
    { "loadedDocument_", NULL, 0x4, "LCCPBVDocument" },
  };
  static J2ObjcClassInfo _CCPBVOrders = { "Orders", "com.sparseware.bellavista", NULL, 0x1, 12, methods, 67, fields, 0, NULL};
  return &_CCPBVOrders;
}

@end
@implementation CCPBVOrders_OrdersStackActionListener

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  RAREStackPaneViewer *sp = [CCPBVCardStackUtils createListItemsOrPageViewerWithNSString:nil withRAREiContainer:[((RARETableViewer *) nil_chk(this$0_->dataTable_)) getFormViewer] withJavaUtilList:this$0_->allOrders_ withInt:-1 withInt:1 withRAREiActionListener:nil withBoolean:NO withBoolean:YES];
  [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:sp withBoolean:NO];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
  };
  static J2ObjcClassInfo _CCPBVOrders_OrdersStackActionListener = { "OrdersStackActionListener", "com.sparseware.bellavista", "Orders", 0x4, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVOrders_OrdersStackActionListener;
}

@end
@implementation CCPBVOrders_$1

- (void)run {
  [this$0_ processDataWithRARETableViewer:val$table_ withJavaUtilList:val$rows_];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0
         withJavaUtilList:(id<JavaUtilList>)capture$1 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$rows_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$rows_", NULL, 0x1012, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$1 = { "$1", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_CCPBVOrders_$1;
}

@end
@implementation CCPBVOrders_$2

- (void)run {
  [this$0_ updateTableWithRARETableViewer:val$table_ withJavaUtilList:this$0_->allOrders_];
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0 {
  this$0_ = outer$;
  val$table_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$2 = { "$2", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVOrders_$2;
}

@end
@implementation CCPBVOrders_$3

- (void)run {
  if (![((RARETableViewer *) nil_chk(val$table_)) isDisposed]) {
    [this$0_ filterTableWithRARETableViewer:val$table_ withNSString:(this$0_->categorizedMeds_ != nil) ? this$0_->cmedsCategoryID_ : this$0_->medsCategoryID_];
    [this$0_ updateCategoriesWithRAREiFormViewer:[val$table_ getFormViewer] withJavaUtilList:val$categories_ withInt:val$selectedIndex_];
  }
  NSString *key = (val$path_ == nil) ? nil : [val$path_ shift];
  if (key != nil) {
    [this$0_ handlePathKeyWithRARETableViewer:val$table_ withNSString:key withInt:0 withBoolean:YES];
  }
}

- (id)initWithCCPBVOrders:(CCPBVOrders *)outer$
      withRARETableViewer:(RARETableViewer *)capture$0
         withJavaUtilList:(id<JavaUtilList>)capture$1
                  withInt:(int)capture$2
      withCCPBVActionPath:(CCPBVActionPath *)capture$3 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$categories_ = capture$1;
  val$selectedIndex_ = capture$2;
  val$path_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVOrders" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$categories_", NULL, 0x1012, "LJavaUtilList" },
    { "val$selectedIndex_", NULL, 0x1012, "I" },
    { "val$path_", NULL, 0x1012, "LCCPBVActionPath" },
  };
  static J2ObjcClassInfo _CCPBVOrders_$3 = { "$3", "com.sparseware.bellavista", "Orders", 0x8000, 0, NULL, 5, fields, 0, NULL};
  return &_CCPBVOrders_$3;
}

@end
