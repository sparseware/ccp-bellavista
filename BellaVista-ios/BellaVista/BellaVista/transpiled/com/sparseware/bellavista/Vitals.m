//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/Vitals.java
//
//  Created by decoteaud on 11/29/15.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iFunctionCallback.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/spot/Chart.h"
#include "com/appnativa/rare/spot/Plot.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIDimension.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/chart/ChartDefinition.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/ChartViewer.h"
#include "com/appnativa/rare/viewer/SplitPaneViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/ToolBarViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/aContainer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/aGroupableButton.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/util/MutableInteger.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/PatientSelect.h"
#include "com/sparseware/bellavista/ResultsView.h"
#include "com/sparseware/bellavista/Summary.h"
#include "com/sparseware/bellavista/TrendPanel.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/Vitals.h"
#include "com/sparseware/bellavista/aChartHandler.h"
#include "com/sparseware/bellavista/aResultsManager.h"
#include "com/sparseware/bellavista/external/aRemoteMonitor.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation CCPBVVitals

static BOOL CCPBVVitals_checkedForMonitoringSupport_;
static IOSClass * CCPBVVitals_monitoringClass_;
static CCPBVaRemoteMonitor * CCPBVVitals_monitorInstance_;

+ (BOOL)checkedForMonitoringSupport {
  return CCPBVVitals_checkedForMonitoringSupport_;
}

+ (BOOL *)checkedForMonitoringSupportRef {
  return &CCPBVVitals_checkedForMonitoringSupport_;
}

+ (IOSClass *)monitoringClass {
  return CCPBVVitals_monitoringClass_;
}

+ (void)setMonitoringClass:(IOSClass *)monitoringClass {
  CCPBVVitals_monitoringClass_ = monitoringClass;
}

+ (CCPBVaRemoteMonitor *)monitorInstance {
  return CCPBVVitals_monitorInstance_;
}

+ (void)setMonitorInstance:(CCPBVaRemoteMonitor *)monitorInstance {
  CCPBVVitals_monitorInstance_ = monitorInstance;
}

- (id)init {
  if (self = [super initWithNSString:@"vitals" withNSString:@"Vitals"]) {
    temp_ = [[JavaLangStringBuilder alloc] init];
    id<RAREiPlatformAppContext> app = [RAREPlatform getAppContext];
    RAREUTJSONObject *info = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk(app)) getDataWithId:@"vitalsInfo"], [RAREUTJSONObject class]);
    itemCounts_ = [[JavaUtilLinkedHashMap alloc] init];
    itemDatesSet_ = [[JavaUtilLinkedHashSet alloc] init];
    dataPageSize_ = [((RAREUTJSONObject *) nil_chk(info)) optIntWithNSString:@"dataPageSize" withInt:dataPageSize_];
    spreadSheetPageSize_ = [info optIntWithNSString:@"spreadSheetPageSize" withInt:spreadSheetPageSize_];
    showUnits_ = [info optBooleanWithNSString:@"showUnits" withBoolean:NO];
    chartHandler_ = [[CCPBVVitals_ChartHandler alloc] initWithCCPBVVitals:self withRAREUTJSONObject:[info getJSONObjectWithNSString:@"charts"]];
    chartableItemsManager_ = [[CCPBVaResultsManager_ChartableItemsManager alloc] init];
    if ([info optBooleanWithNSString:@"hasReferenceRange" withBoolean:NO]) {
      (*[CCPBVaResultsManager RANGE_POSITIONRef]) = 4;
    }
    if ([CCPBVUtils isCardStack]) {
      trendPanels_ = [self createTrendPanelsWithRAREUTJSONArray:[info optJSONArrayWithNSString:@"trends"] withBoolean:YES];
    }
    if (!CCPBVVitals_checkedForMonitoringSupport_) {
      CCPBVVitals_checkedForMonitoringSupport_ = YES;
      NSString *cls = [info optStringWithNSString:@"monitoringClass" withNSString:nil];
      if ((cls != nil) && ([cls sequenceLength] > 0)) {
        @try {
          CCPBVVitals_monitoringClass_ = [RAREPlatform loadClassWithNSString:cls];
        }
        @catch (JavaLangException *ignore) {
        }
      }
    }
  }
  return self;
}

- (NSString *)getSpeeedSheetColumnTitle {
  return [RAREPlatform getResourceAsStringWithNSString:@"bv.text.vitals"];
}

- (void)onSummaryClickWithNSString:(NSString *)eventName
                   withRAREiWidget:(id<RAREiWidget>)widget
           withJavaUtilEventObject:(JavaUtilEventObject *)event {
  CCPBVActionPath *path = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"vitals", @"combo" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  [CCPBVUtils handleActionPathWithCCPBVActionPath:path];
}

- (void)onConfigureRealtimeVitalsButtonWithNSString:(NSString *)eventName
                                    withRAREiWidget:(id<RAREiWidget>)widget
                            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ((CCPBVVitals_monitoringClass_ != nil) && [((RAREUTJSONObject *) nil_chk([CCPBVUtils getPatient])) optBooleanWithNSString:@"has_monitor" withBoolean:NO]) {
    [((id<RAREiWidget>) nil_chk(widget)) setEnabledWithBoolean:YES];
  }
}

- (void)changeViewExWithRAREiWidget:(id<RAREiWidget>)widget
           withCCPBVResultsViewEnum:(CCPBVResultsViewEnum *)view {
  if (view != [CCPBVResultsViewEnum CUSTOM_1]) {
    return;
  }
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  if (CCPBVVitals_monitorInstance_ == nil) {
    @try {
      CCPBVVitals_monitorInstance_ = (CCPBVaRemoteMonitor *) check_class_cast([((IOSClass *) nil_chk(CCPBVVitals_monitoringClass_)) newInstance], [CCPBVaRemoteMonitor class]);
    }
    @catch (JavaLangException *e) {
      CCPBVVitals_monitoringClass_ = nil;
      [((id<RAREiWidget>) nil_chk(widget)) setEnabledWithBoolean:NO];
      [w alertWithId:[((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.text.failed_to_create_monitor"]];
      return;
    }
  }
  id<RAREiContainer> fv = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  RARESplitPaneViewer *sp;
  if ([(id) fv isKindOfClass:[RARESplitPaneViewer class]]) {
    sp = (RARESplitPaneViewer *) check_class_cast(fv, [RARESplitPaneViewer class]);
  }
  else {
    sp = nil;
  }
  id<RAREiFunctionCallback> cb = [[CCPBVVitals_$1 alloc] initWithCCPBVVitals:self withRAREWindowViewer:w withRAREiWidget:widget withCCPBVResultsViewEnum:view withRARESplitPaneViewer:sp];
  [self showRegularTableExWithRAREiContainer:fv];
  [((RAREWindowViewer *) nil_chk(w)) showWaitCursor];
  RAREUIDimension *targetSize;
  if (sp != nil) {
    targetSize = [sp getSize];
  }
  else {
    targetSize = [((id<RAREiTarget>) nil_chk([w getTargetWithNSString:[RAREiTarget TARGET_WORKSPACE]])) getTargetSize];
  }
  [((CCPBVaRemoteMonitor *) nil_chk(CCPBVVitals_monitorInstance_)) createViewerWithRAREUTJSONObject:[CCPBVUtils getPatient] withRAREiContainer:(sp == nil) ? w : sp withRAREUIDimension:targetSize withRAREiFunctionCallback:cb];
}

- (void)changeViewWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *name = [((RAREaGroupableButton *) check_class_cast(widget, [RAREaGroupableButton class])) getSelectedButtonName];
  if (name == nil) {
    name = [((id<RAREiWidget>) nil_chk(widget)) getName];
  }
  if ([RAREUIScreen isLargeScreen] && [@"spreadsheet" isEqual:name]) {
    NSString *key = [self getSelectedChartableKey];
    if (key != nil) {
      keyPath_ = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ key } count:1 type:[IOSClass classWithClass:[NSString class]]]];
    }
  }
  [super changeViewWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
}

- (void)onShowComboChartWithNSString:(NSString *)eventName
                     withRAREiWidget:(id<RAREiWidget>)widget
             withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self showComboChartWithRAREStackPaneViewer:(RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class])];
}

- (BOOL)checkRowWithRARERenderableDataItem:(RARERenderableDataItem *)row
                                   withInt:(int)index
                                   withInt:(int)expandableColumn
                                   withInt:(int)rowCount {
  @try {
    do {
      RARERenderableDataItem *name = [((RARERenderableDataItem *) nil_chk(row)) getItemExWithInt:[CCPBVaResultsManager NAME_POSITION]];
      JavaUtilDate *date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([row getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
      if ((name == nil) || (date == nil)) {
        continue;
      }
      NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(name)) getLinkedData], [NSString class]);
      if (key == nil) {
        continue;
      }
      RARERenderableDataItem *valueItem = [row getWithInt:[CCPBVaResultsManager VALUE_POSITION]];
      NSString *value = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(valueItem)) getValue], [NSString class]);
      if ([((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) checkWithNSString:key withNSString:value]) {
        [((JavaUtilLinkedHashSet *) nil_chk(itemDatesSet_)) addWithId:date];
        RAREUTMutableInteger *count = [((JavaUtilLinkedHashMap *) nil_chk(itemCounts_)) getWithId:key];
        if (count == nil) {
          count = [[RAREUTMutableInteger alloc] initWithInt:0];
          (void) [itemCounts_ putWithId:key withId:count];
        }
        [((RAREUTMutableInteger *) nil_chk(count)) incrementAndGet];
        if (trendPanels_ != nil) {
          {
            IOSObjectArray *a__ = trendPanels_;
            id const *b__ = a__->buffer_;
            id const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              CCPBVTrendPanel *p = (*b__++);
              if ([((CCPBVTrendPanel *) nil_chk(p)) addTrendWithNSString:key withJavaUtilDate:date withRARERenderableDataItem:valueItem]) {
                break;
              }
            }
          }
        }
      }
      if ([((NSString *) nil_chk(key)) isEqual:@"wt"] || [key isEqual:@"ht"]) {
        RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"patient"], [RAREUTJSONObject class]);
        NSString *s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:key];
        if ([((NSString *) nil_chk(s)) sequenceLength] == 0) {
          RARERenderableDataItem *unitItem = [row getItemExWithInt:[CCPBVaResultsManager UNIT_POSITION]];
          NSString *unit = (unitItem == nil) ? @"" : [unitItem description];
          if ([unit sequenceLength] > 0) {
            (void) [o putWithNSString:key withId:[NSString stringWithFormat:@"%@%@", [valueItem description], unit]];
            updateWeightHeight_ = YES;
          }
        }
      }
      if (showUnits_) {
        RARERenderableDataItem *unitItem = [row getItemExWithInt:[CCPBVaResultsManager UNIT_POSITION]];
        NSString *unit = (unitItem == nil) ? @"" : [unitItem description];
        if ([unit sequenceLength] > 0) {
          JavaLangStringBuilder *sb = temp_;
          [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
          (void) [sb appendWithNSString:value];
          int n = [((NSString *) nil_chk(value)) indexOf:'('];
          if (n == -1) {
            n = [value indexOf:'*'];
          }
          if (n == -1) {
            (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:' '])) appendWithNSString:unit];
          }
          else {
            (void) [sb insertWithInt:n withNSString:unit];
            (void) [sb insertWithInt:n + [unit sequenceLength] withChar:' '];
          }
          [valueItem setValueWithId:[sb description]];
        }
      }
    }
    while (NO);
  }
  @catch (JavaLangException *e) {
    [RAREPlatform ignoreExceptionWithNSString:nil withJavaLangThrowable:e];
  }
  return YES;
}

- (void)onFinishedLoadingWithNSString:(NSString *)eventName
                      withRAREiWidget:(id<RAREiWidget>)widget
              withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if (hasNoData_) {
    RAREToolBarViewer *tb = (RAREToolBarViewer *) check_class_cast([((id<RAREiContainer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getParent])) getWidgetWithNSString:@"tableToolbar"], [RAREToolBarViewer class]);
    id<RAREiWidget> cw = (tb == nil) ? nil : [tb getWidgetWithNSString:@"spreadsheet"];
    if (cw != nil) {
      [cw setEnabledWithBoolean:NO];
    }
    cw = (tb == nil) ? nil : [tb getWidgetWithNSString:@"comboChart"];
    if (cw != nil) {
      [cw setEnabledWithBoolean:NO];
    }
  }
  else {
    RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
    [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) createListWithRARETableViewer:table withInt:[CCPBVaResultsManager NAME_POSITION]];
    if ([CCPBVUtils isCardStack] && (trendPanels_ != nil) && ((int) [trendPanels_ count] > 0)) {
      id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"trends"], @protocol(RAREiContainer));
      CCPBVTrendPanel *panel = IOSObjectArray_Get(trendPanels_, 0);
      [((CCPBVTrendPanel *) nil_chk(panel)) removePeers];
      NSString *text = [panel popuplateFormWithRAREiContainer:fv];
      [CCPBVCardStackUtils switchToViewerWithRAREiViewer:[((RARETableViewer *) nil_chk(table)) getParent]];
      [self updateCardStackTitleWithNSString:panel->title_ withNSString:text];
    }
  }
}

- (void)onCreatedWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if ([CCPBVUtils isCardStack]) {
    [CCPBVCardStackUtils setViewerActionWithRAREiViewer:(id<RAREiViewer>) check_protocol_cast(widget, @protocol(RAREiViewer)) withId:[[CCPBVaResultsManager_ChartsActionListener alloc] initWithCCPBVaResultsManager:self] withBoolean:YES];
  }
}

- (void)onChartsPanelLoadedWithNSString:(NSString *)eventName
                        withRAREiWidget:(id<RAREiWidget>)widget
                withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [super onChartsPanelLoadedWithNSString:eventName withRAREiWidget:widget withJavaUtilEventObject:event];
  if (dataLoaded_ && ![((RARETableViewer *) nil_chk(dataTable_)) hasSelection]) {
    [self showComboChartWithRAREStackPaneViewer:(RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class])];
  }
}

- (void)selectVitalsWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (id<JavaUtilList>)createSpreadsheetRowsWithRARETableViewer:(RARETableViewer *)table {
  IOSObjectArray *dates = itemDates_;
  id<JavaUtilList> list = originalRows_;
  JavaUtilLinkedHashMap *counts = itemCounts_;
  JavaUtilLinkedHashMap *categories = [[JavaUtilLinkedHashMap alloc] init];
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] initWithInt:[((JavaUtilLinkedHashMap *) nil_chk(counts)) size]];
  JavaUtilArrayList *rows = [[JavaUtilArrayList alloc] initWithInt:[counts size]];
  int len = [((id<JavaUtilList>) nil_chk(list)) size];
  int clen = (int) [((IOSObjectArray *) nil_chk(dates)) count];
  BOOL found;
  RARERenderableDataItem *row, *test, *orow;
  for (int i = 0; i < len; i++) {
    orow = [list getWithInt:i];
    test = [((RARERenderableDataItem *) nil_chk(orow)) getWithInt:[CCPBVaResultsManager NAME_POSITION]];
    NSString *s = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(test)) getLinkedData], [NSString class]);
    if (![counts containsKeyWithId:s]) {
      continue;
    }
    JavaUtilDate *date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([orow getWithInt:[CCPBVaResultsManager DATE_POSITION]])) getValue], [JavaUtilDate class]);
    s = (NSString *) check_class_cast([test getValue], [NSString class]);
    row = [map getWithId:s];
    if (row == nil) {
      row = [((RARETableViewer *) nil_chk(table)) createRowWithInt:clen + 1 withBoolean:NO];
      [((RARERenderableDataItem *) nil_chk(row)) setItemCountWithInt:clen + 1];
      (void) [map putWithId:s withId:row];
      (void) [row setItemWithInt:0 withRARERenderableDataItem:test];
      [rows addWithId:row];
    }
    long long int time = [((JavaUtilDate *) nil_chk(date)) getTime];
    found = NO;
    for (int col = 0; col < clen; col++) {
      if ([((JavaUtilDate *) IOSObjectArray_Get(dates, col)) getTime] == time) {
        found = YES;
        (void) [((RARERenderableDataItem *) nil_chk(row)) setItemWithInt:col + 1 withRARERenderableDataItem:[orow getWithInt:[CCPBVaResultsManager VALUE_POSITION]]];
      }
    }
    if (!found) {
      [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithId:orow];
    }
  }
  RARESubItemComparator *c = [[RARESubItemComparator alloc] init];
  [c setOptionsWithInt:0 withBoolean:NO];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([categories entrySet])) iterator];
  [rows clear];
  RAREUIColor *bg = [RAREColorUtils getColorWithNSString:@"vitalsCategoryBackground"];
  RARERenderableDataItem *emptyCatRow = [[RARERenderableDataItem alloc] init];
  [emptyCatRow setBackgroundWithRAREUIColor:bg];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    id<JavaUtilMap_Entry> e = [it next];
    NSString *category = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    id<JavaUtilList> clist = [e getValue];
    [JavaUtilCollections sortWithJavaUtilList:clist withJavaUtilComparator:c];
    row = [((RARETableViewer *) nil_chk(table)) createRowWithInt:clen + 3 withBoolean:NO];
    [((RARERenderableDataItem *) nil_chk(row)) setSelectableWithBoolean:NO];
    for (int i = 0; i < clen + 3; i++) {
      [row addWithId:emptyCatRow];
    }
    test = [[RARERenderableDataItem alloc] initWithId:category];
    [test setBackgroundWithRAREUIColor:bg];
    [test setColumnSpanWithInt:-1];
    [test setHorizontalAlignmentWithRARERenderableDataItem_HorizontalAlignEnum:[RARERenderableDataItem_HorizontalAlignEnum CENTER]];
    (void) [row setWithInt:1 withId:test];
    [row setLinkedDataWithId:category];
    [rows addWithId:row];
    [rows addAllWithJavaUtilCollection:clist];
  }
  return rows;
}

- (void)processDataWithRARETableViewer:(RARETableViewer *)table
                      withJavaUtilList:(id<JavaUtilList>)rows {
  updateWeightHeight_ = NO;
  [CCPBVUtils checkRowsAndOptimizeDatesWithJavaUtilList:rows withInt:[CCPBVaResultsManager DATE_POSITION] withInt:RARERenderableDataItem_TYPE_DATETIME withCCPBViValueChecker:self];
  if (updateWeightHeight_) {
    [CCPBVPatientSelect updateWeightHeightBMIWithRAREiPlatformAppContext:[RAREPlatform getAppContext] withRAREUTJSONObject:(RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:@"patient"], [RAREUTJSONObject class])];
    id<RAREiContainer> c = (id<RAREiContainer>) check_protocol_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"infobar"], @protocol(RAREiContainer));
    id<RAREiWidget> w = (c == nil) ? nil : [c getWidgetWithNSString:@"wt_ht_bmi"];
    if (w != nil) {
      [w reset];
    }
  }
  itemDates_ = [itemDatesSet_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilLinkedHashSet *) nil_chk(itemDatesSet_)) size] type:[IOSClass classWithClass:[JavaUtilDate class]]]];
  [JavaUtilArrays sortWithNSObjectArray:itemDates_];
  int len = (int) [((IOSObjectArray *) nil_chk(itemDates_)) count];
  spreadsheetPosition_ = [JavaLangMath maxWithInt:0 withInt:len - spreadSheetPageSize_];
  rows = [CCPBVUtils groupByDateWithRARETableViewer:table withJavaUtilList:rows];
  [((RARETableViewer *) nil_chk(table)) handleGroupedCollectionWithJavaUtilCollection:rows withBoolean:NO];
  dataLoaded_ = YES;
  CCPBVActionPath *path = [CCPBVUtils getActionPathWithBoolean:YES];
  NSString *key = (path == nil) ? nil : [path pop];
  if ((key == nil) && [RAREUIScreen isLargeScreen]) {
    key = @"combo";
  }
  if (key != nil) {
    if ([RAREUIScreen isLargeScreen] && !chartsLoaded_) {
      keyPath_ = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ key } count:1 type:[IOSClass classWithClass:[NSString class]]]];
    }
    else {
      [self handlePathKeyWithRARETableViewer:table withNSString:key withInt:0 withBoolean:YES];
    }
  }
}

- (void)showComboChartWithRAREStackPaneViewer:(RAREStackPaneViewer *)sp {
  [self clearSelection];
  @try {
    if (sp == nil) {
      keyPath_ = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"combo" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      [self showChartsViewWithRARETableViewer:(spreadsheetTable_ == nil) ? dataTable_ : spreadsheetTable_];
    }
    else {
      RAREChartDataItem *series = [RAREaChartViewer createSeriesWithNSString:@"Combo"];
      RAREChartViewer *cv = [((CCPBVaChartHandler *) nil_chk(chartHandler_)) createChartWithRAREiFormViewer:[sp getFormViewer] withNSString:@"combo" withInt:1 withRAREChartDataItem:series];
      [((RAREChartDefinition *) nil_chk([((RAREChartViewer *) nil_chk(cv)) getChartDefinition])) setShowLegendsWithBoolean:YES];
      CCPBVSummary *parser = [[CCPBVSummary alloc] init];
      [cv removeWithId:series];
      [parser calculateRangesAndUpdateUIWithRAREiFormViewer:[cv getFormViewer] withRAREChartViewer:cv withJavaUtilList:originalRows_ withBoolean:NO];
      [CCPBVUtils setViewerInStackPaneViewerWithRAREStackPaneViewer:sp withRAREiViewer:cv withRAREiTransitionAnimator:nil withBoolean:YES withBoolean:YES withBoolean:YES];
      [chartHandler_ updateZoomButtonsWithRAREiContainer:[sp getFormViewer]];
    }
  }
  @catch (JavaLangException *e) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:e];
  }
}

- (void)handlePathKeyWithRARETableViewer:(RARETableViewer *)table
                            withNSString:(NSString *)key
                                 withInt:(int)column
                             withBoolean:(BOOL)fireAction {
  if ([@"combo" isEqual:key]) {
    [self showComboChartWithRAREStackPaneViewer:(RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class])];
  }
  else {
    [super handlePathKeyWithRARETableViewer:table withNSString:key withInt:column withBoolean:fireAction];
  }
}

- (void)dataParsedWithRAREiWidget:(id<RAREiWidget>)widget
                 withJavaUtilList:(id<JavaUtilList>)rows
               withRAREActionLink:(RAREActionLink *)link {
  originalRows_ = rows;
  RARETableViewer *table = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  [((RARETableViewer *) nil_chk(table)) setWidgetDataLinkWithRAREActionLink:link];
  [((JavaUtilLinkedHashMap *) nil_chk(itemCounts_)) clear];
  [((JavaUtilLinkedHashSet *) nil_chk(itemDatesSet_)) clear];
  if (trendPanels_ != nil) {
    {
      IOSObjectArray *a__ = trendPanels_;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        CCPBVTrendPanel *p = (*b__++);
        [((CCPBVTrendPanel *) nil_chk(p)) clear];
      }
    }
  }
  if ([self checkAndHandleNoDataWithRARETableViewer:table withJavaUtilList:rows]) {
    itemDates_ = nil;
    return;
  }
  [self processDataWithRARETableViewer:table withJavaUtilList:rows];
}

- (void)copyAllFieldsTo:(CCPBVVitals *)other {
  [super copyAllFieldsTo:other];
  other->showUnits_ = showUnits_;
  other->temp_ = temp_;
  other->trendPanels_ = trendPanels_;
  other->updateWeightHeight_ = updateWeightHeight_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getSpeeedSheetColumnTitle", NULL, "LNSString", 0x4, NULL },
    { "changeViewExWithRAREiWidget:withCCPBVResultsViewEnum:", NULL, "V", 0x4, NULL },
    { "checkRowWithRARERenderableDataItem:withInt:withInt:withInt:", NULL, "Z", 0x1, NULL },
    { "createSpreadsheetRowsWithRARETableViewer:", NULL, "LJavaUtilList", 0x4, NULL },
    { "processDataWithRARETableViewer:withJavaUtilList:", NULL, "V", 0x4, NULL },
    { "showComboChartWithRAREStackPaneViewer:", NULL, "V", 0x4, NULL },
    { "handlePathKeyWithRARETableViewer:withNSString:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "dataParsedWithRAREiWidget:withJavaUtilList:withRAREActionLink:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "checkedForMonitoringSupport_", NULL, 0x8, "Z" },
    { "monitoringClass_", NULL, 0x8, "LIOSClass" },
    { "monitorInstance_", NULL, 0x8, "LCCPBVaRemoteMonitor" },
    { "showUnits_", NULL, 0x0, "Z" },
    { "updateWeightHeight_", NULL, 0x0, "Z" },
    { "temp_", NULL, 0x0, "LJavaLangStringBuilder" },
    { "trendPanels_", NULL, 0x4, "LIOSObjectArray" },
  };
  static J2ObjcClassInfo _CCPBVVitals = { "Vitals", "com.sparseware.bellavista", NULL, 0x1, 8, methods, 7, fields, 0, NULL};
  return &_CCPBVVitals;
}

@end
@implementation CCPBVVitals_ChartHandler

- (id)initWithCCPBVVitals:(CCPBVVitals *)outer$
     withRAREUTJSONObject:(RAREUTJSONObject *)chartsInfo {
  return [super initWithNSString:@"Vitals" withRAREUTJSONObject:chartsInfo withInt:[CCPBVaResultsManager NAME_POSITION] withInt:[CCPBVaResultsManager DATE_POSITION] withInt:[CCPBVaResultsManager VALUE_POSITION]];
}

- (void)configureChartWithRAREiWidget:(id<RAREiWidget>)context
                    withRARESPOTChart:(RARESPOTChart *)cfg
                         withNSString:(NSString *)key
                withRAREChartDataItem:(RAREChartDataItem *)series {
  [super configureChartWithRAREiWidget:context withRARESPOTChart:cfg withNSString:key withRAREChartDataItem:series];
  if ([((NSString *) nil_chk(key)) isEqual:@"combo"]) {
    [((SPOTPrintableString *) nil_chk(((RARESPOTPlot *) nil_chk([((RARESPOTChart *) nil_chk(cfg)) getPlotReference]))->bgColor_)) setValueWithNSString:@"defaultBackground,defaultBackground-15"];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "configureChartWithRAREiWidget:withRARESPOTChart:withNSString:withRAREChartDataItem:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcClassInfo _CCPBVVitals_ChartHandler = { "ChartHandler", "com.sparseware.bellavista", "Vitals", 0x0, 1, methods, 0, NULL, 0, NULL};
  return &_CCPBVVitals_ChartHandler;
}

@end
@implementation CCPBVVitals_$1

- (void)finishedWithBoolean:(BOOL)canceled
                     withId:(id)returnValue {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ([((id<RAREiWidget>) nil_chk(val$widget_)) isDisposed]) {
    return;
  }
  if ([returnValue isKindOfClass:[JavaLangThrowable class]]) {
    [CCPBVUtils handleErrorWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(returnValue, [JavaLangThrowable class])];
  }
  else if (returnValue == nil) {
    [val$widget_ setEnabledWithBoolean:NO];
    [val$w_ alertWithId:[val$w_ getStringWithNSString:@"bv.text.failed_to_create_monitor"]];
  }
  else {
    this$0_->currentView_ = val$view_;
    id<RAREiViewer> v = (id<RAREiViewer>) check_protocol_cast(returnValue, @protocol(RAREiViewer));
    [((RARETableViewer *) nil_chk(this$0_->dataTable_)) clearSelection];
    if (this$0_->chartHandler_ != nil) {
      [this$0_->chartHandler_ resetChartPoints];
    }
    if (val$sp_ == nil) {
      [v setEventHandlerWithNSString:[RAREiConstants EVENT_UNLOAD] withId:@"class:Vitals#reselectDefaultView" withBoolean:YES];
      [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:v];
    }
    else {
      [val$w_ activateViewerWithRAREiViewer:v withNSString:[((id<RAREiTarget>) nil_chk([val$sp_ getRegionWithInt:1])) getName]];
    }
  }
}

- (id)initWithCCPBVVitals:(CCPBVVitals *)outer$
     withRAREWindowViewer:(RAREWindowViewer *)capture$0
          withRAREiWidget:(id<RAREiWidget>)capture$1
 withCCPBVResultsViewEnum:(CCPBVResultsViewEnum *)capture$2
  withRARESplitPaneViewer:(RARESplitPaneViewer *)capture$3 {
  this$0_ = outer$;
  val$w_ = capture$0;
  val$widget_ = capture$1;
  val$view_ = capture$2;
  val$sp_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVVitals" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$widget_", NULL, 0x1012, "LRAREiWidget" },
    { "val$view_", NULL, 0x1012, "LCCPBVResultsViewEnum" },
    { "val$sp_", NULL, 0x1012, "LRARESplitPaneViewer" },
  };
  static J2ObjcClassInfo _CCPBVVitals_$1 = { "$1", "com.sparseware.bellavista", "Vitals", 0x8000, 0, NULL, 5, fields, 0, NULL};
  return &_CCPBVVitals_$1;
}

@end
