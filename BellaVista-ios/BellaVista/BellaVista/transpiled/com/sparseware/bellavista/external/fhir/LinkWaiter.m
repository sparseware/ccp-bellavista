//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/LinkWaiter.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/util/ByteArray.h"
#include "com/appnativa/util/IdentityArrayList.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONTokener.h"
#include "com/sparseware/bellavista/external/fhir/LinkWaiter.h"
#include "java/io/Reader.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/concurrent/Callable.h"

@implementation CCPBVFHIRLinkWaiter

- (id)initWithInt:(int)count {
  return [self initCCPBVFHIRLinkWaiterWithInt:count withBoolean:YES];
}

- (id)initCCPBVFHIRLinkWaiterWithInt:(int)count
                         withBoolean:(BOOL)json {
  if (self = [super init]) {
    asJSON_ = YES;
    cancelOnException_ = YES;
    links_ = [[RAREUTIdentityArrayList alloc] initWithInt:count];
    results_ = [[JavaUtilArrayList alloc] initWithInt:count];
    cancelables_ = [[JavaUtilArrayList alloc] initWithInt:count];
    self->asJSON_ = json;
  }
  return self;
}

- (id)initWithInt:(int)count
      withBoolean:(BOOL)json {
  return [self initCCPBVFHIRLinkWaiterWithInt:count withBoolean:json];
}

- (void)addLinkWithRAREActionLink:(RAREActionLink *)link {
  [self addLinkWithRAREActionLink:link withBoolean:NO];
}

- (void)addLinkWithRAREActionLink:(RAREActionLink *)link
                      withBoolean:(BOOL)asBytes {
  [((RAREUTIdentityArrayList *) nil_chk(links_)) addWithId:link];
  [((JavaUtilArrayList *) nil_chk(results_)) addWithId:nil];
  [((JavaUtilArrayList *) nil_chk(cancelables_)) addWithId:[((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVFHIRLinkWaiter_DataRetriever alloc] initWithCCPBVFHIRLinkWaiter:self withRAREActionLink:link withInt:[results_ size] - 1 withBoolean:asBytes]]];
}

- (void)addLinkWithRAREActionLink:(RAREActionLink *)link
   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  [((RAREUTIdentityArrayList *) nil_chk(links_)) addWithId:link];
  [((JavaUtilArrayList *) nil_chk(results_)) addWithId:nil];
  [((JavaUtilArrayList *) nil_chk(cancelables_)) addWithId:[((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVFHIRLinkWaiter_DataRetriever alloc] initWithCCPBVFHIRLinkWaiter:self withRAREActionLink:link withInt:[results_ size] - 1 withJavaUtilConcurrentCallable:task]]];
}

- (void)startWaiting {
  @synchronized (results_) {
    int count = [((RAREUTIdentityArrayList *) nil_chk(links_)) size];
    if ((completedCount_ == count) || canceled_) {
      return;
    }
    totalCount_ = count;
    @try {
      [((JavaUtilArrayList *) nil_chk(results_)) wait];
    }
    @catch (JavaLangInterruptedException *e) {
      @throw [[RAREApplicationException alloc] initWithJavaLangThrowable:e];
    }
  }
  [((JavaUtilArrayList *) nil_chk(cancelables_)) clear];
}

- (BOOL)hadError {
  return error_ != nil;
}

- (JavaLangException *)getError {
  return error_;
}

- (RAREActionLink *)getErrorLink {
  return errorLink_;
}

- (RAREActionLink *)getLinkWithInt:(int)index {
  return [((RAREUTIdentityArrayList *) nil_chk(links_)) getWithInt:index];
}

- (id)getResultWithInt:(int)index {
  return [((JavaUtilArrayList *) nil_chk(results_)) getWithInt:index];
}

- (id)getResultWithRAREActionLink:(RAREActionLink *)link {
  int n = [((RAREUTIdentityArrayList *) nil_chk(links_)) indexOfWithId:link];
  if (n == -1) {
    return nil;
  }
  return [((JavaUtilArrayList *) nil_chk(results_)) getWithInt:n];
}

- (void)dispose {
  [((RAREUTIdentityArrayList *) nil_chk(links_)) clear];
  links_ = nil;
  [((JavaUtilArrayList *) nil_chk(results_)) clear];
}

- (void)cancelWithJavaLangException:(JavaLangException *)e
                 withRAREActionLink:(RAREActionLink *)link {
  @synchronized (results_) {
    error_ = e;
    errorLink_ = link;
    for (id<RAREiCancelableFuture> __strong f in nil_chk(cancelables_)) {
      [((id<RAREiCancelableFuture>) nil_chk(f)) cancelWithBoolean:YES];
    }
    [cancelables_ clear];
    canceled_ = YES;
    [((JavaUtilArrayList *) nil_chk(results_)) notify];
  }
}

- (void)setCancelOnExceptionWithBoolean:(BOOL)cancelOnException {
  self->cancelOnException_ = cancelOnException;
}

- (void)copyAllFieldsTo:(CCPBVFHIRLinkWaiter *)other {
  [super copyAllFieldsTo:other];
  other->asJSON_ = asJSON_;
  other->cancelOnException_ = cancelOnException_;
  other->cancelables_ = cancelables_;
  other->canceled_ = canceled_;
  other->completedCount_ = completedCount_;
  other->error_ = error_;
  other->errorLink_ = errorLink_;
  other->idMap_ = idMap_;
  other->links_ = links_;
  other->results_ = results_;
  other->totalCount_ = totalCount_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "hadError", NULL, "Z", 0x1, NULL },
    { "getError", NULL, "LJavaLangException", 0x1, NULL },
    { "getErrorLink", NULL, "LRAREActionLink", 0x1, NULL },
    { "getLinkWithInt:", NULL, "LRAREActionLink", 0x1, NULL },
    { "getResultWithInt:", NULL, "LNSObject", 0x1, NULL },
    { "getResultWithRAREActionLink:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "links_", NULL, 0x0, "LRAREUTIdentityArrayList" },
    { "cancelables_", NULL, 0x0, "LJavaUtilArrayList" },
    { "results_", NULL, 0x0, "LJavaUtilArrayList" },
    { "totalCount_", NULL, 0x40, "I" },
    { "completedCount_", NULL, 0x40, "I" },
    { "canceled_", NULL, 0x40, "Z" },
    { "asJSON_", NULL, 0x0, "Z" },
    { "error_", NULL, 0x0, "LJavaLangException" },
    { "errorLink_", NULL, 0x0, "LRAREActionLink" },
    { "idMap_", NULL, 0x0, "LJavaUtilMap" },
  };
  static J2ObjcClassInfo _CCPBVFHIRLinkWaiter = { "LinkWaiter", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 6, methods, 10, fields, 0, NULL};
  return &_CCPBVFHIRLinkWaiter;
}

@end
@implementation CCPBVFHIRLinkWaiter_DataRetriever

- (id)initWithCCPBVFHIRLinkWaiter:(CCPBVFHIRLinkWaiter *)outer$
               withRAREActionLink:(RAREActionLink *)link
                          withInt:(int)index
                      withBoolean:(BOOL)asBytes {
  this$0_ = outer$;
  if (self = [super init]) {
    self->link_ = link;
    self->index_ = index;
    self->asBytes_ = asBytes;
  }
  return self;
}

- (id)initWithCCPBVFHIRLinkWaiter:(CCPBVFHIRLinkWaiter *)outer$
               withRAREActionLink:(RAREActionLink *)link
                          withInt:(int)index
   withJavaUtilConcurrentCallable:(id<JavaUtilConcurrentCallable>)task {
  this$0_ = outer$;
  if (self = [super init]) {
    self->link_ = link;
    self->index_ = index;
    self->task_ = task;
  }
  return self;
}

- (void)run {
  id result;
  if (task_ != nil) {
    @try {
      result = [task_ call];
    }
    @catch (JavaLangException *e) {
      result = e;
    }
  }
  else {
    @try {
      if (asBytes_) {
        result = [((RAREActionLink *) nil_chk(link_)) getContentAsBytes];
      }
      else if (this$0_->asJSON_) {
        RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(link_)) getReader]];
        result = [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
      }
      else {
        result = [((RAREActionLink *) nil_chk(link_)) getContentAsString];
      }
    }
    @catch (JavaLangException *e) {
      [((RAREActionLink *) nil_chk(link_)) close];
      if (this$0_->cancelOnException_) {
        [this$0_ cancelWithJavaLangException:e withRAREActionLink:link_];
        return;
      }
      result = e;
    }
    [((RAREActionLink *) nil_chk(link_)) close];
  }
  @synchronized (this$0_->results_) {
    if (!this$0_->canceled_) {
      (void) [((JavaUtilArrayList *) nil_chk(this$0_->results_)) setWithInt:index_ withId:result];
      this$0_->completedCount_++;
      if (this$0_->completedCount_ == this$0_->totalCount_) {
        [this$0_->results_ notify];
      }
    }
  }
}

- (void)copyAllFieldsTo:(CCPBVFHIRLinkWaiter_DataRetriever *)other {
  [super copyAllFieldsTo:other];
  other->asBytes_ = asBytes_;
  other->index_ = index_;
  other->link_ = link_;
  other->task_ = task_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVFHIRLinkWaiter" },
    { "link_", NULL, 0x0, "LRAREActionLink" },
    { "index_", NULL, 0x0, "I" },
    { "asBytes_", NULL, 0x0, "Z" },
    { "task_", NULL, 0x0, "LJavaUtilConcurrentCallable" },
  };
  static J2ObjcClassInfo _CCPBVFHIRLinkWaiter_DataRetriever = { "DataRetriever", "com.sparseware.bellavista.external.fhir", "LinkWaiter", 0x4, 0, NULL, 5, fields, 0, NULL};
  return &_CCPBVFHIRLinkWaiter_DataRetriever;
}

@end
