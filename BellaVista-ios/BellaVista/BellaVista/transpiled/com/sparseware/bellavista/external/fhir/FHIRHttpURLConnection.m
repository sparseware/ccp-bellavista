//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/FHIRHttpURLConnection.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSClass.h"
#include "com/appnativa/rare/ErrorInformation.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/HTTPException.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/MessageException.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/FHIRHttpURLConnection.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/NonFatalServiceException.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Package.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"

@implementation CCPBVFHIRFHIRHttpURLConnection

static long long int CCPBVFHIRFHIRHttpURLConnection_lastConnectTime_;

+ (long long int)lastConnectTime {
  return CCPBVFHIRFHIRHttpURLConnection_lastConnectTime_;
}

+ (long long int *)lastConnectTimeRef {
  return &CCPBVFHIRFHIRHttpURLConnection_lastConnectTime_;
}

- (id)initWithJavaNetURL:(JavaNetURL *)u {
  return [super initWithJavaNetURL:u withNSString:[((JavaLangPackage *) nil_chk([[IOSClass classWithClass:[CCPBVFHIRFHIRHttpURLConnection class]] getPackage])) getName]];
}

- (JavaIoInputStream *)getExceptionInputStreamWithCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
                                             withJavaLangThrowable:(JavaLangThrowable *)e {
  if ((serviceObject_ != nil) && ((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance]))->debug_) {
    e = [RAREApplicationException pealExceptionWithJavaLangThrowable:e];
    RAREActionLink *l = [((CCPBVFHIRaFHIRemoteService *) check_class_cast(serviceObject_, [CCPBVFHIRaFHIRemoteService class])) getLastLink];
    NSString *url = (l == nil) ? nil : [l description];
    NSString *msg;
    if ([e isKindOfClass:[RAREHTTPException class]]) {
      RAREHTTPException *he = (RAREHTTPException *) check_class_cast(e, [RAREHTTPException class]);
      msg = [((RAREHTTPException *) check_class_cast(e, [RAREHTTPException class])) getMessageBody];
      if ([((NSString *) nil_chk(msg)) hasPrefix:@"{"]) {
        @try {
          RAREUTJSONObject *o = [[RAREUTJSONObject alloc] initWithNSString:msg];
          msg = [o toStringWithInt:1];
        }
        @catch (JavaLangException *ignore) {
        }
      }
      if ([((NSString *) nil_chk(msg)) indexOfString:@"</html>"] != -1) {
        msg = [msg replaceAll:@"(?s)<[^>]*>(\\s*<[^>]*>)*" withReplacement:@" "];
      }
      msg = [NSString stringWithFormat:@"%@\n%@", [((RAREHTTPException *) nil_chk(he)) getStatus], msg];
      if (url == nil) {
        url = [he getHREF];
      }
    }
    else if ([e isKindOfClass:[CCPBVMessageException class]]) {
      msg = [((CCPBVMessageException *) check_class_cast(e, [CCPBVMessageException class])) getMessage];
    }
    else if (([e isKindOfClass:[RAREApplicationException class]]) && [((RAREApplicationException *) check_class_cast(e, [RAREApplicationException class])) getCauseEx] == nil) {
      msg = [((JavaLangThrowable *) nil_chk(e)) getMessage];
    }
    else {
      RAREErrorInformation *ei = [[RAREErrorInformation alloc] initWithJavaLangThrowable:e];
      msg = [ei toAlertPanelString];
    }
    JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
    if (url != nil) {
      (void) [sb appendWithNSString:@"An error occured when attempting to perform the following url:\n"];
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:url])) appendWithNSString:@"\n\n"];
    }
    (void) [sb appendWithNSString:msg];
    NSString *data = [((CCPBVaRemoteService *) check_class_cast(serviceObject_, [CCPBVaRemoteService class])) getDebugOutput];
    if (data != nil) {
      (void) [sb appendWithNSString:@"\nAdditional debug output:\n"];
      (void) [sb appendWithNSString:data];
    }
    e = [[CCPBVNonFatalServiceException alloc] initWithNSString:[sb description]];
  }
  return [super getExceptionInputStreamWithCCPBVHttpHeaders:headers withJavaLangThrowable:e];
}

- (void)connectToService {
  CCPBVFHIRFHIRHttpURLConnection_lastConnectTime_ = [JavaLangSystem currentTimeMillis];
  @try {
    [super connectToService];
  }
  @catch (JavaLangException *e) {
    if ([e isKindOfClass:[RAREHTTPException class]]) {
      RAREHTTPException *he = (RAREHTTPException *) check_class_cast(e, [RAREHTTPException class]);
      if (([((RAREHTTPException *) nil_chk(he)) getStatusCode] == 401) && [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) isSessionValid]) {
        [super connectToService];
        return;
      }
    }
    @throw e;
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getExceptionInputStreamWithCCPBVHttpHeaders:withJavaLangThrowable:", NULL, "LJavaIoInputStream", 0x4, NULL },
    { "connectToService", NULL, "V", 0x4, "JavaLangException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "lastConnectTime_", NULL, 0x9, "J" },
  };
  static J2ObjcClassInfo _CCPBVFHIRFHIRHttpURLConnection = { "FHIRHttpURLConnection", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 2, methods, 1, fields, 0, NULL};
  return &_CCPBVFHIRFHIRHttpURLConnection;
}

@end
