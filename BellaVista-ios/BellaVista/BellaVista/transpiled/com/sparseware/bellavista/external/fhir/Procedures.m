//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/Procedures.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/DiagnosticReport.h"
#include "com/sparseware/bellavista/external/fhir/Documents.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/FHIRUtils.h"
#include "com/sparseware/bellavista/external/fhir/Procedures.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"

@implementation CCPBVFHIRProcedures

static BOOL CCPBVFHIRProcedures_hasProcedures_;
static IOSObjectArray * CCPBVFHIRProcedures_COLUMN_NAMES_;

+ (BOOL)hasProcedures {
  return CCPBVFHIRProcedures_hasProcedures_;
}

+ (BOOL *)hasProceduresRef {
  return &CCPBVFHIRProcedures_hasProcedures_;
}

+ (IOSObjectArray *)COLUMN_NAMES {
  return CCPBVFHIRProcedures_COLUMN_NAMES_;
}

+ (void)setCOLUMN_NAMES:(IOSObjectArray *)COLUMN_NAMES {
  CCPBVFHIRProcedures_COLUMN_NAMES_ = COLUMN_NAMES;
}

- (id)init {
  if (self = [super initWithNSString:@"Procedure"]) {
    if (CCPBVFHIRProcedures_COLUMN_NAMES_ == nil) {
      CCPBVFHIRProcedures_COLUMN_NAMES_ = [IOSObjectArray arrayWithObjects:(id[]){ @"date", @"title", @"status", @"type", @"has_attachments", @"parent_id", @"document_url" } count:7 type:[IOSClass classWithClass:[NSString class]]];
      CCPBVFHIRFHIRServer_FHIRResource *r = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceWithNSString:resourceName_];
      CCPBVFHIRProcedures_hasProcedures_ = r != nil;
      searchParams_ = (NSString *) check_class_cast([((CCPBVSettings_Server *) nil_chk([server_ getServerConfig])) optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"fhir", @"vitals", @"search_params" } count:3 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
    }
    columnNames_ = CCPBVFHIRProcedures_COLUMN_NAMES_;
  }
  return self;
}

- (void)procedureWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                      withCCPBVActionPath:(CCPBVActionPath *)path
                    withJavaIoInputStream:(JavaIoInputStream *)data
                     withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  RAREActionLink *l = [self createReadLinkWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]];
  @try {
    [self readWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)reportWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                   withCCPBVActionPath:(CCPBVActionPath *)path
                 withJavaIoInputStream:(JavaIoInputStream *)data
                  withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  RAREActionLink *l = [self createReferenceReadLinkWithNSString:[self decodeLinkWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]]];
  @try {
    CCPBVFHIRDiagnosticReport *r = [[CCPBVFHIRDiagnosticReport alloc] init];
    [r readWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ headers } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)listWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  if (!CCPBVFHIRProcedures_hasProcedures_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:columnNames_ withInt:1];
    return;
  }
  RAREActionLink *l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
    [self searchWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)readWithJavaIoReader:(JavaIoReader *)r
                      withId:(id)writer
        withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
           withNSObjectArray:(IOSObjectArray *)params {
  RAREUTJSONObject *entry_ = [CCPBVFHIRaFHIRemoteService getReadEntryWithJavaIoReader:r];
  [self readEntryWithRAREUTJSONObject:entry_ withRAREUTJSONWriter:nil withJavaIoWriter:(JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ headers } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (void)readEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                 withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                     withJavaIoWriter:(JavaIoWriter *)w
                    withNSObjectArray:(IOSObjectArray *)params {
  NSString *date = [((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"performedDateTime" withNSString:nil];
  NSString *title = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"code"]];
  NSString *status = [entry_ optStringWithNSString:@"status" withNSString:nil];
  RAREUTJSONObject *o;
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
  if (date == nil) {
    date = (NSString *) check_class_cast([entry_ optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"performedPeriod", @"start" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
    if (date != nil) {
      (void) [ca setWithNSString:[CCPBVFHIRFHIRServer convertDateTimeWithNSString:date]];
      date = (NSString *) check_class_cast([entry_ optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"performedPeriod", @"end" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
      if (date != nil) {
        (void) [((RAREUTCharArray *) nil_chk([ca appendWithNSString:@" - "])) appendWithNSString:[CCPBVFHIRFHIRServer convertDateTimeWithNSString:date]];
      }
      date = [ca description];
    }
  }
  else {
    date = [CCPBVFHIRFHIRServer convertDateWithNSString:date];
  }
  CCPBVHttpHeaders *headers = (CCPBVHttpHeaders *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [CCPBVHttpHeaders class]);
  RAREUTJSONArray *attachments = [entry_ optJSONArrayWithNSString:@"report"];
  int acount = (attachments == nil) ? 0 : [attachments length];
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  if (acount > 0) {
    [headers mimeMultipartWithNSString:[CCPBVFHIRDocuments BOUNDARY]];
    [CCPBVFHIRFHIRUtils writeMultipartDocumentIndexWithNSString:@"document" withNSString:@"" withNSString:title withNSString:nil withJavaIoWriter:w];
    for (int i = 0; i < acount; i++) {
      o = [((RAREUTJSONArray *) nil_chk(attachments)) getJSONObjectWithInt:i];
      (void) [ca setWithNSString:@"/hub/main/procedures/report/"];
      (void) [ca appendWithNSString:[self encodeLinkWithNSString:[((RAREUTJSONObject *) nil_chk(o)) getStringWithNSString:@"reference"]]];
      [CCPBVFHIRFHIRUtils writeMultipartDocumentIndexWithNSString:@"document" withNSString:nil withNSString:[o optStringWithNSString:@"display"] withNSString:[ca description] withJavaIoWriter:w];
    }
    [CCPBVFHIRFHIRUtils writeMultipartSubDocumentStartWithJavaIoWriter:w withNSString:title];
  }
  else {
    [headers mimeHtml];
    [CCPBVFHIRFHIRUtils writeHTMLDocumentStartWithJavaIoWriter:w withNSString:nil];
  }
  [CCPBVFHIRFHIRUtils writeDocumentTitleWithJavaIoWriter:w withNSString:title];
  [CCPBVFHIRFHIRUtils writeTableStartWithJavaIoWriter:w];
  NSString *s = [CCPBVFHIRFHIRUtils getCodeableConceptOrReferenceTextWithRAREUTJSONObject:entry_ withNSString:@"reason" withRAREUTCharArray:ca];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.reason"] withNSString:s];
  }
  if (status != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.status"] withNSString:status];
  }
  s = [CCPBVFHIRFHIRUtils getBestMedicalCodeWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"category"]];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.category"] withNSString:s];
  }
  RAREUTJSONArray *list = [entry_ optJSONArrayWithNSString:@"bodySite"];
  if ((list != nil) && ([list length] > 0)) {
    [CCPBVFHIRFHIRUtils writeTableValueCodeableConceptWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.body_site"] withRAREUTJSONArray:list];
  }
  [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
  if ([entry_ optBooleanWithNSString:@"notPerformed" withBoolean:NO]) {
    [CCPBVFHIRFHIRUtils writeSectionStartWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.not_performed"]];
    [CCPBVFHIRFHIRUtils writeTableStartWithJavaIoWriter:w];
    list = [entry_ optJSONArrayWithNSString:@"reasonNotPerformed"];
    if ((list != nil) && ([list length] > 0)) {
      [CCPBVFHIRFHIRUtils writeTableValueCodeableConceptWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.reason"] withRAREUTJSONArray:list];
    }
    [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
    [CCPBVFHIRFHIRUtils writeSectionEndWithJavaIoWriter:w];
  }
  else {
    [CCPBVFHIRFHIRUtils writeSectionStartWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.performed"]];
    [CCPBVFHIRFHIRUtils writeTableStartWithJavaIoWriter:w];
    if (date != nil) {
      [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.date"] withNSString:date];
    }
    list = [entry_ optJSONArrayWithNSString:@"performer"];
    if ((list != nil) && ([list length] > 0)) {
      [CCPBVFHIRFHIRUtils writeTableValueActorWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.performer"] withRAREUTJSONArray:list withRAREUTCharArray:ca];
    }
    o = [entry_ optJSONObjectWithNSString:@"location"];
    if (o != nil) {
      [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.location"] withNSString:[CCPBVFHIRFHIRUtils getReferenceTextWithRAREUTJSONObject:o]];
    }
    o = [entry_ optJSONObjectWithNSString:@"outcome"];
    if (o != nil) {
      [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.outcome"] withNSString:[CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:o]];
    }
    list = [entry_ optJSONArrayWithNSString:@"complication"];
    if ((list != nil) && ([list length] > 0)) {
      [CCPBVFHIRFHIRUtils writeTableValueActorWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.complications"] withRAREUTJSONArray:list withRAREUTCharArray:ca];
    }
    list = [entry_ optJSONArrayWithNSString:@"followUp"];
    if ((list != nil) && ([list length] > 0)) {
      [CCPBVFHIRFHIRUtils writeTableValueCodeableConceptWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.follow_up"] withRAREUTJSONArray:list];
    }
    list = [entry_ optJSONArrayWithNSString:@"used"];
    if ((list != nil) && ([list length] > 0)) {
      [CCPBVFHIRFHIRUtils writeTableValueCodeableConceptWithJavaIoWriter:w withNSString:[self getResourceAsStringWithNSString:@"bv.text.items_used"] withRAREUTJSONArray:list];
    }
    [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
    [CCPBVFHIRFHIRUtils writeSectionEndWithJavaIoWriter:w];
  }
  o = [entry_ optJSONObjectWithNSString:@"text"];
  if (o != nil) {
    [CCPBVFHIRFHIRUtils writeTextWithJavaIoWriter:w withRAREUTJSONObject:o withBoolean:YES withBoolean:NO];
  }
  list = [entry_ optJSONArrayWithNSString:@"notes"];
  if (list != nil) {
    [CCPBVFHIRFHIRUtils writeNotesWithJavaIoWriter:w withRAREUTJSONArray:list];
  }
  if (acount > 0) {
    [CCPBVFHIRFHIRUtils writeMultipartSubDocumentFinishWithJavaIoWriter:w];
    [CCPBVFHIRFHIRUtils writeMultipartDocumentFinishWithJavaIoWriter:w];
  }
  else {
    [CCPBVFHIRFHIRUtils writeHTMLDocumentFinishWithJavaIoWriter:w];
  }
}

- (void)processEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                    withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                        withJavaIoWriter:(JavaIoWriter *)w
                     withRAREUTCharArray:(RAREUTCharArray *)ca
                       withNSObjectArray:(IOSObjectArray *)params {
  if (![((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:resourceName_]) {
    return;
  }
  BOOL parsed = NO;
  do {
    NSString *dateld = [self getIDWithRAREUTJSONObject:entry_];
    NSString *date = [entry_ optStringWithNSString:@"performedDateTime" withNSString:nil];
    NSString *title = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"code"]];
    NSString *status = [entry_ optStringWithNSString:@"status"];
    NSString *type = @"P";
    NSString *has_attachments = nil;
    if (date == nil) {
      date = (NSString *) check_class_cast([entry_ optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"performedPeriod", @"start" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
    }
    if ((title == nil) || ([title sequenceLength] == 0)) {
      if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDebugMode]) {
        title = [CCPBVFHIRaFHIRemoteService MISSING_INVALID];
      }
      else {
        @throw [self missingRequiredDataWithNSString:@"code" withNSString:dateld];
      }
    }
    if ((dateld == nil) || ([dateld sequenceLength] == 0)) {
      if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDebugMode]) {
        dateld = [CCPBVFHIRaFHIRemoteService BAD_ID];
      }
      else {
        @throw [self missingRequiredDataWithNSString:@"id" withNSString:dateld];
      }
    }
    if (date == nil) {
      date = @"";
    }
    RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:@"report"];
    has_attachments = ((a != nil) && ([a length] > 0)) ? @"true" : @"false";
    if (jw != nil) {
      (void) [jw object];
      if (date != nil) {
        if (dateld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:dateld])) keyWithNSString:@"value"])) valueWithId:date];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) valueWithId:date];
        }
      }
      if (title != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"title"])) valueWithId:title];
      }
      if (status != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"status"])) valueWithId:status];
      }
      if (type != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"type"])) valueWithId:type];
      }
      if (has_attachments != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"has_attachments"])) valueWithId:has_attachments];
      }
      (void) [jw endObject];
    }
    else {
      if (date != nil) {
        if (dateld != nil) {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:dateld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:date withRAREUTCharArray:ca];
      }
      [((JavaIoWriter *) nil_chk(w)) writeWithInt:(unichar) '^'];
      if (title != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:title withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (status != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:status withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (type != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:type withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (has_attachments != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:has_attachments withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) 0x000a];
    }
    parsed = YES;
  }
  while (NO);
  if (!parsed) {
    [self debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [entry_ toStringWithInt:2]]];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "procedureWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "reportWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "listWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "readWithJavaIoReader:withId:withCCPBVHttpHeaders:withNSObjectArray:", NULL, "V", 0x84, "JavaIoIOException" },
    { "readEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "processEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withRAREUTCharArray:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "hasProcedures_", NULL, 0xc, "Z" },
    { "COLUMN_NAMES_", NULL, 0xc, "LIOSObjectArray" },
  };
  static J2ObjcClassInfo _CCPBVFHIRProcedures = { "Procedures", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_CCPBVFHIRProcedures;
}

@end
@implementation CCPBVFHIRProcedures_DagnosticReportProcedures

- (id)initWithCCPBVFHIRProcedures:(CCPBVFHIRProcedures *)outer$ {
  if (self = [super init]) {
    columnNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"date", @"title", @"status", @"type", @"has_attachments", @"parent_id", @"document_url" } count:7 type:[IOSClass classWithClass:[NSString class]]];
  }
  return self;
}

- (JavaUtilHashMap *)getCategoryCodes {
  return [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getProcedureCategories];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getCategoryCodes", NULL, "LJavaUtilHashMap", 0x4, NULL },
  };
  static J2ObjcClassInfo _CCPBVFHIRProcedures_DagnosticReportProcedures = { "DagnosticReportProcedures", "com.sparseware.bellavista.external.fhir", "Procedures", 0x0, 1, methods, 0, NULL, 0, NULL};
  return &_CCPBVFHIRProcedures_DagnosticReportProcedures;
}

@end
