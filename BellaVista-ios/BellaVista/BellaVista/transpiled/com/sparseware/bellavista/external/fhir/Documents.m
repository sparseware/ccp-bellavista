//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/Documents.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/net/iURLConnection.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/Documents.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/FHIRUtils.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"

@implementation CCPBVFHIRDocuments

static NSString * CCPBVFHIRDocuments_BOUNDARY_ = @"__FF00_SIRF_MULTIPART_BOUNDARY_PART_OOFF__";
static NSString * CCPBVFHIRDocuments_BOUNDARY_START_ = @"\x0d\n--__FF00_SIRF_MULTIPART_BOUNDARY_PART_OOFF__\x0d\n";
static NSString * CCPBVFHIRDocuments_BOUNDARY_END_ = @"\x0d\n--__FF00_SIRF_MULTIPART_BOUNDARY_PART_OOFF__--\x0d\n";
static BOOL CCPBVFHIRDocuments_hasDocuments_;
static IOSObjectArray * CCPBVFHIRDocuments_COLUMN_NAMES_;
static RAREUTJSONObject * CCPBVFHIRDocuments_setAttachments_;

+ (NSString *)BOUNDARY {
  return CCPBVFHIRDocuments_BOUNDARY_;
}

+ (NSString *)BOUNDARY_START {
  return CCPBVFHIRDocuments_BOUNDARY_START_;
}

+ (NSString *)BOUNDARY_END {
  return CCPBVFHIRDocuments_BOUNDARY_END_;
}

+ (BOOL)hasDocuments {
  return CCPBVFHIRDocuments_hasDocuments_;
}

+ (BOOL *)hasDocumentsRef {
  return &CCPBVFHIRDocuments_hasDocuments_;
}

+ (IOSObjectArray *)COLUMN_NAMES {
  return CCPBVFHIRDocuments_COLUMN_NAMES_;
}

+ (void)setCOLUMN_NAMES:(IOSObjectArray *)COLUMN_NAMES {
  CCPBVFHIRDocuments_COLUMN_NAMES_ = COLUMN_NAMES;
}

+ (RAREUTJSONObject *)setAttachments {
  return CCPBVFHIRDocuments_setAttachments_;
}

+ (void)setSetAttachments:(RAREUTJSONObject *)setAttachments {
  CCPBVFHIRDocuments_setAttachments_ = setAttachments;
}

- (id)init {
  if (self = [self initCCPBVFHIRDocumentsWithNSString:@"DocumentReference"]) {
    docReferences_ = YES;
  }
  return self;
}

- (id)initCCPBVFHIRDocumentsWithNSString:(NSString *)resourceName {
  if (self = [super initWithNSString:resourceName]) {
    if (CCPBVFHIRDocuments_COLUMN_NAMES_ == nil) {
      CCPBVFHIRDocuments_COLUMN_NAMES_ = [IOSObjectArray arrayWithObjects:(id[]){ @"date", @"title", @"author", @"status", @"type", @"has_attachments", @"parent_id", @"data_url" } count:8 type:[IOSClass classWithClass:[NSString class]]];
      CCPBVFHIRFHIRServer_FHIRResource *r = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceWithNSString:resourceName];
      CCPBVFHIRDocuments_hasDocuments_ = r != nil;
      searchParams_ = (NSString *) check_class_cast([((CCPBVSettings_Server *) nil_chk([server_ getServerConfig])) optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"fhir", @"vitals", @"search_params" } count:3 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
    }
    columnNames_ = CCPBVFHIRDocuments_COLUMN_NAMES_;
  }
  return self;
}

- (id)initWithNSString:(NSString *)resourceName {
  return [self initCCPBVFHIRDocumentsWithNSString:resourceName];
}

- (void)categoriesWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                       withCCPBVActionPath:(CCPBVActionPath *)path
                     withJavaIoInputStream:(JavaIoInputStream *)data
                      withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:NO withCCPBVHttpHeaders:headers];
}

- (void)documentWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  RAREActionLink *l = [self createReadLinkWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]];
  @try {
    [self readWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)document_directWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                            withCCPBVActionPath:(CCPBVActionPath *)path
                          withJavaIoInputStream:(JavaIoInputStream *)data
                           withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  id<JavaUtilMap> map = [self getQueryParamsWithJavaNetURL:[((id<CCPBViHttpConnection>) nil_chk(conn)) getURL] withJavaIoInputStream:data];
  NSString *url = [((id<JavaUtilMap>) nil_chk(map)) getWithId:@"url"];
  NSString *content_type = [map getWithId:@"content_type"];
  RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) createLinkWithNSString:url];
  if (content_type != nil) {
    [((RAREActionLink *) nil_chk(l)) setRequestHeaderWithNSString:@"Accept" withNSString:content_type];
    if ([content_type hasPrefix:@"text/plain"]) {
      [self sendTextAsHTMLWithCCPBViHttpConnection:conn withCCPBVHttpHeaders:headers withNSString:@"" withNSString:[CCPBVFHIRFHIRUtils getDataAsStringWithNSString:url withNSString:content_type]];
      return;
    }
    if ([content_type hasPrefix:@"image/"]) {
      [self sendImageAsHTMLWithCCPBViHttpConnection:conn withCCPBVHttpHeaders:headers withNSString:@"" withNSString:content_type withNSString:[CCPBVFHIRFHIRUtils getDataAsBase64StringWithNSString:url withNSString:content_type]];
      return;
    }
    if ([content_type hasPrefix:@"application/json+fhir"]) {
      @try {
        [self readWithJavaIoReader:[l getReader] withId:[conn getContentWriter] withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
      }
      @finally {
        [l close];
      }
      return;
    }
  }
  [conn setConnectionPipeWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *) check_class_cast([((id<RAREiURLConnection>) nil_chk([((RAREActionLink *) nil_chk(l)) getConnection])) getConnectionObject], [JavaNetHttpURLConnection class])];
}

- (void)listWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  if (!CCPBVFHIRDocuments_hasDocuments_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:columnNames_ withInt:1];
    return;
  }
  RAREActionLink *l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
    [self searchWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)processEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                    withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                        withJavaIoWriter:(JavaIoWriter *)w
                     withRAREUTCharArray:(RAREUTCharArray *)ca
                       withNSObjectArray:(IOSObjectArray *)params {
  id v;
  RAREUTJSONObject *o;
  BOOL parsed = NO;
  if (![((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:resourceName_]) {
    return;
  }
  do {
    NSString *dateld = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getIDWithNSString:[entry_ optStringWithNSString:@"id"] withBoolean:NO];
    NSString *date = [entry_ optStringWithNSString:docReferences_ ? @"created" : @"date"];
    NSString *title = [entry_ optStringWithNSString:docReferences_ ? @"description" : @"title"];
    NSString *authorld = nil;
    NSString *author = nil;
    NSString *status = nil;
    NSString *type = nil;
    NSString *data_url = nil;
    NSString *has_attachments = nil;
    v = [entry_ optWithNSString:@"type"];
    if ((title == nil) || ([title sequenceLength] == 0)) {
      title = [CCPBVFHIRaFHIRemoteService MISSING_INVALID];
    }
    if ([v isKindOfClass:[NSString class]]) {
      type = (NSString *) check_class_cast(v, [NSString class]);
    }
    else if ([v isKindOfClass:[RAREUTJSONObject class]]) {
      type = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:(RAREUTJSONObject *) check_class_cast(v, [RAREUTJSONObject class])];
    }
    RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:@"content"];
    if (docReferences_) {
      if ((a != nil) && ![a isEmpty]) {
        a = [CCPBVFHIRDocuments resolveContentArrayWithRAREUTJSONArray:a withRAREUTCharArray:ca];
        if ([((RAREUTJSONArray *) nil_chk(a)) length] > 1) {
          has_attachments = @"true";
        }
        else {
          o = [((RAREUTJSONObject *) nil_chk([a getJSONObjectWithInt:0])) getJSONObjectWithNSString:@"attachment"];
          NSString *s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"contentType"];
          if ([((NSString *) nil_chk(s)) hasPrefix:@"text/"] || [s hasPrefix:@"image/"]) {
            data_url = [CCPBVFHIRDocuments createAttachmentHREFWithNSString:dateld withRAREUTJSONObject:o withRAREUTCharArray:ca];
          }
        }
      }
    }
    v = [entry_ optWithNSString:@"status"];
    if ([v isKindOfClass:[NSString class]]) {
      status = (NSString *) check_class_cast(v, [NSString class]);
    }
    else if ([v isKindOfClass:[RAREUTJSONObject class]]) {
      status = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONArray:(RAREUTJSONArray *) check_class_cast(v, [RAREUTJSONArray class])];
    }
    o = [entry_ optJSONObjectWithNSString:@"author"];
    if (o != nil) {
      authorld = [server_ getIDWithNSString:[o optStringWithNSString:@"reference"] withBoolean:NO];
      author = [o optStringWithNSString:@"display"];
    }
    if (jw != nil) {
      (void) [jw object];
      if (date != nil) {
        if (dateld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:dateld])) keyWithNSString:@"value"])) valueWithId:date];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) valueWithId:date];
        }
      }
      if (title != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"title"])) valueWithId:title];
      }
      if (author != nil) {
        if (authorld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"author"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:authorld])) keyWithNSString:@"value"])) valueWithId:author];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"author"])) valueWithId:author];
        }
      }
      if (status != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"status"])) valueWithId:status];
      }
      if (type != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"type"])) valueWithId:type];
      }
      if (has_attachments != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"has_attachments"])) valueWithId:has_attachments];
      }
      if (data_url != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"data_url"])) valueWithId:data_url];
      }
      (void) [jw endObject];
    }
    else {
      if (date != nil) {
        if (dateld != nil) {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:dateld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:date withRAREUTCharArray:ca];
      }
      [((JavaIoWriter *) nil_chk(w)) writeWithInt:(unichar) '^'];
      if (title != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:title withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (author != nil) {
        if (authorld != nil) {
          [w writeWithNSString:authorld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:author withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (status != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:status withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (type != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:type withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (has_attachments != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:has_attachments withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      if (data_url != nil) {
        [w writeWithNSString:data_url];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) 0x000a];
    }
    parsed = YES;
  }
  while (NO);
  if (!parsed) {
    [self debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [entry_ toStringWithInt:2]]];
  }
}

- (void)readEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                 withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                     withJavaIoWriter:(JavaIoWriter *)w
                    withNSObjectArray:(IOSObjectArray *)params {
  if (![((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:@"Composition"]) {
    docReferences_ = NO;
  }
  CCPBVHttpHeaders *headers = (CCPBVHttpHeaders *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [CCPBVHttpHeaders class]);
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:docReferences_ ? @"content" : @"sanction"];
  if (docReferences_) {
    a = [CCPBVFHIRDocuments resolveContentArrayWithRAREUTJSONArray:a withRAREUTCharArray:nil];
  }
  if ((a != nil) && ([a length] > 1)) {
    [headers mimeMultipartWithNSString:CCPBVFHIRDocuments_BOUNDARY_];
    if (docReferences_) {
      RAREUTJSONObject *ao = [((RAREUTJSONObject *) nil_chk([a getJSONObjectWithInt:0])) getJSONObjectWithNSString:@"attachment"];
      NSString *type = [((RAREUTJSONObject *) nil_chk(ao)) optStringWithNSString:@"contentType" withNSString:@"text/plain"];
      if (![((NSString *) nil_chk(type)) hasPrefix:@"text/"]) {
        [a addWithInt:0 withId:[CCPBVFHIRDocuments getSeeAttachmentsObject]];
      }
    }
  }
  else {
    [headers mimeHtml];
  }
  if (docReferences_) {
    [CCPBVFHIRDocuments processContentWithRAREUTJSONArray:a withJavaIoWriter:w];
  }
  else {
    [CCPBVFHIRDocuments processSectionWithRAREUTJSONObject:entry_ withJavaIoWriter:w withBoolean:NO];
  }
}

+ (void)writeAttachmentsAsDocumentWithRAREUTJSONArray:(RAREUTJSONArray *)a
                                     withJavaIoWriter:(JavaIoWriter *)w
                                 withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  RAREUTJSONObject *ao = [((RAREUTJSONArray *) nil_chk(a)) getJSONObjectWithInt:0];
  NSString *type = [((RAREUTJSONObject *) nil_chk(ao)) optStringWithNSString:@"contentType" withNSString:@"text/plain"];
  if ([a length] > 1) {
    [((CCPBVHttpHeaders *) nil_chk(headers)) mimeMultipartWithNSString:CCPBVFHIRDocuments_BOUNDARY_];
    if (![((NSString *) nil_chk(type)) hasPrefix:@"text/"]) {
      [a addWithInt:0 withId:[CCPBVFHIRDocuments getSeeAttachmentsObject]];
    }
    [CCPBVFHIRDocuments processAttachmentsWithRAREUTJSONArray:a withJavaIoWriter:w];
  }
  else {
    [((CCPBVHttpHeaders *) nil_chk(headers)) mimeHtml];
    [CCPBVFHIRFHIRUtils writeAttachmentWithRAREUTJSONObject:ao withJavaIoWriter:w withBoolean:NO];
  }
}

+ (void)writeAttachmentDocumentIndexWithNSString:(NSString *)id_
                            withRAREUTJSONObject:(RAREUTJSONObject *)attachment
                                withJavaIoWriter:(JavaIoWriter *)w
                                     withBoolean:(BOOL)main
                             withRAREUTCharArray:(RAREUTCharArray *)ca {
  NSString *title = [((RAREUTJSONObject *) nil_chk(attachment)) optStringWithNSString:@"title" withNSString:nil];
  if (title == nil) {
    title = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getResourceAsStringWithNSString:@"bv.text.attachment"];
  }
  NSString *mime = [attachment optStringWithNSString:@"contentType" withNSString:@"text/plain"];
  NSString *type;
  if ([((NSString *) nil_chk(mime)) hasPrefix:@"text/"]) {
    type = @"document";
  }
  else if ([mime hasPrefix:@"image/"]) {
    type = @"image";
  }
  else {
    type = [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk(ca)) setWithNSString:@"custom:"])) appendWithNSString:mime])) description];
  }
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:type])) appendWithChar:'^'])) appendWithJavaLangCharSequence:title];
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"^"])) appendWithJavaLangCharSequence:[attachment optStringWithNSString:@"creation"]])) appendWithJavaLangCharSequence:@"^"])) appendWithJavaLangCharSequence:main ? @"true" : @"false"];
  (void) [w appendWithJavaLangCharSequence:@"^"];
  if (!main) {
    NSString *url = [CCPBVFHIRDocuments createAttachmentHREFWithNSString:id_ withRAREUTJSONObject:attachment withRAREUTCharArray:ca];
    if (url != nil) {
      [w writeWithNSString:url];
    }
  }
  (void) [w appendWithJavaLangCharSequence:@"\n"];
}

+ (void)processContentWithRAREUTJSONArray:(RAREUTJSONArray *)a
                         withJavaIoWriter:(JavaIoWriter *)w {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  if (len > 0) {
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    RAREUTJSONObject *content = [a getJSONObjectWithInt:0];
    if (len > 1) {
      [CCPBVFHIRDocuments writeAttachmentDocumentIndexWithNSString:[((RAREUTJSONObject *) nil_chk(content)) optStringWithNSString:@"id" withNSString:nil] withRAREUTJSONObject:[content getJSONObjectWithNSString:@"attachment"] withJavaIoWriter:w withBoolean:YES withRAREUTCharArray:ca];
      for (int i = 1; i < len; i++) {
        content = [a getJSONObjectWithInt:i];
        [CCPBVFHIRDocuments writeAttachmentDocumentIndexWithNSString:[((RAREUTJSONObject *) nil_chk(content)) optStringWithNSString:@"id" withNSString:nil] withRAREUTJSONObject:[content getJSONObjectWithNSString:@"attachment"] withJavaIoWriter:w withBoolean:NO withRAREUTCharArray:ca];
      }
    }
    [CCPBVFHIRFHIRUtils writeAttachmentWithRAREUTJSONObject:[((RAREUTJSONObject *) nil_chk(content)) getJSONObjectWithNSString:@"attachment"] withJavaIoWriter:w withBoolean:len > 1];
    if (len > 1) {
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRDocuments_BOUNDARY_END_];
    }
  }
}

+ (void)processAttachmentsWithRAREUTJSONArray:(RAREUTJSONArray *)a
                             withJavaIoWriter:(JavaIoWriter *)w {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
  if (len > 1) {
    [CCPBVFHIRDocuments writeAttachmentDocumentIndexWithNSString:nil withRAREUTJSONObject:[a getJSONObjectWithInt:0] withJavaIoWriter:w withBoolean:YES withRAREUTCharArray:ca];
    for (int i = 1; i < len; i++) {
      RAREUTJSONObject *o = [a getJSONObjectWithInt:i];
      [CCPBVFHIRDocuments writeAttachmentDocumentIndexWithNSString:[((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"id"] withRAREUTJSONObject:o withJavaIoWriter:w withBoolean:NO withRAREUTCharArray:ca];
    }
  }
  [CCPBVFHIRFHIRUtils writeAttachmentWithRAREUTJSONObject:[a getJSONObjectWithInt:0] withJavaIoWriter:w withBoolean:len > 1];
  if (len > 1) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRDocuments_BOUNDARY_END_];
  }
}

- (void)readWithJavaIoReader:(JavaIoReader *)r
                      withId:(id)writer
        withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
           withNSObjectArray:(IOSObjectArray *)params {
  RAREUTJSONObject *entry_ = [CCPBVFHIRaFHIRemoteService getReadEntryWithJavaIoReader:r];
  [self readEntryWithRAREUTJSONObject:entry_ withRAREUTJSONWriter:nil withJavaIoWriter:(JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]) withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ headers } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
}

+ (RAREUTJSONObject *)getSeeAttachmentsObject {
  if (CCPBVFHIRDocuments_setAttachments_ == nil) {
    NSString *s = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getResourceAsStringWithNSString:@"bv.text.see_report_attachments"];
    s = [RAREFunctions base64NOLFWithNSString:s];
    RAREUTJSONObject *content = [[RAREUTJSONObject alloc] init];
    RAREUTJSONObject *attachment = [((RAREUTJSONObject *) nil_chk([((RAREUTJSONObject *) [[RAREUTJSONObject alloc] init]) putWithNSString:@"contentType" withId:@"text/html"])) putWithNSString:@"data" withId:s];
    (void) [content putWithNSString:@"attachment" withJavaUtilMap:attachment];
    CCPBVFHIRDocuments_setAttachments_ = content;
  }
  return CCPBVFHIRDocuments_setAttachments_;
}

+ (RAREUTJSONArray *)resolveContentArrayWithRAREUTJSONArray:(RAREUTJSONArray *)a
                                        withRAREUTCharArray:(RAREUTCharArray *)ca {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  NSString *type = nil;
  RAREUTJSONObject *best = nil;
  NSString *bestKey = nil;
  NSString *s;
  JavaUtilLinkedHashMap *map = [[JavaUtilLinkedHashMap alloc] initWithInt:len];
  if (ca == nil) {
    ca = [[RAREUTCharArray alloc] init];
  }
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *content = [a getJSONObjectWithInt:i];
    RAREUTJSONObject *o = [((RAREUTJSONObject *) nil_chk(content)) optJSONObjectWithNSString:@"format"];
    s = (o == nil) ? nil : [CCPBVFHIRFHIRUtils getBestMedicalCodeWithRAREUTJSONObject:o];
    (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:(s == nil) ? @"" : s];
    o = [content getJSONObjectWithNSString:@"attachment"];
    s = [o optStringWithNSString:@"url" withNSString:[NSString valueOfInt:[((RAREUTJSONObject *) nil_chk(o)) hash]]];
    (void) [((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"^"])) appendWithNSString:(s == nil) ? @"" : s];
    s = [ca description];
    type = [o optStringWithNSString:@"contentType" withNSString:nil];
    if (type != nil) {
      (void) [content putWithNSString:@"_type" withId:type];
      if ([type hasPrefix:@"text/html"]) {
        best = content;
        bestKey = s;
      }
      else if ((best == nil) && [type hasPrefix:@"text/"]) {
        best = content;
        bestKey = s;
      }
    }
    else if (best == nil) {
      best = content;
      bestKey = s;
    }
    RAREUTJSONObject *econtent = [map getWithId:s];
    if (econtent != nil) {
      if ((type != nil) && [type hasPrefix:@"image/"]) {
        NSString *etype = [((RAREUTJSONObject *) nil_chk([econtent getJSONObjectWithNSString:@"attachment"])) optStringWithNSString:@"contentType" withNSString:nil];
        if (etype != nil) {
          if ([type hasPrefix:@"image/svg"]) {
            (void) [map putWithId:s withId:content];
          }
          else if ([type hasPrefix:@"image/jpeg"] && ![etype hasPrefix:@"image/svg"]) {
            (void) [map putWithId:s withId:content];
          }
          else if ([type hasPrefix:@"image/png"] && ![etype hasPrefix:@"image/jpeg"] && ![etype hasPrefix:@"image/svg"]) {
            (void) [map putWithId:s withId:content];
          }
        }
        else {
          (void) [map putWithId:s withId:content];
        }
      }
    }
    else {
      (void) [map putWithId:s withId:content];
    }
    if ((s != nil) && [s hasPrefix:@"text/"]) {
      if (type == nil) {
        type = s;
        best = content;
      }
      else if ([s hasPrefix:@"text/html"]) {
        type = s;
        best = content;
      }
    }
  }
  a = [[RAREUTJSONArray alloc] init];
  if (bestKey != nil) {
    (void) [map removeWithId:bestKey];
    [a addWithId:best];
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([map values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [a addWithId:[it next]];
  }
  return a;
}

+ (void)writeSectionDocumentIndexWithNSString:(NSString *)type
                         withRAREUTJSONObject:(RAREUTJSONObject *)section
                             withJavaIoWriter:(JavaIoWriter *)w
                                  withBoolean:(BOOL)main {
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:type])) appendWithChar:'^'])) appendWithJavaLangCharSequence:[((RAREUTJSONObject *) nil_chk(section)) optStringWithNSString:@"title"]];
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"^"])) appendWithJavaLangCharSequence:[section optStringWithNSString:@"date"]])) appendWithJavaLangCharSequence:@"^"])) appendWithJavaLangCharSequence:main ? @"true" : @"false"];
  (void) [w appendWithJavaLangCharSequence:@"^\n"];
}

+ (NSString *)createAttachmentHREFWithNSString:(NSString *)contenid
                          withRAREUTJSONObject:(RAREUTJSONObject *)attachment
                           withRAREUTCharArray:(RAREUTCharArray *)ca {
  NSString *url = [((RAREUTJSONObject *) nil_chk(attachment)) optStringWithNSString:@"url" withNSString:nil];
  if ((url != nil) && [url hasPrefix:@"data:"]) {
    url = nil;
  }
  if (url != nil) {
    if ([url hasPrefix:@"/"]) {
      url = [url substring:1];
    }
    NSString *s = [attachment optStringWithNSString:@"contentType" withNSString:nil];
    (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:@"/hub/main/documents/document_direct?url="];
    (void) [ca appendWithNSString:[RAREFunctions encodeUrlWithNSString:url]];
    if (s != nil) {
      (void) [((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"&content_type="])) appendWithNSString:[RAREFunctions encodeWithNSString:s]];
    }
    url = [ca description];
  }
  return url;
}

+ (void)processSectionWithRAREUTJSONObject:(RAREUTJSONObject *)section
                          withJavaIoWriter:(JavaIoWriter *)w
                               withBoolean:(BOOL)child {
  NSString *date = [((RAREUTJSONObject *) nil_chk(section)) optStringWithNSString:@"date"];
  RAREUTJSONArray *sections = [section optJSONArrayWithNSString:@"section"];
  int len = (sections == nil) ? 0 : [sections length];
  if (len > 0) {
    [CCPBVFHIRDocuments writeSectionDocumentIndexWithNSString:@"document" withRAREUTJSONObject:section withJavaIoWriter:w withBoolean:YES];
    for (int i = 0; i < len; i++) {
      RAREUTJSONObject *o = [((RAREUTJSONArray *) nil_chk(sections)) getJSONObjectWithInt:i];
      [CCPBVFHIRDocuments writeSectionDocumentIndexWithNSString:@"document" withRAREUTJSONObject:o withJavaIoWriter:w withBoolean:NO];
    }
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRDocuments_BOUNDARY_START_];
    [w writeWithNSString:@"Content-Type: text/html\x0d\n\x0d\n"];
  }
  else if (child) {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRDocuments_BOUNDARY_START_];
    [w writeWithNSString:@"Content-Type: text/html\x0d\n\x0d\n"];
  }
  [CCPBVFHIRDocuments writeSectionWithRAREUTJSONObject:section withJavaIoWriter:w];
  if (len > 0) {
    [CCPBVFHIRDocuments processSectionsWithNSString:date withRAREUTJSONArray:sections withJavaIoWriter:w];
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRDocuments_BOUNDARY_END_];
  }
}

+ (void)processSectionsWithNSString:(NSString *)date
                withRAREUTJSONArray:(RAREUTJSONArray *)sections
                   withJavaIoWriter:(JavaIoWriter *)w {
  int len = [((RAREUTJSONArray *) nil_chk(sections)) length];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [sections getJSONObjectWithInt:i];
    if (![((RAREUTJSONObject *) nil_chk(o)) containsKeyWithId:@"date"]) {
      (void) [o putWithNSString:@"date" withId:date];
    }
    [CCPBVFHIRDocuments processSectionWithRAREUTJSONObject:o withJavaIoWriter:w withBoolean:YES];
  }
}

+ (void)writeSectionWithRAREUTJSONObject:(RAREUTJSONObject *)section
                        withJavaIoWriter:(JavaIoWriter *)w {
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:@"<html><head><title>"])) appendWithJavaLangCharSequence:[((RAREUTJSONObject *) nil_chk(section)) optStringWithNSString:@"title"]];
  (void) [w appendWithJavaLangCharSequence:@"</title></head><body>\n"];
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"<h1 class='fhir_title'>"])) appendWithJavaLangCharSequence:@"title"])) appendWithJavaLangCharSequence:@"</h1>\n"];
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"<h3 class='fhir_section'>"])) appendWithJavaLangCharSequence:[section optStringWithNSString:@"title"]])) appendWithJavaLangCharSequence:@"</h3>\n"];
  (void) [w appendWithJavaLangCharSequence:@"<div class='fhir_section_div'>\n"];
  id o = [section optWithNSString:@"text"];
  NSString *s = @"";
  if ([o isKindOfClass:[NSString class]]) {
    s = (NSString *) check_class_cast(o, [NSString class]);
  }
  else if ([o isKindOfClass:[RAREUTJSONObject class]]) {
    s = [((RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class])) optStringWithNSString:@"div"];
  }
  (void) [w appendWithJavaLangCharSequence:s];
  (void) [w appendWithJavaLangCharSequence:@"\n</div>\n"];
  (void) [w appendWithJavaLangCharSequence:@"\n</body></html>"];
}

- (void)copyAllFieldsTo:(CCPBVFHIRDocuments *)other {
  [super copyAllFieldsTo:other];
  other->docReferences_ = docReferences_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "categoriesWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "documentWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "document_directWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "listWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "processEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withRAREUTCharArray:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "readEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "writeAttachmentsAsDocumentWithRAREUTJSONArray:withJavaIoWriter:withCCPBVHttpHeaders:", NULL, "V", 0x9, "JavaIoIOException" },
    { "writeAttachmentDocumentIndexWithNSString:withRAREUTJSONObject:withJavaIoWriter:withBoolean:withRAREUTCharArray:", NULL, "V", 0x9, "JavaIoIOException" },
    { "processContentWithRAREUTJSONArray:withJavaIoWriter:", NULL, "V", 0x9, "JavaIoIOException" },
    { "processAttachmentsWithRAREUTJSONArray:withJavaIoWriter:", NULL, "V", 0x9, "JavaIoIOException" },
    { "readWithJavaIoReader:withId:withCCPBVHttpHeaders:withNSObjectArray:", NULL, "V", 0x84, "JavaIoIOException" },
    { "getSeeAttachmentsObject", NULL, "LRAREUTJSONObject", 0x8, NULL },
    { "resolveContentArrayWithRAREUTJSONArray:withRAREUTCharArray:", NULL, "LRAREUTJSONArray", 0x9, NULL },
    { "writeSectionDocumentIndexWithNSString:withRAREUTJSONObject:withJavaIoWriter:withBoolean:", NULL, "V", 0x9, "JavaIoIOException" },
    { "createAttachmentHREFWithNSString:withRAREUTJSONObject:withRAREUTCharArray:", NULL, "LNSString", 0x9, NULL },
    { "processSectionWithRAREUTJSONObject:withJavaIoWriter:withBoolean:", NULL, "V", 0x8, "JavaIoIOException" },
    { "processSectionsWithNSString:withRAREUTJSONArray:withJavaIoWriter:", NULL, "V", 0x8, "JavaIoIOException" },
    { "writeSectionWithRAREUTJSONObject:withJavaIoWriter:", NULL, "V", 0x8, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "BOUNDARY_", NULL, 0x19, "LNSString" },
    { "BOUNDARY_START_", NULL, 0x19, "LNSString" },
    { "BOUNDARY_END_", NULL, 0x19, "LNSString" },
    { "hasDocuments_", NULL, 0xc, "Z" },
    { "COLUMN_NAMES_", NULL, 0xc, "LIOSObjectArray" },
    { "setAttachments_", NULL, 0xc, "LRAREUTJSONObject" },
    { "docReferences_", NULL, 0x0, "Z" },
  };
  static J2ObjcClassInfo _CCPBVFHIRDocuments = { "Documents", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 18, methods, 7, fields, 0, NULL};
  return &_CCPBVFHIRDocuments;
}

@end
