//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/util/Patients.java
//
//  Created by decoteaud on 3/14/16.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/CharScanner.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONTokener.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/MessageException.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/FHIRJSONWatcher.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/FHIRUtils.h"
#include "com/sparseware/bellavista/external/fhir/LinkWaiter.h"
#include "com/sparseware/bellavista/external/fhir/Patient.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/external/fhir/util/Patients.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@implementation CCPBVFHIRPatients

static NSString * CCPBVFHIRPatients_MOST_RECENT_KEY_;
static BOOL CCPBVFHIRPatients_myPatientsSupported_;
static BOOL CCPBVFHIRPatients_nameComponentsSearchSupported_;
static BOOL CCPBVFHIRPatients_identifierSearchSupported_;
static BOOL CCPBVFHIRPatients_idSearchSupported_;
static BOOL CCPBVFHIRPatients_dobSearchSupported_;
static BOOL CCPBVFHIRPatients_genderSearchSupported_;
static BOOL CCPBVFHIRPatients_getEncounter_ = YES;
static JavaUtilArrayList * CCPBVFHIRPatients_mostRecent_;
static IOSObjectArray * CCPBVFHIRPatients_COLUMN_NAMES_;
static JavaUtilHashMap * CCPBVFHIRPatients_identifierMap_;
static NSString * CCPBVFHIRPatients_MOST_RECENT_SEPARATOR_ = @"{enabled: false}~{columnSpan:-1;valueType:widget_type; value:\"Label{templateName:bv.line.data_separator}\"}^^^^^^^^^^^\n";

+ (NSString *)MOST_RECENT_KEY {
  return CCPBVFHIRPatients_MOST_RECENT_KEY_;
}

+ (void)setMOST_RECENT_KEY:(NSString *)MOST_RECENT_KEY {
  CCPBVFHIRPatients_MOST_RECENT_KEY_ = MOST_RECENT_KEY;
}

+ (BOOL)myPatientsSupported {
  return CCPBVFHIRPatients_myPatientsSupported_;
}

+ (BOOL *)myPatientsSupportedRef {
  return &CCPBVFHIRPatients_myPatientsSupported_;
}

+ (BOOL)nameComponentsSearchSupported {
  return CCPBVFHIRPatients_nameComponentsSearchSupported_;
}

+ (BOOL *)nameComponentsSearchSupportedRef {
  return &CCPBVFHIRPatients_nameComponentsSearchSupported_;
}

+ (BOOL)identifierSearchSupported {
  return CCPBVFHIRPatients_identifierSearchSupported_;
}

+ (BOOL *)identifierSearchSupportedRef {
  return &CCPBVFHIRPatients_identifierSearchSupported_;
}

+ (BOOL)idSearchSupported {
  return CCPBVFHIRPatients_idSearchSupported_;
}

+ (BOOL *)idSearchSupportedRef {
  return &CCPBVFHIRPatients_idSearchSupported_;
}

+ (BOOL)dobSearchSupported {
  return CCPBVFHIRPatients_dobSearchSupported_;
}

+ (BOOL *)dobSearchSupportedRef {
  return &CCPBVFHIRPatients_dobSearchSupported_;
}

+ (BOOL)genderSearchSupported {
  return CCPBVFHIRPatients_genderSearchSupported_;
}

+ (BOOL *)genderSearchSupportedRef {
  return &CCPBVFHIRPatients_genderSearchSupported_;
}

+ (BOOL)getEncounter {
  return CCPBVFHIRPatients_getEncounter_;
}

+ (BOOL *)getEncounterRef {
  return &CCPBVFHIRPatients_getEncounter_;
}

+ (JavaUtilArrayList *)mostRecent {
  return CCPBVFHIRPatients_mostRecent_;
}

+ (void)setMostRecent:(JavaUtilArrayList *)mostRecent {
  CCPBVFHIRPatients_mostRecent_ = mostRecent;
}

+ (IOSObjectArray *)COLUMN_NAMES {
  return CCPBVFHIRPatients_COLUMN_NAMES_;
}

+ (void)setCOLUMN_NAMES:(IOSObjectArray *)COLUMN_NAMES {
  CCPBVFHIRPatients_COLUMN_NAMES_ = COLUMN_NAMES;
}

+ (JavaUtilHashMap *)identifierMap {
  return CCPBVFHIRPatients_identifierMap_;
}

+ (void)setIdentifierMap:(JavaUtilHashMap *)identifierMap {
  CCPBVFHIRPatients_identifierMap_ = identifierMap;
}

+ (NSString *)MOST_RECENT_SEPARATOR {
  return CCPBVFHIRPatients_MOST_RECENT_SEPARATOR_;
}

+ (void)setMOST_RECENT_SEPARATOR:(NSString *)MOST_RECENT_SEPARATOR {
  CCPBVFHIRPatients_MOST_RECENT_SEPARATOR_ = MOST_RECENT_SEPARATOR;
}

- (id)init {
  if (self = [super initWithNSString:@"Patient"]) {
    ssnPattern_ = [JavaUtilRegexPattern compileWithNSString:@"###-##-####"];
    birthDate_ = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy-MM-dd" withJavaUtilLocale:[JavaUtilLocale US]];
    if (CCPBVFHIRPatients_COLUMN_NAMES_ == nil) {
      CCPBVFHIRPatients_COLUMN_NAMES_ = [IOSObjectArray arrayWithObjects:(id[]){ @"id", @"name", @"dob", @"gender", @"mrn", @"provider", @"encounter_date", @"encounter_reason", @"location", @"rm_bed", @"photo", @"attending", @"language", @"relationship", @"code_status", @"code_status_short", @"wt", @"ht", @"io_in", @"io_out" } count:20 type:[IOSClass classWithClass:[NSString class]]];
      CCPBVFHIRPatients_MOST_RECENT_KEY_ = [NSString stringWithFormat:@"Patients.mostRecent:%@", [RAREFunctions sha1WithNSString:((CCPBVFHIRFHIRServer *) nil_chk(server_))->endPoint_]];
      CCPBVFHIRPatients_mostRecent_ = [[JavaUtilArrayList alloc] initWithInt:5];
      NSString *s = [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) getStringWithNSString:CCPBVFHIRPatients_MOST_RECENT_KEY_ withNSString:nil];
      if (s != nil) {
        (void) [RAREUTCharScanner getTokensWithNSString:s withChar:0x0009 withBoolean:NO withJavaUtilList:CCPBVFHIRPatients_mostRecent_];
      }
      else {
        RAREUTJSONArray *a = [((CCPBVSettings_Server *) nil_chk([server_ getServerConfig])) optJSONArrayWithNSString:@"demo_patients"];
        int len = (a == nil) ? 0 : [a length];
        for (int i = 0; i < len; i++) {
          [CCPBVFHIRPatients_mostRecent_ addWithId:[((RAREUTJSONArray *) nil_chk(a)) getStringWithInt:i]];
        }
      }
      RAREUTJSONObject *o = [((CCPBVSettings_Server *) nil_chk([server_ getServerConfig])) optJSONObjectWithNSString:@"fhir"];
      if (o != nil) {
        CCPBVFHIRPatients_getEncounter_ = [o optBooleanWithNSString:@"get_encounter" withBoolean:YES];
      }
      if (CCPBVFHIRPatients_getEncounter_) {
        CCPBVFHIRPatients_getEncounter_ = [server_ getResourceWithNSString:@"Encounter"] != nil;
      }
    }
    columnNames_ = CCPBVFHIRPatients_COLUMN_NAMES_;
  }
  return self;
}

+ (void)initializeSupportedOptionsWithCCPBVFHIRFHIRServer_FHIRResource:(CCPBVFHIRFHIRServer_FHIRResource *)r
                                                  withRAREUTJSONObject:(RAREUTJSONObject *)config {
  RAREUTJSONArray *a = ((CCPBVFHIRFHIRServer_FHIRResource *) nil_chk(r))->searchParams_;
  if (a != nil) {
    int n = 0;
    for (id __strong o in a) {
      RAREUTJSONObject *jo = (RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class]);
      NSString *name = [((RAREUTJSONObject *) nil_chk(jo)) optStringWithNSString:@"name"];
      if ([((NSString *) nil_chk(name)) isEqual:@"careprovider"]) {
        CCPBVFHIRPatients_myPatientsSupported_ = YES;
      }
      else if ([name equalsIgnoreCase:@"given"]) {
        n++;
      }
      else if ([name equalsIgnoreCase:@"family"]) {
        n++;
      }
      else if ([name equalsIgnoreCase:@"gender"]) {
        CCPBVFHIRPatients_genderSearchSupported_ = YES;
      }
      else if ([name equalsIgnoreCase:@"identifier"]) {
        CCPBVFHIRPatients_identifierSearchSupported_ = YES;
      }
      else if ([name equalsIgnoreCase:@"birthdate"]) {
        CCPBVFHIRPatients_dobSearchSupported_ = YES;
      }
      else if ([name equalsIgnoreCase:@"_id"]) {
        CCPBVFHIRPatients_idSearchSupported_ = YES;
      }
    }
    if (n > 1) {
      CCPBVFHIRPatients_nameComponentsSearchSupported_ = YES;
    }
  }
  (void) [((RAREUTJSONObject *) nil_chk(config)) putWithNSString:@"hasPatientAlerts" withBoolean:NO];
  (void) [config putWithNSString:@"genderSearchSupported" withBoolean:CCPBVFHIRPatients_genderSearchSupported_];
}

- (void)by_categoryWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                        withCCPBVActionPath:(CCPBVActionPath *)path
                      withJavaIoInputStream:(JavaIoInputStream *)data
                       withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  NSString *s = [((CCPBVActionPath *) nil_chk(path)) shift];
  if ([@"provider" isEqual:s] && [((CCPBVFHIRFHIRServer_FHIRResource *) nil_chk([((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceWithNSString:@"Patient"])) hasSearchParamWithNSString:@"careprovider"]) {
    RAREActionLink *l = [server_ createResourceLinkWithNSString:@"Patient" withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"careprovider", [CCPBVUtils getUserID] } count:2 type:[IOSClass classWithClass:[NSString class]]]];
    @try {
      id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
      [self searchWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangBoolean valueOfWithBoolean:YES] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    @finally {
      [((RAREActionLink *) nil_chk(l)) close];
    }
    return;
  }
  [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers];
}

- (void)listWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  id<JavaUtilMap> map = [self getQueryParamsWithJavaNetURL:[((id<CCPBViHttpConnection>) nil_chk(conn)) getURL] withJavaIoInputStream:data];
  if (map == nil) {
    [self most_recentWithCCPBViHttpConnection:conn withCCPBVActionPath:path withJavaIoInputStream:data withCCPBVHttpHeaders:headers];
    return;
  }
  RAREActionLink *l;
  NSString *count = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(map)) getWithId:@"max"], [NSString class]);
  NSString *gender = (NSString *) check_class_cast([map getWithId:@"gender"], [NSString class]);
  NSString *id_ = (NSString *) check_class_cast([map getWithId:@"identifier"], [NSString class]);
  NSString *s;
  if (gender != nil) {
    if ([gender equalsIgnoreCase:@"F"]) {
      gender = @"female";
    }
    else {
      gender = @"male";
    }
  }
  [map clear];
  int n;
  if ([((NSString *) nil_chk(id_)) hasPrefix:@"`"]) {
    if (CCPBVFHIRPatients_idSearchSupported_) {
      (void) [map putWithId:@"_id" withId:[id_ substring:1]];
    }
    else {
      s = [CCPBVaRemoteService getExtensionWithCCPBVActionPath:path];
      if (s == nil) {
        s = [id_ substring:1];
      }
      else {
        s = [NSString stringWithFormat:@"%@.%@", [id_ substring:1], s];
      }
      [self selectExWithCCPBViHttpConnection:conn withCCPBVActionPath:[[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSString class]]]] withJavaIoInputStream:data withCCPBVHttpHeaders:headers withBoolean:YES];
      return;
    }
  }
  else if (CCPBVFHIRPatients_identifierSearchSupported_ && [id_ hasPrefix:@"@"]) {
    (void) [map putWithId:@"identifier" withId:[id_ substring:1]];
  }
  else if (CCPBVFHIRPatients_nameComponentsSearchSupported_ && (n = [id_ indexOf:',']) != -1) {
    s = [((NSString *) nil_chk([id_ substring:0 endIndex:n])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] != 0) {
      (void) [map putWithId:@"family" withId:s];
    }
    s = [((NSString *) nil_chk([id_ substring:n + 1])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] != 0) {
      (void) [map putWithId:@"given" withId:s];
    }
  }
  else if (CCPBVFHIRPatients_nameComponentsSearchSupported_ && (n = [id_ lastIndexOf:' ']) != -1) {
    s = [((NSString *) nil_chk([id_ substring:0 endIndex:n])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] != 0) {
      (void) [map putWithId:@"given" withId:s];
    }
    s = [((NSString *) nil_chk([id_ substring:n + 1])) trim];
    if ([((NSString *) nil_chk(s)) sequenceLength] != 0) {
      (void) [map putWithId:@"family" withId:s];
    }
  }
  else if (CCPBVFHIRPatients_dobSearchSupported_ && (([id_ indexOf:'/'] != -1) || ([id_ indexOf:'.'] != -1))) {
    [self setBirthDateWithJavaUtilMap:map withNSString:id_];
  }
  else if (CCPBVFHIRPatients_identifierSearchSupported_ && ([id_ indexOf:'-'] != -1)) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ssnPattern_)) matcherWithJavaLangCharSequence:id_])) matches] || ![self isPosibleDateWithNSString:id_]) {
      (void) [map putWithId:@"identifier" withId:id_];
    }
  }
  else if (CCPBVFHIRPatients_dobSearchSupported_ && ([id_ indexOf:'-'] != -1)) {
    [self setBirthDateWithJavaUtilMap:map withNSString:id_];
  }
  else {
    (void) [map putWithId:@"name" withId:id_];
  }
  if (gender != nil) {
    (void) [map putWithId:@"gender" withId:gender];
  }
  if (count != nil) {
    (void) [map putWithId:@"_count" withId:count];
  }
  l = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) createResourceLinkWithNSString:@"Patient" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  [((RAREActionLink *) nil_chk(l)) setAttributesWithJavaUtilMap:map];
  @try {
    id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[conn getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
    [self searchWithJavaIoReader:[l getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangBoolean valueOfWithBoolean:YES] } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [l close];
  }
}

- (void)most_recentWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                        withCCPBVActionPath:(CCPBVActionPath *)path
                      withJavaIoInputStream:(JavaIoInputStream *)data
                       withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  [headers mimeRow];
  CCPBVContentWriter *w = [((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter];
  for (NSString * __strong s in nil_chk(CCPBVFHIRPatients_mostRecent_)) {
    [((CCPBVContentWriter *) nil_chk(w)) writeWithNSString:s];
    [w writeWithInt:0x000a];
  }
  if (![CCPBVFHIRPatients_mostRecent_ isEmpty]) {
    [((CCPBVContentWriter *) nil_chk(w)) writeWithNSString:CCPBVFHIRPatients_MOST_RECENT_SEPARATOR_];
  }
}

- (void)nearbyWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                   withCCPBVActionPath:(CCPBVActionPath *)path
                 withJavaIoInputStream:(JavaIoInputStream *)data
                  withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
}

- (void)selectWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                   withCCPBVActionPath:(CCPBVActionPath *)path
                 withJavaIoInputStream:(JavaIoInputStream *)data
                  withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self selectExWithCCPBViHttpConnection:conn withCCPBVActionPath:path withJavaIoInputStream:data withCCPBVHttpHeaders:headers withBoolean:NO];
}

- (void)selectExWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
                             withBoolean:(BOOL)forList {
  id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
  NSString *id_ = [self removeExtensionWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]];
  if (id_ == nil) {
    @throw [[CCPBVMessageException alloc] initWithNSString:@"missing id for select"];
  }
  RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) createResourceLinkWithNSString:[NSString stringWithFormat:@"Patient/%@", id_] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  CCPBVFHIRLinkWaiter *waiter = nil;
  if (CCPBVFHIRPatients_getEncounter_) {
    waiter = [[CCPBVFHIRLinkWaiter alloc] initWithInt:1];
    [waiter addLinkWithRAREActionLink:nil withJavaUtilConcurrentCallable:[CCPBVFHIRPatients createBestEncounterCallableWithNSString:id_]];
  }
  @try {
    [self readWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangBoolean valueOfWithBoolean:forList], waiter } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

+ (RAREUTJSONObject *)getBestEncounterWithRAREUTJSONArray:(RAREUTJSONArray *)a {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  CCPBVFHIRPatients_BestObjectHolder *oh = [[CCPBVFHIRPatients_BestObjectHolder alloc] init];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [a getJSONObjectWithInt:i];
    if (![((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"resourceType"])) isEqual:@"Encounter"]) {
      continue;
    }
    if ([CCPBVFHIRPatients checkEncounterWithRAREUTJSONObject:o withCCPBVFHIRPatients_BestObjectHolder:oh]) {
      break;
    }
  }
  return (RAREUTJSONObject *) check_class_cast(oh->value_, [RAREUTJSONObject class]);
}

+ (RAREUTJSONObject *)getBestEncounterWithNSString:(NSString *)patient
                                       withBoolean:(BOOL)always {
  if (CCPBVFHIRPatients_getEncounter_ || always) {
    @try {
      return (RAREUTJSONObject *) check_class_cast([((id<JavaUtilConcurrentCallable>) nil_chk([CCPBVFHIRPatients createBestEncounterCallableWithNSString:patient])) call], [RAREUTJSONObject class]);
    }
    @catch (JavaLangException *e) {
      if ([e isKindOfClass:[JavaIoIOException class]]) {
        @throw (JavaIoIOException *) check_class_cast(e, [JavaIoIOException class]);
      }
      else {
        return nil;
      }
    }
  }
  return nil;
}

+ (id<JavaUtilConcurrentCallable>)createBestEncounterCallableWithNSString:(NSString *)patient {
  return [[CCPBVFHIRPatients_$1 alloc] initWithNSString:patient];
}

+ (RAREUTJSONArray *)getEncounterLocationWithRAREUTJSONObject:(RAREUTJSONObject *)encounter
                                                  withBoolean:(BOOL)resolveAlways {
  RAREUTJSONObject *loc = nil;
  RAREUTJSONArray *a = [((RAREUTJSONObject *) nil_chk(encounter)) optJSONArrayWithNSString:@"location"];
  if ((a != nil) && ![a isEmpty]) {
    a = [CCPBVFHIRPatients getBestLocationWithRAREUTJSONArray:a];
    int len = (a == nil) ? 0 : [a length];
    for (int i = 0; i < len; i++) {
      loc = [((RAREUTJSONArray *) nil_chk(a)) getJSONObjectWithInt:i];
      loc = [((RAREUTJSONObject *) nil_chk(loc)) optJSONObjectWithNSString:@"location"];
      NSString *ref = (loc == nil) ? nil : [loc optStringWithNSString:@"reference" withNSString:nil];
      if (ref == nil) {
        (void) [a setWithInt:i withId:nil];
        continue;
      }
      if (!resolveAlways && ![ref hasPrefix:@"#"]) {
        NSString *name = [((RAREUTJSONObject *) nil_chk(loc)) optStringWithNSString:@"display"];
        if ([((NSString *) nil_chk(name)) sequenceLength] > 0) {
          loc = [((RAREUTJSONObject *) nil_chk([((RAREUTJSONObject *) [[RAREUTJSONObject alloc] init]) putWithNSString:@"id" withId:[((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getIDWithNSString:ref withBoolean:NO]])) putWithNSString:@"name" withId:name];
          (void) [a setWithInt:i withId:loc];
          continue;
        }
      }
      if ([ref hasPrefix:@"#"]) {
        RAREUTJSONArray *aa = [encounter optJSONArrayWithNSString:@"contained"];
        loc = [((RAREUTJSONArray *) nil_chk(aa)) findJSONObjectWithNSString:@"id" withNSString:[ref substring:1]];
        (void) [a setWithInt:i withId:loc];
      }
      else {
        RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) createLinkWithNSString:ref];
        @try {
          loc = [CCPBVFHIRaFHIRemoteService getReadEntryWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
        }
        @catch (JavaLangException *e) {
          [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) ignoreExceptionWithJavaLangException:e];
          a = nil;
        }
        @finally {
          [((RAREActionLink *) nil_chk(l)) close];
        }
      }
    }
  }
  return a;
}

+ (RAREUTJSONArray *)getBestLocationWithRAREUTJSONArray:(RAREUTJSONArray *)a {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  CCPBVFHIRPatients_BestObjectHolder *oh = [[CCPBVFHIRPatients_BestObjectHolder alloc] init];
  for (int i = 0; i < len; i++) {
    if ([CCPBVFHIRPatients checkLocationWithRAREUTJSONObject:[a getJSONObjectWithInt:i] withCCPBVFHIRPatients_BestObjectHolder:oh]) {
      break;
    }
  }
  RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast(oh->value_, [RAREUTJSONObject class]);
  if (o == nil) {
    return nil;
  }
  RAREUTJSONArray *aa = [[RAREUTJSONArray alloc] init];
  [aa addWithId:o];
  if (![((NSString *) nil_chk(oh->status_)) isEqual:@"active"] && ([oh->status_ sequenceLength] > 0)) {
    len = 0;
  }
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *oo = [a getJSONObjectWithInt:i];
    if ((oo != o) && [((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(oo)) optStringWithNSString:@"status"])) isEqual:oh->status_]) {
      [aa addWithId:oo];
    }
  }
  return aa;
}

+ (BOOL)checkEncounterWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
    withCCPBVFHIRPatients_BestObjectHolder:(CCPBVFHIRPatients_BestObjectHolder *)oh {
  if (![@"in-progress" isEqual:((CCPBVFHIRPatients_BestObjectHolder *) nil_chk(oh))->status_]) {
    NSString *status = [((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"status"];
    NSString *clazz = [entry_ optStringWithNSString:@"class"];
    if ([((NSString *) nil_chk(status)) isEqual:@"in-progress"]) {
      oh->value_ = entry_;
      oh->status_ = status;
      return YES;
    }
    else if ((oh->value_ == nil) || [status isEqual:@"finished"]) {
      RAREUTJSONObject *period = [entry_ optJSONObjectWithNSString:@"period"];
      if (period != nil) {
        NSString *date = [period optStringWithNSString:@"end" withNSString:nil];
        if (date == nil) {
          date = [period optStringWithNSString:@"start" withNSString:nil];
        }
        if ((oh->date_ == nil) || ([((NSString *) nil_chk(date)) compareToWithId:oh->date_] > 0)) {
          oh->value_ = entry_;
          oh->status_ = status;
          oh->date_ = date;
          oh->clazz_ = clazz;
        }
      }
      else if ((oh->value_ == nil) || (oh->date_ == nil)) {
        oh->value_ = entry_;
        oh->status_ = status;
        oh->clazz_ = clazz;
      }
    }
  }
  return NO;
}

+ (BOOL)checkLocationWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
   withCCPBVFHIRPatients_BestObjectHolder:(CCPBVFHIRPatients_BestObjectHolder *)oh {
  if (![@"active" isEqual:((CCPBVFHIRPatients_BestObjectHolder *) nil_chk(oh))->status_]) {
    NSString *status = [((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"status"];
    if ([((NSString *) nil_chk(status)) isEqual:@"active"]) {
      oh->value_ = entry_;
      oh->status_ = status;
      return YES;
    }
    else if ((oh->value_ == nil) || [status isEqual:@"completed"]) {
      RAREUTJSONObject *period = [entry_ optJSONObjectWithNSString:@"period"];
      if (period != nil) {
        NSString *date = [period optStringWithNSString:@"end" withNSString:nil];
        if (date == nil) {
          date = [period optStringWithNSString:@"start" withNSString:nil];
        }
        if ((oh->date_ == nil) || ([((NSString *) nil_chk(date)) compareToWithId:oh->date_] > 0)) {
          oh->value_ = entry_;
          oh->status_ = status;
          oh->date_ = date;
        }
      }
      else if ((oh->value_ == nil) || (oh->date_ == nil)) {
        oh->value_ = entry_;
        oh->status_ = status;
      }
    }
  }
  return NO;
}

- (BOOL)isPosibleDateWithNSString:(NSString *)id_ {
  int len = [((NSString *) nil_chk(id_)) sequenceLength];
  for (int i = 0; i < len; i++) {
    unichar c = [id_ charAtWithInt:i];
    if (![JavaLangCharacter isDigitWithChar:c] && ((c != '-') || (c != '/') || (c != '.'))) {
      return NO;
    }
  }
  return YES;
}

- (void)setBirthDateWithJavaUtilMap:(id<JavaUtilMap>)map
                       withNSString:(NSString *)id_ {
  JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
  if ([RAREUTHelper setDateTimeWithNSString:id_ withJavaUtilCalendar:cal withBoolean:NO]) {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:@"birthDate" withId:[((JavaTextSimpleDateFormat *) nil_chk(birthDate_)) formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(cal)) getTime]]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:@"birthDate" withId:id_];
  }
}

- (void)readEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                 withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                     withJavaIoWriter:(JavaIoWriter *)w
                    withNSObjectArray:(IOSObjectArray *)params {
  [self processEntryWithRAREUTJSONObject:entry_ withRAREUTJSONWriter:jw withJavaIoWriter:w withRAREUTCharArray:[[RAREUTCharArray alloc] init] withNSObjectArray:params];
}

- (void)processEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                    withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                        withJavaIoWriter:(JavaIoWriter *)w
                     withRAREUTCharArray:(RAREUTCharArray *)ca
                       withNSObjectArray:(IOSObjectArray *)params {
  JavaLangBoolean *forList = ((int) [((IOSObjectArray *) nil_chk(params)) count] == 0) ? [JavaLangBoolean getTRUE] : (JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(params, 0), [JavaLangBoolean class]);
  RAREUTJSONObject *o;
  RAREUTJSONObject *oo;
  BOOL parsed = NO;
  NSString *s;
  id<JavaUtilList> team = nil;
  JavaIoWriter *ow = w;
  JavaIoStringWriter *sw = [forList booleanValue] ? nil : [[JavaIoStringWriter alloc] init];
  if (sw != nil) {
    w = sw;
  }
  NSString *id_ = nil;
  NSString *encounter_id = nil;
  do {
    RAREUTJSONArray *name = nil;
    NSString *dob = nil;
    NSString *gender = nil;
    NSString *mrn = nil;
    NSString *providerld = nil;
    NSString *provider = nil;
    NSString *encounter_date = nil;
    NSString *encounter_reason = nil;
    NSString *locationld = nil;
    NSString *location = nil;
    NSString *rm_bed = nil;
    NSString *photo = nil;
    NSString *attendingld = nil;
    NSString *attending = nil;
    NSString *language = nil;
    NSString *relationshipld = @"PART";
    NSString *relationship = @"Participation";
    id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getIDWithNSString:[((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"id"] withBoolean:NO];
    name = [entry_ optJSONArrayWithNSString:@"name"];
    dob = [entry_ optStringWithNSString:@"birthDate" withNSString:nil];
    s = [entry_ optStringWithNSString:@"gender"];
    if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
      (void) [((RAREUTCharArray *) nil_chk(ca)) setWithNSString:s];
      (void) [ca toMixedCase];
      gender = [ca description];
    }
    RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:@"identifier"];
    if (a != nil) {
      mrn = [CCPBVFHIRFHIRUtils getCodableConceptWithRAREUTJSONArray:a withNSString:@"mrn" withJavaUtilHashMap:CCPBVFHIRPatients_identifierMap_];
    }
    a = [entry_ optJSONArrayWithNSString:@"photo"];
    if ((a != nil) && ([a length] > 0)) {
      o = [a getJSONObjectWithInt:0];
      s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"data" withNSString:nil];
      if (s != nil) {
        NSString *type = [o optStringWithNSString:@"contentType" withNSString:@""];
        if ([((NSString *) nil_chk(type)) hasPrefix:@"image/"] && ([s sequenceLength] > 0)) {
          (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk(ca)) setWithNSString:@"data:"])) appendWithNSString:type])) appendWithNSString:@";base64,"])) appendWithNSString:s];
          photo = [ca description];
        }
      }
      else {
        s = [o optStringWithNSString:@"uri" withNSString:@""];
        if ([((NSString *) nil_chk(s)) hasPrefix:@"http"]) {
          photo = s;
        }
      }
    }
    if (![forList booleanValue]) {
      a = [entry_ optJSONArrayWithNSString:@"contained"];
      o = nil;
      if (a != nil) {
        o = [CCPBVFHIRPatients getBestEncounterWithRAREUTJSONArray:a];
      }
      if ((o == nil) && ((int) [params count] > 1) && ([IOSObjectArray_Get(params, 1) isKindOfClass:[CCPBVFHIRLinkWaiter class]])) {
        CCPBVFHIRLinkWaiter *waiter = (CCPBVFHIRLinkWaiter *) check_class_cast(IOSObjectArray_Get(params, 1), [CCPBVFHIRLinkWaiter class]);
        [((CCPBVFHIRLinkWaiter *) nil_chk(waiter)) startWaiting];
        if (![waiter hadError]) {
          o = (RAREUTJSONObject *) check_class_cast([waiter getResultWithInt:0], [RAREUTJSONObject class]);
        }
        [waiter dispose];
      }
      if (o != nil) {
        encounter_id = [server_ getIDWithNSString:[o optStringWithNSString:@"id"] withBoolean:NO];
        encounter_date = (NSString *) check_class_cast([o optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"period", @"start" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
        (void) [((RAREUTCharArray *) nil_chk(ca)) setLengthWithInt:0];
        encounter_reason = [((RAREUTCharArray *) nil_chk([CCPBVFHIRFHIRUtils concatBestMedicalTextWithRAREUTJSONArray:[o optJSONArrayWithNSString:@"reason"] withNSString:nil withRAREUTCharArray:ca])) description];
        a = [o optJSONArrayWithNSString:@"participant"];
        if ((a != nil) && ([a length] > 0)) {
          team = [CCPBVFHIRPatient parseParticipantWithCCPBVFHIRFHIRServer:server_ withRAREUTJSONArray:a];
          int len = [((id<JavaUtilList>) nil_chk(team)) size];
          NSString *me = [CCPBVUtils getUserID];
          for (int i = 0; i < len; i++) {
            CCPBVFHIRPatient_Practitioner *p = [team getWithInt:i];
            if ([((CCPBVFHIRPatient_Practitioner *) nil_chk(p)) isAttending]) {
              attending = p->name_;
              attendingld = p->id__;
            }
            else if ([p isProvider]) {
              provider = p->name_;
              providerld = p->id__;
            }
            if ((me != nil) && [me isEqual:p->id__]) {
              relationship = p->typeName_;
              relationshipld = p->typeCode_;
              if ((relationship == nil) || ([relationship sequenceLength] == 0)) {
              }
            }
          }
        }
        a = [CCPBVFHIRPatients getEncounterLocationWithRAREUTJSONObject:o withBoolean:NO];
        if ((a != nil) && ([a length] > 0)) {
          int len = [a size];
          NSString *rm = nil;
          NSString *rmld = nil;
          NSString *bed = nil;
          NSString *bedld = nil;
          for (int i = 0; i < len; i++) {
            oo = [a optJSONObjectWithInt:i];
            if (oo == nil) {
              continue;
            }
            NSString *text = [((RAREUTJSONObject *) nil_chk(oo)) optStringWithNSString:@"name" withNSString:nil];
            if (text == nil) {
              text = [oo optStringWithNSString:@"description" withNSString:nil];
            }
            if (location == nil) {
              location = text;
            }
            s = [oo optStringWithNSString:@"status" withNSString:nil];
            NSString *ld = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getIDWithNSString:[oo optStringWithNSString:@"id"] withBoolean:NO];
            s = [CCPBVFHIRFHIRUtils getBestMedicalCodeWithRAREUTJSONObject:[oo optJSONObjectWithNSString:@"physicalType"]];
            if (s != nil) {
              if ([s isEqual:@"ro"]) {
                rm = text;
                rmld = ld;
              }
              else if ([s isEqual:@"bd"]) {
                bed = text;
                bedld = ld;
              }
              else if ([s isEqual:@"wi"]) {
                location = text;
                locationld = ld;
              }
            }
          }
          ca->_length_ = 0;
          if (rm != nil) {
            (void) [ca appendWithNSString:rm];
          }
          if (bed != nil) {
            (void) [ca appendWithChar:'-'];
            (void) [ca appendWithNSString:bed];
          }
          if (ca->_length_ != 0) {
            rm_bed = [ca description];
          }
          if (locationld == nil) {
            if (bed != nil) {
              locationld = bedld;
            }
            else if (rm != nil) {
              locationld = rmld;
            }
          }
        }
        if ((a != nil) && ([a length] > 0)) {
          int len = [a size];
          NSString *rm = nil;
          NSString *rmld = nil;
          NSString *bed = nil;
          NSString *bedld = nil;
          NSString *wingld = nil;
          for (int i = 0; i < len; i++) {
            oo = [((RAREUTJSONObject *) nil_chk([a getJSONObjectWithInt:i])) optJSONObjectWithNSString:@"location"];
            if (oo == nil) {
              continue;
            }
            NSString *display = [((RAREUTJSONObject *) nil_chk(oo)) optStringWithNSString:@"name" withNSString:nil];
            if (display == nil) {
              display = [oo optStringWithNSString:@"description" withNSString:nil];
            }
            if (location == nil) {
              location = display;
            }
            s = [oo optStringWithNSString:@"status" withNSString:nil];
            if ((s == nil) || ![s isEqual:@"active"]) {
              continue;
            }
            NSString *ld = [server_ getIDWithNSString:[oo optStringWithNSString:@"id"] withBoolean:NO];
            s = [CCPBVFHIRFHIRUtils getBestMedicalCodeWithRAREUTJSONObject:[oo optJSONObjectWithNSString:@"physicalType"]];
            if (s != nil) {
              if ([s isEqual:@"rm"]) {
                rm = display;
                rmld = ld;
              }
              else if ([s isEqual:@"bed"]) {
                bed = display;
                bedld = ld;
              }
              else if ([s isEqual:@"wing"]) {
                location = display;
                wingld = ld;
              }
            }
          }
          ca->_length_ = 0;
          if (rm != nil) {
            (void) [ca appendWithNSString:rm];
          }
          if (bed != nil) {
            (void) [ca appendWithChar:'-'];
            (void) [ca appendWithNSString:bed];
          }
          if (ca->_length_ != 0) {
            rm_bed = [ca description];
          }
          if (locationld == nil) {
            if (bed != nil) {
              locationld = bedld;
            }
            else if (rm != nil) {
              locationld = rmld;
            }
            else {
              locationld = wingld;
            }
          }
        }
      }
      if (provider == nil) {
        a = [entry_ optJSONArrayWithNSString:@"careProvider"];
        if ((a != nil) && ([a length] > 0)) {
          int len = [a length];
          BOOL addToTeam = NO;
          if (team == nil) {
            team = [[JavaUtilArrayList alloc] initWithInt:len];
            addToTeam = YES;
          }
          for (int i = 0; i < len; i++) {
            o = [a getJSONObjectWithInt:i];
            s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"reference"];
            if ([((NSString *) nil_chk(s)) contains:@"Practitioner/"]) {
              s = [server_ getIDWithNSString:s withBoolean:NO];
              NSString *pn = [o optStringWithNSString:@"display" withNSString:nil];
              if (pn != nil) {
                if (provider == nil) {
                  providerld = s;
                  provider = pn;
                  if (!addToTeam) {
                    break;
                  }
                }
                if (addToTeam) {
                  [((id<JavaUtilList>) nil_chk(team)) addWithId:[[CCPBVFHIRPatient_Practitioner alloc] initWithNSString:s withNSString:pn]];
                }
              }
            }
          }
        }
      }
      a = [entry_ optJSONArrayWithNSString:@"communication"];
      if ((a != nil) && ([a length] > 0)) {
        int len = [a length];
        for (int i = 0; i < len; i++) {
          o = [a getJSONObjectWithInt:i];
          language = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[((RAREUTJSONObject *) nil_chk(o)) optJSONObjectWithNSString:@"language"]];
          if ([o optBooleanWithNSString:@"preferred" withBoolean:NO]) {
            break;
          }
        }
      }
    }
    if (jw != nil) {
      if ([forList booleanValue]) {
        (void) [jw object];
      }
      if (id_ != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"id"])) valueWithId:id_];
      }
      if (name != nil) {
        [CCPBVFHIRFHIRUtils writeNameWithId:jw withRAREUTJSONArray:name];
      }
      if (dob != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"dob"])) valueWithId:dob];
      }
      if (gender != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"gender"])) valueWithId:gender];
      }
      if (mrn != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"mrn"])) valueWithId:mrn];
      }
      if (provider != nil) {
        [self writeLinkedDataWithRAREUTJSONWriter:jw withNSString:@"provider" withNSString:providerld withNSString:provider];
      }
      if (encounter_date != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"encounter_date"])) valueWithId:encounter_date];
      }
      if (encounter_reason != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"encounter_reason"])) valueWithId:encounter_reason];
      }
      if (location != nil) {
        [self writeLinkedDataWithRAREUTJSONWriter:jw withNSString:@"location" withNSString:locationld withNSString:location];
      }
      if (rm_bed != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"rm_bed"])) valueWithId:rm_bed];
      }
      if (photo != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"photo"])) valueWithId:photo];
      }
      if (attending != nil) {
        if (attendingld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"attending"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:attendingld])) keyWithNSString:@"value"])) valueWithId:attending];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"attending"])) valueWithId:attending];
        }
      }
      if (language != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"language"])) valueWithId:language];
      }
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"relationship"])) object];
      (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:relationshipld])) keyWithNSString:@"value"])) valueWithId:relationship];
      (void) [jw endObject];
      if ([forList booleanValue]) {
        (void) [jw endObject];
      }
    }
    if (w != nil) {
      if (id_ != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:id_ withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (name != nil) {
        [CCPBVFHIRFHIRUtils writeNameWithId:w withRAREUTJSONArray:name];
      }
      [w writeWithInt:'^'];
      if (dob != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:dob withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (gender != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:gender withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (mrn != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:mrn withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (provider != nil) {
        if (providerld != nil) {
          [w writeWithNSString:providerld];
          [w writeWithInt:'|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:provider withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (encounter_date != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:encounter_date withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (encounter_reason != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:encounter_reason withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (location != nil) {
        if (locationld != nil) {
          [w writeWithNSString:locationld];
          [w writeWithInt:'|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:location withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (rm_bed != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:rm_bed withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if ((photo != nil) && [forList booleanValue]) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:photo withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (attending != nil) {
        if (attendingld != nil) {
          [w writeWithNSString:attendingld];
          [w writeWithInt:'|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:attending withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      if (language != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:language withRAREUTCharArray:ca];
      }
      [w writeWithInt:'^'];
      [w writeWithNSString:relationshipld];
      [w writeWithInt:'|'];
      [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:relationship withRAREUTCharArray:ca];
      [w writeWithInt:'^'];
      [w writeWithInt:'^'];
      [w writeWithInt:0x000a];
    }
    parsed = YES;
    [server_ setPatientInfoWithNSString:id_ withNSString:encounter_id];
  }
  while (NO);
  if (!parsed) {
    [self debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [((RAREUTJSONObject *) nil_chk(entry_)) toStringWithInt:2]]];
  }
  else if (sw != nil) {
    s = [sw description];
    if (ow != nil) {
      [ow writeWithNSString:s];
    }
    int len = [((JavaUtilArrayList *) nil_chk(CCPBVFHIRPatients_mostRecent_)) size];
    if (len > 0) {
      NSString *sid = [NSString stringWithFormat:@"%@^", id_];
      for (int i = 0; i < len; i++) {
        if ([((NSString *) nil_chk([CCPBVFHIRPatients_mostRecent_ getWithInt:i])) hasPrefix:sid]) {
          (void) [CCPBVFHIRPatients_mostRecent_ removeWithInt:i];
          break;
        }
      }
    }
    s = [((NSString *) nil_chk(s)) trim];
    [CCPBVFHIRPatients_mostRecent_ addWithInt:0 withId:s];
    if ([CCPBVFHIRPatients_mostRecent_ size] > 5) {
      (void) [CCPBVFHIRPatients_mostRecent_ removeWithInt:5];
    }
    [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) putStringWithNSString:CCPBVFHIRPatients_MOST_RECENT_KEY_ withNSString:[RAREUTHelper toStringWithJavaUtilList:CCPBVFHIRPatients_mostRecent_ withNSString:@"\t"]];
    [((CCPBVSettings_AppPreferences *) nil_chk([CCPBVUtils getPreferences])) update];
    if (CCPBVFHIRPatients_getEncounter_) {
      if (team == nil) {
        team = [JavaUtilCollections EMPTY_LIST];
      }
    }
    [CCPBVFHIRPatient setSelectedPatientCareInfoWithNSString:id_ withJavaUtilList:team];
  }
}

+ (void)initialize {
  if (self == [CCPBVFHIRPatients class]) {
    CCPBVFHIRPatients_identifierMap_ = [[JavaUtilHashMap alloc] initWithInt:5];
    {
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"mr" withId:@"mrn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"mrn" withId:@"mrn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"MR" withId:@"mrn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"MRN" withId:@"mrn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"ss" withId:@"ssn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"ssn" withId:@"ssn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"SS" withId:@"ssn"];
      (void) [CCPBVFHIRPatients_identifierMap_ putWithId:@"SSN" withId:@"ssn"];
    }
  }
}

- (void)copyAllFieldsTo:(CCPBVFHIRPatients *)other {
  [super copyAllFieldsTo:other];
  other->birthDate_ = birthDate_;
  other->ssnPattern_ = ssnPattern_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "by_categoryWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "listWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "most_recentWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "nearbyWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "selectWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "selectExWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:withBoolean:", NULL, "V", 0x4, "JavaIoIOException" },
    { "getBestEncounterWithRAREUTJSONArray:", NULL, "LRAREUTJSONObject", 0x9, NULL },
    { "getBestEncounterWithNSString:withBoolean:", NULL, "LRAREUTJSONObject", 0x9, "JavaIoIOException" },
    { "createBestEncounterCallableWithNSString:", NULL, "LJavaUtilConcurrentCallable", 0x9, NULL },
    { "getEncounterLocationWithRAREUTJSONObject:withBoolean:", NULL, "LRAREUTJSONArray", 0x9, NULL },
    { "getBestLocationWithRAREUTJSONArray:", NULL, "LRAREUTJSONArray", 0x9, NULL },
    { "checkEncounterWithRAREUTJSONObject:withCCPBVFHIRPatients_BestObjectHolder:", NULL, "Z", 0x8, NULL },
    { "checkLocationWithRAREUTJSONObject:withCCPBVFHIRPatients_BestObjectHolder:", NULL, "Z", 0x8, NULL },
    { "isPosibleDateWithNSString:", NULL, "Z", 0x2, NULL },
    { "setBirthDateWithJavaUtilMap:withNSString:", NULL, "V", 0x2, NULL },
    { "readEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "processEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withRAREUTCharArray:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "MOST_RECENT_KEY_", NULL, 0xc, "LNSString" },
    { "myPatientsSupported_", NULL, 0xc, "Z" },
    { "nameComponentsSearchSupported_", NULL, 0xc, "Z" },
    { "identifierSearchSupported_", NULL, 0xc, "Z" },
    { "idSearchSupported_", NULL, 0xc, "Z" },
    { "dobSearchSupported_", NULL, 0xc, "Z" },
    { "genderSearchSupported_", NULL, 0xc, "Z" },
    { "getEncounter_", NULL, 0xc, "Z" },
    { "mostRecent_", NULL, 0xc, "LJavaUtilArrayList" },
    { "COLUMN_NAMES_", NULL, 0xc, "LIOSObjectArray" },
    { "identifierMap_", NULL, 0xc, "LJavaUtilHashMap" },
    { "MOST_RECENT_SEPARATOR_", NULL, 0x8, "LNSString" },
    { "ssnPattern_", NULL, 0x0, "LJavaUtilRegexPattern" },
    { "birthDate_", NULL, 0x0, "LJavaTextSimpleDateFormat" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatients = { "Patients", "com.sparseware.bellavista.external.fhir.util", NULL, 0x1, 17, methods, 14, fields, 0, NULL};
  return &_CCPBVFHIRPatients;
}

@end
@implementation CCPBVFHIRPatients_BestObjectHolder

- (id)init {
  return [super init];
}

- (void)copyAllFieldsTo:(CCPBVFHIRPatients_BestObjectHolder *)other {
  [super copyAllFieldsTo:other];
  other->clazz_ = clazz_;
  other->date_ = date_;
  other->status_ = status_;
  other->value_ = value_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "LRAREUTJSONObject" },
    { "date_", NULL, 0x1, "LNSString" },
    { "status_", NULL, 0x1, "LNSString" },
    { "clazz_", NULL, 0x1, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatients_BestObjectHolder = { "BestObjectHolder", "com.sparseware.bellavista.external.fhir.util", "Patients", 0x8, 0, NULL, 4, fields, 0, NULL};
  return &_CCPBVFHIRPatients_BestObjectHolder;
}

@end
@implementation CCPBVFHIRPatients_$1

- (id)call {
  RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) createLinkWithNSString:[NSString stringWithFormat:@"Encounter?patient=%@", val$patient_]];
  CCPBVFHIRPatients_BestObjectHolder *oh = [[CCPBVFHIRPatients_BestObjectHolder alloc] init];
  @try {
    RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    id<CCPBVFHIRFHIRJSONWatcher_iCallback> cb = [[CCPBVFHIRPatients_$1_$1 alloc] initWithCCPBVFHIRPatients_BestObjectHolder:oh withRAREUTJSONTokener:t];
    [t setWatcherWithRAREUTJSONTokener_iWatcher:[[CCPBVFHIRFHIRJSONWatcher alloc] initWithCCPBVFHIRFHIRJSONWatcher_iCallback:cb]];
    (void) [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
    [t dispose];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
  RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast(oh->value_, [RAREUTJSONObject class]);
  return o;
}

- (id)initWithNSString:(NSString *)capture$0 {
  val$patient_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "call", NULL, "LNSObject", 0x1, "JavaLangException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$patient_", NULL, 0x1012, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatients_$1 = { "$1", "com.sparseware.bellavista.external.fhir.util", "Patients", 0x8000, 1, methods, 1, fields, 0, NULL};
  return &_CCPBVFHIRPatients_$1;
}

@end
@implementation CCPBVFHIRPatients_$1_$1

- (id)entryEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)entry_ {
  if ([CCPBVFHIRPatients checkEncounterWithRAREUTJSONObject:entry_ withCCPBVFHIRPatients_BestObjectHolder:val$oh_]) {
    [((RAREUTJSONTokener *) nil_chk(val$t_)) setTerminateParsingWithBoolean:YES];
  }
  return nil;
}

- (id)initWithCCPBVFHIRPatients_BestObjectHolder:(CCPBVFHIRPatients_BestObjectHolder *)capture$0
                           withRAREUTJSONTokener:(RAREUTJSONTokener *)capture$1 {
  val$oh_ = capture$0;
  val$t_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "entryEncounteredWithRAREUTJSONObject:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "val$oh_", NULL, 0x1012, "LCCPBVFHIRPatients_BestObjectHolder" },
    { "val$t_", NULL, 0x1012, "LRAREUTJSONTokener" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatients_$1_$1 = { "$1", "com.sparseware.bellavista.external.fhir.util", "Patients$$1", 0x8000, 1, methods, 2, fields, 0, NULL};
  return &_CCPBVFHIRPatients_$1_$1;
}

@end
