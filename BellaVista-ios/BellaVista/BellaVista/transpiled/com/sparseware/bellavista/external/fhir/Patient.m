//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/Patient.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/OrderedProperties.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONTokener.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/FHIRJSONWatcher.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/FHIRUtils.h"
#include "com/sparseware/bellavista/external/fhir/Patient.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/external/fhir/util/Patients.h"
#include "com/sparseware/bellavista/external/fhir/util/Users.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@implementation CCPBVFHIRPatient

static BOOL CCPBVFHIRPatient_flagsSupported_;
static BOOL CCPBVFHIRPatient_problemsSupported_;
static BOOL CCPBVFHIRPatient_appointmentsSupported_;
static IOSObjectArray * CCPBVFHIRPatient_flagsColumnNames_;
static IOSObjectArray * CCPBVFHIRPatient_problemColumnNames_;
static IOSObjectArray * CCPBVFHIRPatient_alertsColumnNames_;
static NSString * CCPBVFHIRPatient_selectedPatientID_;
static id<JavaUtilList> CCPBVFHIRPatient_selectedPatientCareteam_;
static NSString * CCPBVFHIRPatient_problemsSearchParams_;
static NSString * CCPBVFHIRPatient_flagsSearchParams_;
static NSString * CCPBVFHIRPatient_allergiesSearchParams_;
static NSString * CCPBVFHIRPatient_alertsSearchParams_;
static BOOL CCPBVFHIRPatient_initialized_;

+ (BOOL)flagsSupported {
  return CCPBVFHIRPatient_flagsSupported_;
}

+ (BOOL *)flagsSupportedRef {
  return &CCPBVFHIRPatient_flagsSupported_;
}

+ (BOOL)problemsSupported {
  return CCPBVFHIRPatient_problemsSupported_;
}

+ (BOOL *)problemsSupportedRef {
  return &CCPBVFHIRPatient_problemsSupported_;
}

+ (BOOL)appointmentsSupported {
  return CCPBVFHIRPatient_appointmentsSupported_;
}

+ (BOOL *)appointmentsSupportedRef {
  return &CCPBVFHIRPatient_appointmentsSupported_;
}

+ (IOSObjectArray *)flagsColumnNames {
  return CCPBVFHIRPatient_flagsColumnNames_;
}

+ (void)setFlagsColumnNames:(IOSObjectArray *)flagsColumnNames {
  CCPBVFHIRPatient_flagsColumnNames_ = flagsColumnNames;
}

+ (IOSObjectArray *)problemColumnNames {
  return CCPBVFHIRPatient_problemColumnNames_;
}

+ (void)setProblemColumnNames:(IOSObjectArray *)problemColumnNames {
  CCPBVFHIRPatient_problemColumnNames_ = problemColumnNames;
}

+ (IOSObjectArray *)alertsColumnNames {
  return CCPBVFHIRPatient_alertsColumnNames_;
}

+ (void)setAlertsColumnNames:(IOSObjectArray *)alertsColumnNames {
  CCPBVFHIRPatient_alertsColumnNames_ = alertsColumnNames;
}

+ (NSString *)selectedPatientID {
  return CCPBVFHIRPatient_selectedPatientID_;
}

+ (void)setSelectedPatientID:(NSString *)selectedPatientID {
  CCPBVFHIRPatient_selectedPatientID_ = selectedPatientID;
}

+ (id<JavaUtilList>)selectedPatientCareteam {
  return CCPBVFHIRPatient_selectedPatientCareteam_;
}

+ (void)setSelectedPatientCareteam:(id<JavaUtilList>)selectedPatientCareteam {
  CCPBVFHIRPatient_selectedPatientCareteam_ = selectedPatientCareteam;
}

+ (NSString *)problemsSearchParams {
  return CCPBVFHIRPatient_problemsSearchParams_;
}

+ (void)setProblemsSearchParams:(NSString *)problemsSearchParams {
  CCPBVFHIRPatient_problemsSearchParams_ = problemsSearchParams;
}

+ (NSString *)flagsSearchParams {
  return CCPBVFHIRPatient_flagsSearchParams_;
}

+ (void)setFlagsSearchParams:(NSString *)flagsSearchParams {
  CCPBVFHIRPatient_flagsSearchParams_ = flagsSearchParams;
}

+ (NSString *)allergiesSearchParams {
  return CCPBVFHIRPatient_allergiesSearchParams_;
}

+ (void)setAllergiesSearchParams:(NSString *)allergiesSearchParams {
  CCPBVFHIRPatient_allergiesSearchParams_ = allergiesSearchParams;
}

+ (NSString *)alertsSearchParams {
  return CCPBVFHIRPatient_alertsSearchParams_;
}

+ (void)setAlertsSearchParams:(NSString *)alertsSearchParams {
  CCPBVFHIRPatient_alertsSearchParams_ = alertsSearchParams;
}

+ (BOOL)initialized {
  return CCPBVFHIRPatient_initialized_;
}

+ (BOOL *)initializedRef {
  return &CCPBVFHIRPatient_initialized_;
}

- (id)init {
  if (self = [super initWithNSString:@"Patient"]) {
    if (!CCPBVFHIRPatient_initialized_) {
      CCPBVFHIRPatient_flagsSupported_ = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getResourceWithNSString:@"Flag"] != nil;
      CCPBVFHIRPatient_problemsSupported_ = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getResourceWithNSString:@"Condition"] != nil;
      CCPBVFHIRPatient_appointmentsSupported_ = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) getResourceWithNSString:@"Appointment"] != nil;
      RAREUTJSONObject *o = [((CCPBVSettings_Server *) nil_chk([((CCPBVFHIRFHIRServer *) nil_chk(server_)) getServerConfig])) optJSONObjectWithNSString:@"fhir"];
      if (o != nil) {
        CCPBVFHIRPatient_problemsSearchParams_ = (NSString *) check_class_cast([o optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient_problems", @"search_params" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
        CCPBVFHIRPatient_flagsSearchParams_ = (NSString *) check_class_cast([o optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient_flags", @"search_params" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
        CCPBVFHIRPatient_allergiesSearchParams_ = (NSString *) check_class_cast([o optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient_allergies", @"search_params" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
        CCPBVFHIRPatient_alertsSearchParams_ = (NSString *) check_class_cast([o optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient_alerts", @"search_params" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [NSString class]);
      }
    }
  }
  return self;
}

- (void)alertsWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                   withCCPBVActionPath:(CCPBVActionPath *)path
                 withJavaIoInputStream:(JavaIoInputStream *)data
                  withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  if (!CCPBVFHIRPatient_appointmentsSupported_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:CCPBVFHIRPatient_alertsColumnNames_ withInt:0];
    return;
  }
  NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID];
  id writer = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"Appointment?patient="];
  (void) [sb appendWithNSString:id_];
  if (CCPBVFHIRPatient_alertsSearchParams_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'&'])) appendWithNSString:CCPBVFHIRPatient_alertsSearchParams_];
  }
  RAREActionLink *l = [server_ createResourceLinkWithNSString:[sb description] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    RAREUTJSONWriter *jw;
    JavaIoWriter *w;
    if ([writer isKindOfClass:[RAREUTJSONWriter class]]) {
      jw = (RAREUTJSONWriter *) check_class_cast(writer, [RAREUTJSONWriter class]);
      w = nil;
    }
    else {
      w = (JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]);
      jw = nil;
    }
    if (jw != nil) {
      (void) [jw object];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_columns"])) array];
      {
        IOSObjectArray *a__ = CCPBVFHIRPatient_alertsColumnNames_;
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *name = (*b__++);
          (void) [jw valueWithId:name];
        }
      }
      (void) [jw endArray];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_rows"])) array];
    }
    RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    id<CCPBVFHIRFHIRJSONWatcher_iCallback> cb = [[CCPBVFHIRPatient_$1 alloc] initWithCCPBVFHIRPatient:self withRAREUTJSONWriter:jw withJavaIoWriter:w withRAREUTCharArray:ca];
    [t setWatcherWithRAREUTJSONTokener_iWatcher:[[CCPBVFHIRFHIRJSONWatcher alloc] initWithCCPBVFHIRFHIRJSONWatcher_iCallback:cb]];
    (void) [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
    [t dispose];
    if (jw != nil) {
      (void) [jw endArray];
      (void) [jw endObject];
    }
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) closeEx];
  }
  [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers];
}

- (void)allergiesWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                      withCCPBVActionPath:(CCPBVActionPath *)path
                    withJavaIoInputStream:(JavaIoInputStream *)data
                     withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID];
  id w;
  [self writeAllergiesWithCCPBVFHIRFHIRServer:server_ withId:w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES] withNSString:id_];
  if ([w isKindOfClass:[RAREUTJSONWriter class]]) {
    (void) [((RAREUTJSONWriter *) check_class_cast(w, [RAREUTJSONWriter class])) endObject];
  }
}

- (void)allergyWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                    withCCPBVActionPath:(CCPBVActionPath *)path
                  withJavaIoInputStream:(JavaIoInputStream *)data
                   withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self noDocumentWithCCPBViHttpConnection:conn withCCPBVActionPath:path withCCPBVHttpHeaders:headers];
}

- (void)careteamWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  NSString *id_ = [CCPBVUtils getPatientID];
  id<JavaUtilList> team;
  if ((id_ != nil) && [id_ isEqual:CCPBVFHIRPatient_selectedPatientID_] && (CCPBVFHIRPatient_selectedPatientCareteam_ != nil)) {
    team = CCPBVFHIRPatient_selectedPatientCareteam_;
  }
  else {
    RAREUTJSONObject *o = [CCPBVFHIRPatients getBestEncounterWithNSString:id_ withBoolean:YES];
    RAREUTJSONArray *a = (o == nil) ? nil : [o optJSONArrayWithNSString:@"participant"];
    if ((a != nil) && ([a length] > 0)) {
      team = [CCPBVFHIRPatient parseParticipantWithCCPBVFHIRFHIRServer:server_ withRAREUTJSONArray:a];
    }
    else {
      team = nil;
    }
    if (team == nil) {
      team = [JavaUtilCollections EMPTY_LIST];
    }
    CCPBVFHIRPatient_selectedPatientCareteam_ = team;
    CCPBVFHIRPatient_selectedPatientID_ = id_;
  }
  if ((team == nil) || ([team size] == 0)) {
    [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers];
  }
  else {
    id writer = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
    RAREUTJSONWriter *jw;
    JavaIoWriter *w;
    if ([writer isKindOfClass:[RAREUTJSONWriter class]]) {
      jw = (RAREUTJSONWriter *) check_class_cast(writer, [RAREUTJSONWriter class]);
      w = nil;
    }
    else {
      w = (JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]);
      jw = nil;
    }
    if (jw != nil) {
      (void) [jw object];
      (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_columns"])) array])) valueWithId:@"id"])) valueWithId:@"xmpp_alias"])) valueWithId:@"name"])) valueWithId:@"role"])) valueWithId:@"is_physician"])) endArray];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_rows"])) array];
      for (CCPBVFHIRPatient_Practitioner * __strong member in team) {
        (void) [jw object];
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"id"])) valueWithId:[((CCPBVFHIRPatient_Practitioner *) nil_chk(member)) getID]];
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"name"])) valueWithId:[member getName]];
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"role"])) valueWithId:[member getRole]];
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"is_physician"])) valueWithBoolean:[member isProvider]];
        (void) [jw endObject];
      }
      (void) [jw endArray];
      (void) [jw endObject];
    }
    else {
      for (CCPBVFHIRPatient_Practitioner * __strong member in team) {
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:[((CCPBVFHIRPatient_Practitioner *) nil_chk(member)) getID]];
        [w writeWithNSString:@"^^"];
        [w writeWithNSString:[member getName]];
        [w writeWithNSString:@"^"];
        [w writeWithNSString:[member getRole]];
        [w writeWithNSString:@"^"];
        [w writeWithNSString:[member isProvider] ? @"true" : @"false"];
        [w writeWithInt:0x000a];
      }
    }
  }
}

- (void)flagWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  NSString *id_ = [self removeExtensionWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]];
  RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) createResourceLinkWithNSString:[NSString stringWithFormat:@"Flag/%@", id_] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
    [headers mimeHtml];
    JavaIoWriter *w = [((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter];
    RAREUTJSONObject *entry_ = [CCPBVFHIRaFHIRemoteService getReadEntryWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    [CCPBVFHIRFHIRUtils writeHTMLDocumentStartWithJavaIoWriter:w withNSString:nil];
    RAREUTJSONObject *text = [((RAREUTJSONObject *) nil_chk(entry_)) optJSONObjectWithNSString:@"text"];
    if (text != nil) {
      [CCPBVFHIRFHIRUtils writeTextWithJavaIoWriter:w withRAREUTJSONObject:text withBoolean:NO withBoolean:YES];
    }
    else {
      (void) [((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:[self getResourceAsStringWithNSString:@"bv.text.blank_report"]];
    }
    [CCPBVFHIRFHIRUtils writeHTMLDocumentFinishWithJavaIoWriter:w];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)flagsWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                  withCCPBVActionPath:(CCPBVActionPath *)path
                withJavaIoInputStream:(JavaIoInputStream *)data
                 withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  if (!CCPBVFHIRPatient_flagsSupported_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:CCPBVFHIRPatient_flagsColumnNames_ withInt:0];
    return;
  }
  NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID];
  id writer = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"Flag?patient="];
  (void) [sb appendWithNSString:id_];
  if (CCPBVFHIRPatient_flagsSearchParams_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'&'])) appendWithNSString:CCPBVFHIRPatient_flagsSearchParams_];
  }
  RAREActionLink *l = [server_ createResourceLinkWithNSString:[sb description] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    RAREUTJSONWriter *jw;
    JavaIoWriter *w;
    if ([writer isKindOfClass:[RAREUTJSONWriter class]]) {
      jw = (RAREUTJSONWriter *) check_class_cast(writer, [RAREUTJSONWriter class]);
      w = nil;
    }
    else {
      w = (JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]);
      jw = nil;
    }
    if (jw != nil) {
      (void) [jw object];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_columns"])) array];
      {
        IOSObjectArray *a__ = CCPBVFHIRPatient_flagsColumnNames_;
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *name = (*b__++);
          (void) [jw valueWithId:name];
        }
      }
      (void) [jw endArray];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_rows"])) array];
    }
    RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    id<CCPBVFHIRFHIRJSONWatcher_iCallback> cb = [[CCPBVFHIRPatient_$2 alloc] initWithCCPBVFHIRPatient:self withRAREUTJSONWriter:jw withJavaIoWriter:w withRAREUTCharArray:ca];
    [t setWatcherWithRAREUTJSONTokener_iWatcher:[[CCPBVFHIRFHIRJSONWatcher alloc] initWithCCPBVFHIRFHIRJSONWatcher_iCallback:cb]];
    (void) [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
    [t dispose];
    if (jw != nil) {
      (void) [jw endArray];
      (void) [jw endObject];
    }
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) closeEx];
  }
}

- (void)problemWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                    withCCPBVActionPath:(CCPBVActionPath *)path
                  withJavaIoInputStream:(JavaIoInputStream *)data
                   withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self noDocumentWithCCPBViHttpConnection:conn withCCPBVActionPath:path withCCPBVHttpHeaders:headers];
}

- (void)problemsWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  if (!CCPBVFHIRPatient_problemsSupported_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:CCPBVFHIRPatient_problemColumnNames_ withInt:0];
    return;
  }
  NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getPatientID];
  id writer = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"Condition?patient="];
  (void) [sb appendWithNSString:id_];
  if (CCPBVFHIRPatient_problemsSearchParams_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'&'])) appendWithNSString:CCPBVFHIRPatient_problemsSearchParams_];
  }
  RAREActionLink *l = [server_ createResourceLinkWithNSString:[sb description] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    RAREUTJSONWriter *jw;
    JavaIoWriter *w;
    if ([writer isKindOfClass:[RAREUTJSONWriter class]]) {
      jw = (RAREUTJSONWriter *) check_class_cast(writer, [RAREUTJSONWriter class]);
      w = nil;
    }
    else {
      w = (JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]);
      jw = nil;
    }
    if (jw != nil) {
      (void) [jw object];
      (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_columns"])) array])) valueWithId:@"problem"])) valueWithId:@"status"])) endArray];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_rows"])) array];
    }
    RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    id<CCPBVFHIRFHIRJSONWatcher_iCallback> cb = [[CCPBVFHIRPatient_$3 alloc] initWithCCPBVFHIRPatient:self withRAREUTJSONWriter:jw withJavaIoWriter:w withRAREUTCharArray:ca];
    [t setWatcherWithRAREUTJSONTokener_iWatcher:[[CCPBVFHIRFHIRJSONWatcher alloc] initWithCCPBVFHIRFHIRJSONWatcher_iCallback:cb]];
    (void) [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
    [t dispose];
    if (jw != nil) {
      (void) [jw endArray];
      (void) [jw endObject];
    }
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) closeEx];
  }
}

- (void)writeAllergiesWithCCPBVFHIRFHIRServer:(CCPBVFHIRFHIRServer *)server
                                       withId:(id)writer
                                 withNSString:(NSString *)id_ {
  RAREUTJSONWriter *jw;
  JavaIoWriter *w;
  if ([writer isKindOfClass:[RAREUTJSONWriter class]]) {
    jw = (RAREUTJSONWriter *) check_class_cast(writer, [RAREUTJSONWriter class]);
    w = nil;
  }
  else {
    w = (JavaIoWriter *) check_class_cast(writer, [JavaIoWriter class]);
    jw = nil;
  }
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] initWithNSString:@"AllergyIntolerance?patient="];
  (void) [sb appendWithNSString:id_];
  if (CCPBVFHIRPatient_allergiesSearchParams_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'&'])) appendWithNSString:CCPBVFHIRPatient_allergiesSearchParams_];
  }
  RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk(server)) createResourceLinkWithNSString:[sb description] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
  @try {
    if (jw != nil) {
      (void) [jw object];
      (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_columns"])) array])) valueWithId:@"allergen"])) valueWithId:@"reactions"])) endArray];
      (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"_rows"])) array];
    }
    RAREUTJSONTokener *t = [[RAREUTJSONTokener alloc] initWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader]];
    RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
    id<CCPBVFHIRFHIRJSONWatcher_iCallback> cb = [[CCPBVFHIRPatient_$4 alloc] initWithCCPBVFHIRPatient:self withCCPBVFHIRFHIRServer:server withRAREUTCharArray:ca withRAREUTJSONWriter:jw withJavaIoWriter:w];
    [t setWatcherWithRAREUTJSONTokener_iWatcher:[[CCPBVFHIRFHIRJSONWatcher alloc] initWithCCPBVFHIRFHIRJSONWatcher_iCallback:cb]];
    RAREUTJSONObject *o = [[RAREUTJSONObject alloc] initWithRAREUTJSONTokener:t];
    [t dispose];
    if (jw != nil) {
      (void) [jw endArray];
      (void) [jw endObject];
    }
  }
  @catch (JavaLangException *e) {
    [server debugLogWithNSString:[RAREApplicationException getMessageExWithJavaLangThrowable:e]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) closeEx];
  }
}

+ (id<JavaUtilList>)parseParticipantWithCCPBVFHIRFHIRServer:(CCPBVFHIRFHIRServer *)server
                                        withRAREUTJSONArray:(RAREUTJSONArray *)participants {
  int len = [((RAREUTJSONArray *) nil_chk(participants)) size];
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [participants getJSONObjectWithInt:i];
    NSString *tname = nil;
    NSString *tcode = nil;
    RAREUTJSONObject *oo = [((RAREUTJSONObject *) nil_chk(o)) optJSONObjectWithNSString:@"individual"];
    CCPBVFHIRPatient_Practitioner *p;
    if (oo != nil) {
      NSString *name = [oo optStringWithNSString:@"display"];
      NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(server)) getIDWithNSString:[oo optStringWithNSString:@"reference"] withBoolean:NO];
      [list addWithId:p = [[CCPBVFHIRPatient_Practitioner alloc] initWithNSString:id_ withNSString:name withNSString:tcode withNSString:tname]];
      RAREUTJSONArray *a = [o optJSONArrayWithNSString:@"type"];
      int alen = (a == nil) ? 0 : [a length];
      for (int n = 0; n < alen; n++) {
        CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONObject:[((RAREUTJSONArray *) nil_chk(a)) getJSONObjectWithInt:i]];
        if (mc != nil) {
          [p addTypeWithNSString:[mc getBestCode] withNSString:[mc getBestText]];
        }
      }
    }
  }
  return list;
}

- (void)readEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                 withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                     withJavaIoWriter:(JavaIoWriter *)w
                    withNSObjectArray:(IOSObjectArray *)params {
}

+ (void)setSelectedPatientCareInfoWithNSString:(NSString *)id_
                              withJavaUtilList:(id<JavaUtilList>)team {
  CCPBVFHIRPatient_selectedPatientID_ = id_;
  CCPBVFHIRPatient_selectedPatientCareteam_ = team;
}

+ (id<JavaUtilList>)getSelectedPatientCareteam {
  return CCPBVFHIRPatient_selectedPatientCareteam_;
}

+ (void)initialize {
  if (self == [CCPBVFHIRPatient class]) {
    CCPBVFHIRPatient_flagsColumnNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"date", @"location", @"status" } count:3 type:[IOSClass classWithClass:[NSString class]]];
    CCPBVFHIRPatient_problemColumnNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"problem", @"status" } count:2 type:[IOSClass classWithClass:[NSString class]]];
    CCPBVFHIRPatient_alertsColumnNames_ = [IOSObjectArray arrayWithObjects:(id[]){ @"description", @"due_date", @"last_occurance", @"priority", @"type" } count:5 type:[IOSClass classWithClass:[NSString class]]];
  }
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "alertsWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "allergiesWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "allergyWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "careteamWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "flagWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "flagsWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "problemWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "problemsWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "writeAllergiesWithCCPBVFHIRFHIRServer:withId:withNSString:", NULL, "V", 0x1, "JavaIoIOException" },
    { "parseParticipantWithCCPBVFHIRFHIRServer:withRAREUTJSONArray:", NULL, "LJavaUtilList", 0x9, NULL },
    { "readEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "getSelectedPatientCareteam", NULL, "LJavaUtilList", 0x9, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "flagsSupported_", NULL, 0xc, "Z" },
    { "problemsSupported_", NULL, 0xc, "Z" },
    { "appointmentsSupported_", NULL, 0xc, "Z" },
    { "flagsColumnNames_", NULL, 0xc, "LIOSObjectArray" },
    { "problemColumnNames_", NULL, 0xc, "LIOSObjectArray" },
    { "alertsColumnNames_", NULL, 0xc, "LIOSObjectArray" },
    { "selectedPatientID_", NULL, 0xc, "LNSString" },
    { "selectedPatientCareteam_", NULL, 0xc, "LJavaUtilList" },
    { "problemsSearchParams_", NULL, 0xc, "LNSString" },
    { "flagsSearchParams_", NULL, 0xc, "LNSString" },
    { "allergiesSearchParams_", NULL, 0xc, "LNSString" },
    { "alertsSearchParams_", NULL, 0xc, "LNSString" },
    { "initialized_", NULL, 0xc, "Z" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient = { "Patient", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 12, methods, 13, fields, 0, NULL};
  return &_CCPBVFHIRPatient;
}

@end
@implementation CCPBVFHIRPatient_Practitioner

static RAREUTOrderedProperties * CCPBVFHIRPatient_Practitioner_participantRoles_;

+ (RAREUTOrderedProperties *)participantRoles {
  return CCPBVFHIRPatient_Practitioner_participantRoles_;
}

+ (void)setParticipantRoles:(RAREUTOrderedProperties *)participantRoles {
  CCPBVFHIRPatient_Practitioner_participantRoles_ = participantRoles;
}

- (id)initWithNSString:(NSString *)id_
          withNSString:(NSString *)name {
  if (self = [super init]) {
    self->id__ = id_;
    self->name_ = name;
  }
  return self;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getID {
  return id__;
}

- (NSString *)getRole {
  if ((typeName_ == nil) || ([typeName_ sequenceLength] == 0)) {
    if (typeCode_ == nil) {
      typeCode_ = @"PART";
    }
    if (CCPBVFHIRPatient_Practitioner_participantRoles_ == nil) {
      @try {
        CCPBVFHIRPatient_Practitioner_participantRoles_ = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) load__WithNSString:@"/data/participant.properties"];
      }
      @catch (JavaIoIOException *e) {
        CCPBVFHIRPatient_Practitioner_participantRoles_ = [[RAREUTOrderedProperties alloc] init];
      }
    }
    typeName_ = (NSString *) check_class_cast([((RAREUTOrderedProperties *) nil_chk(CCPBVFHIRPatient_Practitioner_participantRoles_)) getWithId:typeCode_], [NSString class]);
    if (typeName_ == nil) {
      typeName_ = @"Participant";
    }
  }
  return typeName_;
}

- (id)initWithNSString:(NSString *)id_
          withNSString:(NSString *)name
          withNSString:(NSString *)typeCode
          withNSString:(NSString *)typeName {
  if (self = [super init]) {
    self->id__ = id_;
    self->name_ = name;
    self->typeName_ = typeName;
    self->typeCode_ = typeCode;
  }
  return self;
}

- (BOOL)isAttending {
  if ([@"ATND" isEqual:typeCode_]) {
    return YES;
  }
  return (typeCodes_ == nil) ? NO : [typeCodes_ indexOfWithId:@"ATND"] != -1;
}

- (BOOL)isAdmitting {
  if ([@"ADM" isEqual:typeCode_]) {
    return YES;
  }
  return (typeCodes_ == nil) ? NO : [typeCodes_ indexOfWithId:@"ADM"] != -1;
}

- (BOOL)isTypeWithNSString:(NSString *)type {
  if ([((NSString *) nil_chk(type)) isEqual:typeCode_]) {
    return YES;
  }
  return (typeCodes_ == nil) ? NO : [typeCodes_ indexOfWithId:type] != -1;
}

- (RAREUTJSONObject *)getUserObjectWithBoolean:(BOOL)resolve
                                   withBoolean:(BOOL)usersSupported {
  if ((userObject_ == nil) && resolve) {
    if (usersSupported) {
      @try {
        RAREActionLink *l = [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) createResourceLinkWithNSString:[NSString stringWithFormat:@"Practitioner/%@", id__] withNSStringArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]]];
        userObject_ = [CCPBVFHIRUsers populateUserWithNSString:id__ withRAREUTJSONObject:[[RAREUTJSONObject alloc] initWithNSString:[((RAREActionLink *) nil_chk(l)) getContentAsString]]];
        (void) [((RAREUTJSONObject *) nil_chk(userObject_)) putWithNSString:@"role" withId:[self getRole]];
      }
      @catch (JavaLangException *e) {
        [((CCPBVFHIRFHIRServer *) nil_chk([CCPBVFHIRFHIRServer getInstance])) ignoreExceptionWithJavaLangException:e];
        userObject_ = [[RAREUTJSONObject alloc] init];
        (void) [userObject_ putWithNSString:@"is_provider" withBoolean:[self isProvider]];
      }
    }
    else {
      userObject_ = [[RAREUTJSONObject alloc] init];
      (void) [userObject_ putWithNSString:@"is_provider" withBoolean:[self isProvider]];
    }
    (void) [((RAREUTJSONObject *) nil_chk(userObject_)) putWithNSString:@"id" withId:id__];
    (void) [userObject_ putWithNSString:@"role" withId:[self getRole]];
    (void) [userObject_ putWithNSString:@"name" withId:name_];
  }
  return userObject_;
}

- (void)setUserObjectWithRAREUTJSONObject:(RAREUTJSONObject *)o {
  userObject_ = o;
}

- (void)addTypeWithNSString:(NSString *)code
               withNSString:(NSString *)name {
  if (typeCode_ == nil) {
    typeCode_ = code;
    typeName_ = name;
  }
  else {
    if (typeCodes_ == nil) {
      typeCodes_ = [[JavaUtilArrayList alloc] initWithInt:3];
      typeNames_ = [[JavaUtilArrayList alloc] initWithInt:3];
    }
    [((id<JavaUtilList>) nil_chk(typeCodes_)) addWithId:code];
    [((id<JavaUtilList>) nil_chk(typeNames_)) addWithId:name];
  }
}

- (BOOL)isProvider {
  return [@"REFB" isEqual:typeCode_] || [self isAttending] || [self isAdmitting];
}

- (void)copyAllFieldsTo:(CCPBVFHIRPatient_Practitioner *)other {
  [super copyAllFieldsTo:other];
  other->id__ = id__;
  other->name_ = name_;
  other->typeCode_ = typeCode_;
  other->typeCodes_ = typeCodes_;
  other->typeName_ = typeName_;
  other->typeNames_ = typeNames_;
  other->userObject_ = userObject_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getName", NULL, "LNSString", 0x1, NULL },
    { "getID", NULL, "LNSString", 0x1, NULL },
    { "getRole", NULL, "LNSString", 0x1, NULL },
    { "isAttending", NULL, "Z", 0x1, NULL },
    { "isAdmitting", NULL, "Z", 0x1, NULL },
    { "isTypeWithNSString:", NULL, "Z", 0x1, NULL },
    { "getUserObjectWithBoolean:withBoolean:", NULL, "LRAREUTJSONObject", 0x1, NULL },
    { "isProvider", NULL, "Z", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "id__", "id", 0x1, "LNSString" },
    { "name_", NULL, 0x1, "LNSString" },
    { "typeName_", NULL, 0x1, "LNSString" },
    { "typeCode_", NULL, 0x1, "LNSString" },
    { "typeNames_", NULL, 0x0, "LJavaUtilList" },
    { "typeCodes_", NULL, 0x0, "LJavaUtilList" },
    { "userObject_", NULL, 0x0, "LRAREUTJSONObject" },
    { "participantRoles_", NULL, 0x8, "LRAREUTOrderedProperties" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient_Practitioner = { "Practitioner", "com.sparseware.bellavista.external.fhir", "Patient", 0x9, 8, methods, 8, fields, 0, NULL};
  return &_CCPBVFHIRPatient_Practitioner;
}

@end
@implementation CCPBVFHIRPatient_$1

- (id)entryEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)entry_ {
  @try {
    do {
      entry_ = [((RAREUTJSONObject *) nil_chk(entry_)) getJSONObjectWithNSString:@"resource"];
      if ([((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:@"Appointment"]) {
        NSString *status = [entry_ optStringWithNSString:@"status"];
        if ([@"canceled" isEqual:status]) {
          break;
        }
        NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(this$0_->server_)) getIDWithNSString:[entry_ optStringWithNSString:@"id"] withBoolean:NO];
        NSString *date = [entry_ optStringWithNSString:@"start" withNSString:nil];
        NSString *priority = [entry_ optStringWithNSString:@"priority" withNSString:nil];
        NSString *type = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"type"]];
        NSString *description_ = [entry_ optStringWithNSString:@"description" withNSString:nil];
        if (description_ == nil) {
          description_ = [entry_ optStringWithNSString:@"reason" withNSString:nil];
        }
        if (description_ == nil) {
          [this$0_ debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [entry_ toStringWithInt:2]]];
          break;
        }
        if (val$jw_ != nil) {
          (void) [val$jw_ object];
          (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"description"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"linkedData"])) valueWithId:id_])) keyWithNSString:@"value"])) valueWithId:description_];
          if (date != nil) {
            (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"due_date"])) valueWithId:date];
          }
          if (type != nil) {
            (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"type"])) valueWithId:type];
          }
          if (priority != nil) {
            (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"priority"])) valueWithId:priority];
          }
          (void) [val$jw_ endObject];
          (void) [val$jw_ endObject];
        }
        else {
          [((JavaIoWriter *) nil_chk(val$w_)) writeWithNSString:id_];
          [val$w_ writeWithInt:(unichar) '|'];
          [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:val$w_ withNSString:description_ withRAREUTCharArray:val$ca_];
          [val$w_ writeWithInt:(unichar) '^'];
          if (date != nil) {
            [val$w_ writeWithNSString:date];
          }
          [val$w_ writeWithNSString:@"^^"];
          if (priority != nil) {
            [val$w_ writeWithNSString:priority];
          }
          [val$w_ writeWithInt:(unichar) '^'];
          if (type != nil) {
            [val$w_ writeWithNSString:type];
          }
          [val$w_ writeWithInt:0x000a];
        }
      }
    }
    while (NO);
  }
  @catch (JavaLangException *e) {
  }
  return nil;
}

- (id)initWithCCPBVFHIRPatient:(CCPBVFHIRPatient *)outer$
          withRAREUTJSONWriter:(RAREUTJSONWriter *)capture$0
              withJavaIoWriter:(JavaIoWriter *)capture$1
           withRAREUTCharArray:(RAREUTCharArray *)capture$2 {
  this$0_ = outer$;
  val$jw_ = capture$0;
  val$w_ = capture$1;
  val$ca_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "entryEncounteredWithRAREUTJSONObject:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVFHIRPatient" },
    { "val$jw_", NULL, 0x1012, "LRAREUTJSONWriter" },
    { "val$w_", NULL, 0x1012, "LJavaIoWriter" },
    { "val$ca_", NULL, 0x1012, "LRAREUTCharArray" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient_$1 = { "$1", "com.sparseware.bellavista.external.fhir", "Patient", 0x8000, 1, methods, 4, fields, 0, NULL};
  return &_CCPBVFHIRPatient_$1;
}

@end
@implementation CCPBVFHIRPatient_$2

- (id)entryEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)entry_ {
  @try {
    do {
      entry_ = [((RAREUTJSONObject *) nil_chk(entry_)) getJSONObjectWithNSString:@"resource"];
      if ([((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:@"Flag"]) {
        NSString *status = [entry_ optStringWithNSString:@"status"];
        if (![@"active" isEqual:status]) {
          break;
        }
        NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(this$0_->server_)) getIDWithNSString:[entry_ optStringWithNSString:@"id"] withBoolean:NO];
        RAREUTJSONObject *code = [entry_ getJSONObjectWithNSString:@"code"];
        NSString *flag = [((RAREUTJSONObject *) nil_chk(code)) optStringWithNSString:@"text" withNSString:nil];
        if (flag == nil) {
          CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONArray:[code optJSONArrayWithNSString:@"coding"]];
          flag = (mc == nil) ? nil : [mc getBestText];
        }
        if (flag == nil) {
          [this$0_ debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [entry_ toStringWithInt:2]]];
          break;
        }
        if (val$jw_ != nil) {
          (void) [val$jw_ object];
          (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"description"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"linkedData"])) valueWithId:id_])) keyWithNSString:@"value"])) valueWithId:flag];
          (void) [val$jw_ endObject];
          (void) [val$jw_ endObject];
        }
        else {
          [((JavaIoWriter *) nil_chk(val$w_)) writeWithNSString:id_];
          [val$w_ writeWithInt:(unichar) '|'];
          [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:val$w_ withNSString:flag withRAREUTCharArray:val$ca_];
          [val$w_ writeWithInt:0x000a];
        }
      }
    }
    while (NO);
  }
  @catch (JavaLangException *e) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
  return nil;
}

- (id)initWithCCPBVFHIRPatient:(CCPBVFHIRPatient *)outer$
          withRAREUTJSONWriter:(RAREUTJSONWriter *)capture$0
              withJavaIoWriter:(JavaIoWriter *)capture$1
           withRAREUTCharArray:(RAREUTCharArray *)capture$2 {
  this$0_ = outer$;
  val$jw_ = capture$0;
  val$w_ = capture$1;
  val$ca_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "entryEncounteredWithRAREUTJSONObject:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVFHIRPatient" },
    { "val$jw_", NULL, 0x1012, "LRAREUTJSONWriter" },
    { "val$w_", NULL, 0x1012, "LJavaIoWriter" },
    { "val$ca_", NULL, 0x1012, "LRAREUTCharArray" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient_$2 = { "$2", "com.sparseware.bellavista.external.fhir", "Patient", 0x8000, 1, methods, 4, fields, 0, NULL};
  return &_CCPBVFHIRPatient_$2;
}

@end
@implementation CCPBVFHIRPatient_$3

- (id)entryEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)entry_ {
  @try {
    entry_ = [((RAREUTJSONObject *) nil_chk(entry_)) getJSONObjectWithNSString:@"resource"];
    if ([((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:@"Condition"]) {
      NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(this$0_->server_)) getIDWithNSString:[entry_ optStringWithNSString:@"id"] withBoolean:NO];
      CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONObject:[entry_ getJSONObjectWithNSString:@"code"]];
      if (mc == nil) {
        if ([this$0_->server_ isDebugMode]) {
          mc = [CCPBVFHIRaFHIRemoteService missingInvalid];
        }
        else {
          @throw [this$0_ missingRequiredDataWithNSString:@"code" withNSString:id_ withNSString:@"Condition"];
        }
      }
      NSString *problem = [((CCPBVFHIRFHIRUtils_MedicalCode *) nil_chk(mc)) getBestText];
      NSString *status = [entry_ optStringWithNSString:@"clinicalStatus" withNSString:nil];
      if (val$jw_ != nil) {
        (void) [val$jw_ object];
        (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"problem"])) object];
        (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"linkedData"])) valueWithId:id_])) keyWithNSString:@"value"])) valueWithId:problem];
        (void) [val$jw_ endObject];
        if (status != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"status"])) valueWithId:status];
        }
        (void) [val$jw_ endObject];
      }
      else {
        [((JavaIoWriter *) nil_chk(val$w_)) writeWithNSString:id_];
        [val$w_ writeWithInt:(unichar) '|'];
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:val$w_ withNSString:problem withRAREUTCharArray:val$ca_];
        [val$w_ writeWithInt:(unichar) '^'];
        if (status != nil) {
          [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:val$w_ withNSString:status withRAREUTCharArray:val$ca_];
        }
        [val$w_ writeWithInt:0x000a];
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
  return nil;
}

- (id)initWithCCPBVFHIRPatient:(CCPBVFHIRPatient *)outer$
          withRAREUTJSONWriter:(RAREUTJSONWriter *)capture$0
              withJavaIoWriter:(JavaIoWriter *)capture$1
           withRAREUTCharArray:(RAREUTCharArray *)capture$2 {
  this$0_ = outer$;
  val$jw_ = capture$0;
  val$w_ = capture$1;
  val$ca_ = capture$2;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "entryEncounteredWithRAREUTJSONObject:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVFHIRPatient" },
    { "val$jw_", NULL, 0x1012, "LRAREUTJSONWriter" },
    { "val$w_", NULL, 0x1012, "LJavaIoWriter" },
    { "val$ca_", NULL, 0x1012, "LRAREUTCharArray" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient_$3 = { "$3", "com.sparseware.bellavista.external.fhir", "Patient", 0x8000, 1, methods, 4, fields, 0, NULL};
  return &_CCPBVFHIRPatient_$3;
}

@end
@implementation CCPBVFHIRPatient_$4

- (id)entryEncounteredWithRAREUTJSONObject:(RAREUTJSONObject *)entry_ {
  @try {
    entry_ = [((RAREUTJSONObject *) nil_chk(entry_)) getJSONObjectWithNSString:@"resource"];
    if ([((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:@"AllergyIntolerance"]) {
      NSString *id_ = [((CCPBVFHIRFHIRServer *) nil_chk(val$server_)) getIDWithNSString:[entry_ optStringWithNSString:@"id"] withBoolean:NO];
      NSString *substance = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ getJSONObjectWithNSString:@"substance"]];
      if ((substance == nil) || ([substance sequenceLength] == 0)) {
        if ([val$server_ isDebugMode]) {
          substance = [CCPBVFHIRaFHIRemoteService MISSING_INVALID];
        }
        else {
          @throw [this$0_ missingRequiredDataWithNSString:@"substance" withNSString:id_ withNSString:@"AllergyIntolerance"];
        }
      }
      (void) [((RAREUTCharArray *) nil_chk(val$ca_)) setLengthWithInt:0];
      RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:@"reaction"];
      int len = (a == nil) ? 0 : [a length];
      for (int i = 0; i < len; i++) {
        RAREUTJSONArray *ma = [((RAREUTJSONObject *) nil_chk([((RAREUTJSONArray *) nil_chk(a)) getJSONObjectWithInt:i])) optJSONArrayWithNSString:@"manifestation"];
        for (id __strong o in nil_chk(ma)) {
          if (val$ca_->_length_ > 0) {
            (void) [val$ca_ appendWithNSString:@"; "];
          }
          (void) [val$ca_ appendWithNSString:[CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:(RAREUTJSONObject *) check_class_cast(o, [RAREUTJSONObject class])]];
        }
      }
      if (val$jw_ != nil) {
        (void) [val$jw_ object];
        (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"allergen"])) object];
        (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"linkedData"])) valueWithId:id_])) keyWithNSString:@"value"])) valueWithId:substance];
        (void) [val$jw_ endObject];
        (void) [((RAREUTJSONWriter *) nil_chk([val$jw_ keyWithNSString:@"reactions"])) valueWithId:[val$ca_ description]];
        (void) [val$jw_ endObject];
      }
      else {
        [((JavaIoWriter *) nil_chk(val$w_)) writeWithNSString:id_];
        [val$w_ writeWithInt:(unichar) '|'];
        [val$w_ writeWithNSString:substance];
        [val$w_ writeWithInt:(unichar) '^'];
        [val$w_ writeWithCharArray:val$ca_->A_ withInt:0 withInt:val$ca_->_length_];
        [val$w_ writeWithInt:0x000a];
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw [RAREApplicationException runtimeExceptionWithJavaLangThrowable:e];
  }
  return nil;
}

- (id)initWithCCPBVFHIRPatient:(CCPBVFHIRPatient *)outer$
       withCCPBVFHIRFHIRServer:(CCPBVFHIRFHIRServer *)capture$0
           withRAREUTCharArray:(RAREUTCharArray *)capture$1
          withRAREUTJSONWriter:(RAREUTJSONWriter *)capture$2
              withJavaIoWriter:(JavaIoWriter *)capture$3 {
  this$0_ = outer$;
  val$server_ = capture$0;
  val$ca_ = capture$1;
  val$jw_ = capture$2;
  val$w_ = capture$3;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "entryEncounteredWithRAREUTJSONObject:", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVFHIRPatient" },
    { "val$server_", NULL, 0x1012, "LCCPBVFHIRFHIRServer" },
    { "val$ca_", NULL, 0x1012, "LRAREUTCharArray" },
    { "val$jw_", NULL, 0x1012, "LRAREUTJSONWriter" },
    { "val$w_", NULL, 0x1012, "LJavaIoWriter" },
  };
  static J2ObjcClassInfo _CCPBVFHIRPatient_$4 = { "$4", "com.sparseware.bellavista.external.fhir", "Patient", 0x8000, 1, methods, 5, fields, 0, NULL};
  return &_CCPBVFHIRPatient_$4;
}

@end
