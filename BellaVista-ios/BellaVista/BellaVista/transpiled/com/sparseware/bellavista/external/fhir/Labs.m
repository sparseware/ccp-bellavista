//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/external/fhir/Labs.java
//
//  Created by decoteaud on 2/17/16.
//

#include "IOSCharArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/exception/ApplicationException.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/util/CharArray.h"
#include "com/appnativa/util/SNumber.h"
#include "com/appnativa/util/Streams.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/appnativa/util/json/JSONWriter.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/Settings.h"
#include "com/sparseware/bellavista/external/ActionLinkEx.h"
#include "com/sparseware/bellavista/external/fhir/Documents.h"
#include "com/sparseware/bellavista/external/fhir/FHIRServer.h"
#include "com/sparseware/bellavista/external/fhir/FHIRUtils.h"
#include "com/sparseware/bellavista/external/fhir/Labs.h"
#include "com/sparseware/bellavista/external/fhir/aFHIRemoteService.h"
#include "com/sparseware/bellavista/service/ContentWriter.h"
#include "com/sparseware/bellavista/service/HttpHeaders.h"
#include "com/sparseware/bellavista/service/aRemoteService.h"
#include "com/sparseware/bellavista/service/iHttpConnection.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation CCPBVFHIRLabs

static BOOL CCPBVFHIRLabs_searchByDateSupported_;
static BOOL CCPBVFHIRLabs_searchByCategorySupported_;
static JavaUtilHashMap * CCPBVFHIRLabs_categoryCodes_;
static JavaUtilHashSet * CCPBVFHIRLabs_bunCodes_;
static JavaUtilHashSet * CCPBVFHIRLabs_reportTypes_;
static JavaUtilHashSet * CCPBVFHIRLabs_nonClinicalTypes_;
static JavaUtilHashSet * CCPBVFHIRLabs_creatinineCodes_;
static NSString * CCPBVFHIRLabs_categorySearch_;
static BOOL CCPBVFHIRLabs_hasLabs_;
static BOOL CCPBVFHIRLabs_hasObservationCategorySupport_;
static BOOL CCPBVFHIRLabs_useObservations_;
static BOOL CCPBVFHIRLabs_generateDisgnosticReport_ = YES;
static IOSObjectArray * CCPBVFHIRLabs_COLUMN_NAMES_;

+ (BOOL)searchByDateSupported {
  return CCPBVFHIRLabs_searchByDateSupported_;
}

+ (BOOL *)searchByDateSupportedRef {
  return &CCPBVFHIRLabs_searchByDateSupported_;
}

+ (BOOL)searchByCategorySupported {
  return CCPBVFHIRLabs_searchByCategorySupported_;
}

+ (BOOL *)searchByCategorySupportedRef {
  return &CCPBVFHIRLabs_searchByCategorySupported_;
}

+ (JavaUtilHashMap *)categoryCodes {
  return CCPBVFHIRLabs_categoryCodes_;
}

+ (void)setCategoryCodes:(JavaUtilHashMap *)categoryCodes {
  CCPBVFHIRLabs_categoryCodes_ = categoryCodes;
}

+ (JavaUtilHashSet *)bunCodes {
  return CCPBVFHIRLabs_bunCodes_;
}

+ (void)setBunCodes:(JavaUtilHashSet *)bunCodes {
  CCPBVFHIRLabs_bunCodes_ = bunCodes;
}

+ (JavaUtilHashSet *)reportTypes {
  return CCPBVFHIRLabs_reportTypes_;
}

+ (void)setReportTypes:(JavaUtilHashSet *)reportTypes {
  CCPBVFHIRLabs_reportTypes_ = reportTypes;
}

+ (JavaUtilHashSet *)nonClinicalTypes {
  return CCPBVFHIRLabs_nonClinicalTypes_;
}

+ (void)setNonClinicalTypes:(JavaUtilHashSet *)nonClinicalTypes {
  CCPBVFHIRLabs_nonClinicalTypes_ = nonClinicalTypes;
}

+ (JavaUtilHashSet *)creatinineCodes {
  return CCPBVFHIRLabs_creatinineCodes_;
}

+ (void)setCreatinineCodes:(JavaUtilHashSet *)creatinineCodes {
  CCPBVFHIRLabs_creatinineCodes_ = creatinineCodes;
}

+ (NSString *)categorySearch {
  return CCPBVFHIRLabs_categorySearch_;
}

+ (void)setCategorySearch:(NSString *)categorySearch {
  CCPBVFHIRLabs_categorySearch_ = categorySearch;
}

+ (BOOL)hasLabs {
  return CCPBVFHIRLabs_hasLabs_;
}

+ (BOOL *)hasLabsRef {
  return &CCPBVFHIRLabs_hasLabs_;
}

+ (BOOL)hasObservationCategorySupport {
  return CCPBVFHIRLabs_hasObservationCategorySupport_;
}

+ (BOOL *)hasObservationCategorySupportRef {
  return &CCPBVFHIRLabs_hasObservationCategorySupport_;
}

+ (BOOL)useObservations {
  return CCPBVFHIRLabs_useObservations_;
}

+ (BOOL *)useObservationsRef {
  return &CCPBVFHIRLabs_useObservations_;
}

+ (BOOL)generateDisgnosticReport {
  return CCPBVFHIRLabs_generateDisgnosticReport_;
}

+ (BOOL *)generateDisgnosticReportRef {
  return &CCPBVFHIRLabs_generateDisgnosticReport_;
}

+ (IOSObjectArray *)COLUMN_NAMES {
  return CCPBVFHIRLabs_COLUMN_NAMES_;
}

+ (void)setCOLUMN_NAMES:(IOSObjectArray *)COLUMN_NAMES {
  CCPBVFHIRLabs_COLUMN_NAMES_ = COLUMN_NAMES;
}

- (id)init {
  return [self initCCPBVFHIRLabsWithNSString:@"DiagnosticReport"];
}

- (id)initCCPBVFHIRLabsWithNSString:(NSString *)resourceName {
  if (self = [super initWithNSString:resourceName]) {
    labValueFormat_ = @"<tr><td class=\"lab_name\">%s</td><td class=\"lab_value\">%s</td></tr>";
    if (CCPBVFHIRLabs_COLUMN_NAMES_ == nil) {
      CCPBVFHIRLabs_COLUMN_NAMES_ = [IOSObjectArray arrayWithObjects:(id[]){ @"date", @"lab", @"result", @"unit", @"range", @"is_document", @"category", @"panel", @"sort_order", @"result_id", @"comment" } count:11 type:[IOSClass classWithClass:[NSString class]]];
      CCPBVFHIRFHIRServer_FHIRResource *r = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceWithNSString:resourceName];
      CCPBVFHIRLabs_hasLabs_ = (r != nil);
      RAREUTJSONArray *a = (r == nil) ? nil : r->searchParams_;
      CCPBVFHIRLabs_searchByDateSupported_ = (a == nil) ? NO : [a findJSONObjectIndexWithNSString:@"name" withNSString:@"date" withInt:0] != -1;
      CCPBVFHIRLabs_searchByCategorySupported_ = (a == nil) ? NO : [a findJSONObjectIndexWithNSString:@"name" withNSString:@"category" withInt:0] != -1;
      CCPBVFHIRLabs_categoryCodes_ = [self getCategoryCodes];
      RAREUTJSONObject *o = (RAREUTJSONObject *) check_class_cast([((CCPBVSettings_Server *) nil_chk([server_ getServerConfig])) optWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"fhir", @"labs" } count:2 type:[IOSClass classWithClass:[NSString class]]]], [RAREUTJSONObject class]);
      if (o != nil) {
        CCPBVFHIRLabs_generateDisgnosticReport_ = [o optBooleanWithNSString:@"generateDisgnosticReport" withBoolean:YES];
        searchParams_ = [o optStringWithNSString:@"search_params" withNSString:nil];
        if (CCPBVFHIRLabs_searchByCategorySupported_ && ![o optBooleanWithNSString:@"searchByCategorySupported" withBoolean:YES]) {
          CCPBVFHIRLabs_searchByCategorySupported_ = NO;
        }
      }
      if (CCPBVFHIRLabs_searchByCategorySupported_) {
        JavaUtilHashMap *map = CCPBVFHIRLabs_categoryCodes_;
        if ([((JavaUtilHashMap *) nil_chk(map)) isEmpty]) {
          CCPBVFHIRLabs_categorySearch_ = nil;
        }
        else {
          JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
          for (NSString * __strong s in nil_chk([map keySet])) {
            (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:s])) appendWithChar:','];
          }
          [sb setLengthWithInt:[sb sequenceLength] - 1];
          CCPBVFHIRLabs_categorySearch_ = [sb description];
        }
      }
      else {
        CCPBVFHIRLabs_categorySearch_ = nil;
      }
    }
    columnNames_ = CCPBVFHIRLabs_COLUMN_NAMES_;
  }
  return self;
}

- (id)initWithNSString:(NSString *)resourceName {
  return [self initCCPBVFHIRLabsWithNSString:resourceName];
}

- (JavaUtilHashMap *)getCategoryCodes {
  return [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getLabCategories];
}

- (void)documentWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  RAREActionLink *l = [self createReadLinkWithNSString:[((CCPBVActionPath *) nil_chk(path)) shift]];
  @try {
    [self readWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ headers } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)realtimeWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                     withCCPBVActionPath:(CCPBVActionPath *)path
                   withJavaIoInputStream:(JavaIoInputStream *)data
                    withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers];
}

- (void)summaryWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                    withCCPBVActionPath:(CCPBVActionPath *)path
                  withJavaIoInputStream:(JavaIoInputStream *)data
                   withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self listWithCCPBViHttpConnection:conn withCCPBVActionPath:path withJavaIoInputStream:data withCCPBVHttpHeaders:headers withNSString:CCPBVFHIRLabs_categorySearch_ withInt:7];
}

- (void)listWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self listWithCCPBViHttpConnection:conn withCCPBVActionPath:path withJavaIoInputStream:data withCCPBVHttpHeaders:headers withNSString:CCPBVFHIRLabs_categorySearch_ withInt:-1];
}

- (void)list_by_categoryWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                             withCCPBVActionPath:(CCPBVActionPath *)path
                           withJavaIoInputStream:(JavaIoInputStream *)data
                            withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  id<JavaUtilMap> map = [self getQueryParamsWithJavaNetURL:[((id<CCPBViHttpConnection>) nil_chk(conn)) getURL] withJavaIoInputStream:data];
  NSString *category = [((id<JavaUtilMap>) nil_chk(map)) getWithId:@"category"];
  int days = -1;
  NSString *s = [map getWithId:@"days"];
  if (s != nil) {
    days = [RAREUTSNumber intValueWithNSString:s];
  }
  [self listWithCCPBViHttpConnection:conn withCCPBVActionPath:path withJavaIoInputStream:data withCCPBVHttpHeaders:headers withNSString:category withInt:days];
}

- (void)testsWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                  withCCPBVActionPath:(CCPBVActionPath *)path
                withJavaIoInputStream:(JavaIoInputStream *)data
                 withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [self noDataWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:NO withCCPBVHttpHeaders:headers];
}

- (void)listWithCCPBViHttpConnection:(id<CCPBViHttpConnection>)conn
                 withCCPBVActionPath:(CCPBVActionPath *)path
               withJavaIoInputStream:(JavaIoInputStream *)data
                withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers
                        withNSString:(NSString *)category
                             withInt:(int)days {
  if (!CCPBVFHIRLabs_hasLabs_) {
    [self dataNotAvailableWithCCPBViHttpConnection:conn withCCPBVActionPath:path withBoolean:YES withCCPBVHttpHeaders:headers withNSStringArray:columnNames_ withInt:1];
    return;
  }
  NSString *from = nil;
  if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDemoMode]) {
    days = -1;
  }
  if ((days > 0) && CCPBVFHIRLabs_searchByDateSupported_ && prefixSearchSupported_) {
    JavaUtilCalendar *c = [JavaUtilCalendar getInstance];
    [c setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:[((JavaUtilCalendar *) nil_chk(c)) getWithInt:JavaUtilCalendar_DAY_OF_MONTH] - days];
    [c setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
    from = [CCPBVFHIRFHIRServer convertToServerDateWithJavaUtilCalendar:c withBoolean:NO];
  }
  RAREActionLink *l;
  if (from == nil) {
    if (category == nil) {
      l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [server_ getPatientID], @"_count", @"500" } count:4 type:[IOSClass classWithClass:[NSString class]]]];
    }
    else {
      l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [server_ getPatientID], @"category", category, @"_count", @"500" } count:6 type:[IOSClass classWithClass:[NSString class]]]];
    }
  }
  else {
    if (category == nil) {
      l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [server_ getPatientID], @"date", from } count:4 type:[IOSClass classWithClass:[NSString class]]]];
    }
    else {
      l = [self createSearchLinkWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ @"patient", [server_ getPatientID], @"date", from, @"category", category } count:6 type:[IOSClass classWithClass:[NSString class]]]];
    }
  }
  @try {
    id w = [CCPBVFHIRFHIRUtils createWriterWithCCPBVActionPath:path withCCPBVContentWriter:[((id<CCPBViHttpConnection>) nil_chk(conn)) getContentWriter] withCCPBVHttpHeaders:headers withBoolean:YES];
    [self searchWithJavaIoReader:[((RAREActionLink *) nil_chk(l)) getReader] withId:w withCCPBVHttpHeaders:headers withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  @finally {
    [((RAREActionLink *) nil_chk(l)) close];
  }
}

- (void)readEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                 withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                     withJavaIoWriter:(JavaIoWriter *)w
                    withNSObjectArray:(IOSObjectArray *)params {
  CCPBVHttpHeaders *headers = (CCPBVHttpHeaders *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [CCPBVHttpHeaders class]);
  RAREUTJSONArray *a = [((RAREUTJSONObject *) nil_chk(entry_)) getJSONArrayWithNSString:@"presentedForm"];
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  if (a != nil) {
    [CCPBVFHIRDocuments writeAttachmentsAsDocumentWithRAREUTJSONArray:a withJavaIoWriter:w withCCPBVHttpHeaders:headers];
    return;
  }
  RAREUTJSONObject *text = [entry_ optJSONObjectWithNSString:@"text"];
  RAREUTJSONArray *result = ((text == nil) || CCPBVFHIRLabs_generateDisgnosticReport_) ? [entry_ optJSONArrayWithNSString:@"result"] : nil;
  if ((result != nil) && ![result isEmpty]) {
    RAREUTJSONArray *contained = [entry_ optJSONArrayWithNSString:@"contained"];
    id<JavaUtilMap> map = nil;
    if (contained != nil) {
      map = [self createReferenceMapWithRAREUTJSONArray:contained];
    }
    [self resolveReferencesWithRAREUTJSONArray:result withJavaUtilMap:map];
    [self createLabReportWithRAREUTJSONObject:entry_ withRAREUTJSONArray:result withJavaIoWriter:w withCCPBVHttpHeaders:headers];
  }
  else {
    [headers mimeHtml];
    [CCPBVFHIRFHIRUtils writeHTMLDocumentStartWithJavaIoWriter:w withNSString:nil];
    [CCPBVFHIRFHIRUtils writeTextWithJavaIoWriter:w withRAREUTJSONObject:text withBoolean:NO withBoolean:YES];
    [CCPBVFHIRFHIRUtils writeHTMLDocumentFinishWithJavaIoWriter:w];
  }
}

- (void)writeDocumentIndexWithRAREUTJSONObject:(RAREUTJSONObject *)content
                              withJavaIoWriter:(JavaIoWriter *)w
                                   withBoolean:(BOOL)main
                                   withBoolean:(BOOL)study
                           withRAREUTCharArray:(RAREUTCharArray *)ca {
  NSString *type;
  NSString *title = @"";
  NSString *url = nil;
  if (!main) {
    if (study) {
      type = @"custom:study";
      title = [((RAREUTJSONObject *) nil_chk(content)) optStringWithNSString:@"display" withNSString:nil];
      url = [NSString stringWithFormat:@"hub/main/imaging/study/%@", [RAREFunctions encodeWithNSString:[self getIDWithNSString:[content optStringWithNSString:@"reference"]]]];
      if (title == nil) {
        (void) [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.imaging_study"];
      }
    }
    else {
      type = @"custom:media";
      title = [((RAREUTJSONObject *) nil_chk(content)) optStringWithNSString:@"comment" withNSString:nil];
      content = [content optJSONObjectWithNSString:@"link"];
      if (content != nil) {
        url = [NSString stringWithFormat:@"hub/main/imaging/media/%@", [RAREFunctions encodeWithNSString:[self getIDWithNSString:[content optStringWithNSString:@"reference"]]]];
        if (title == nil) {
          title = [content optStringWithNSString:@"display" withNSString:nil];
        }
      }
    }
    if (title == nil) {
      title = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.attachment"];
    }
    if (study) {
      title = [NSString stringWithFormat:@"%@{icon:resource:bv.icon.xray}", title];
    }
    else if (study) {
      title = [NSString stringWithFormat:@"%@{icon:resource:bv.icon.xray}", title];
    }
  }
  else {
    type = @"document";
    title = @"";
  }
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:type])) appendWithChar:'^'])) appendWithJavaLangCharSequence:title];
  (void) [((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"^^"])) appendWithJavaLangCharSequence:main ? @"true" : @"false"];
  (void) [w appendWithJavaLangCharSequence:@"^"];
  if (!main) {
    if (url != nil) {
      [w writeWithNSString:url];
    }
  }
  (void) [w appendWithJavaLangCharSequence:@"\n"];
}

- (void)createLabReportWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                        withRAREUTJSONArray:(RAREUTJSONArray *)result
                           withJavaIoWriter:(JavaIoWriter *)w
                       withCCPBVHttpHeaders:(CCPBVHttpHeaders *)headers {
  [((CCPBVHttpHeaders *) nil_chk(headers)) setDefaultResponseHeaders];
  RAREUTCharArray *ca = [[RAREUTCharArray alloc] init];
  RAREUTCharArray *wca = [[RAREUTCharArray alloc] init];
  RAREUTJSONArray *images = [((RAREUTJSONObject *) nil_chk(entry_)) optJSONArrayWithNSString:@"image"];
  RAREUTJSONArray *studies = [entry_ optJSONArrayWithNSString:@"imagingStudy"];
  BOOL hasImages = NO;
  if (((images != nil) && ![images isEmpty]) || ((studies != nil) && ![studies isEmpty])) {
    hasImages = YES;
    [headers mimeMultipartWithNSString:[CCPBVFHIRDocuments BOUNDARY]];
    [self writeDocumentIndexWithRAREUTJSONObject:entry_ withJavaIoWriter:w withBoolean:YES withBoolean:NO withRAREUTCharArray:ca];
    int len = (images == nil) ? 0 : [images length];
    for (int i = 0; i < len; i++) {
      [self writeDocumentIndexWithRAREUTJSONObject:[((RAREUTJSONArray *) nil_chk(images)) getJSONObjectWithInt:i] withJavaIoWriter:w withBoolean:NO withBoolean:NO withRAREUTCharArray:ca];
    }
    len = (studies == nil) ? 0 : [studies length];
    for (int i = 0; i < len; i++) {
      [self writeDocumentIndexWithRAREUTJSONObject:[((RAREUTJSONArray *) nil_chk(studies)) getJSONObjectWithInt:i] withJavaIoWriter:w withBoolean:NO withBoolean:YES withRAREUTCharArray:ca];
    }
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:[CCPBVFHIRDocuments BOUNDARY_START]];
    [w writeWithNSString:@"Content-Type: text/html\x0d\n\x0d\n"];
  }
  else {
    [headers mimeHtml];
  }
  [CCPBVFHIRFHIRUtils writeHTMLDocumentStartWithJavaIoWriter:w withNSString:nil];
  CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"code"]];
  NSString *name;
  if (mc == nil) {
    name = [entry_ optStringWithNSString:@"text"];
  }
  else {
    name = [mc getBestText];
  }
  [CCPBVFHIRFHIRUtils writeDocumentTitleWithJavaIoWriter:w withNSString:name];
  [CCPBVFHIRFHIRUtils writeTableStartWithJavaIoWriter:w];
  NSString *s = [entry_ optStringWithNSString:@"status" withNSString:nil];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.status"] withNSString:s];
  }
  s = [entry_ optStringWithNSString:@"issued" withNSString:nil];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.issued"] withNSString:[CCPBVFHIRFHIRServer convertDateTimeWithNSString:s]];
  }
  s = [CCPBVFHIRFHIRUtils getReferenceTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"specimen"]];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.specimen"] withNSString:s];
  }
  s = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"method"]];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.method"] withNSString:s];
  }
  s = [((NSString *) nil_chk([entry_ optStringWithNSString:@"comments"])) trim];
  if ([((NSString *) nil_chk(s)) sequenceLength] > 0) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.comments"] withNSString:s];
  }
  s = [entry_ optStringWithNSString:@"conclusion" withNSString:nil];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.conclusion"] withNSString:s];
  }
  s = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"codedDiagnosis"]];
  if (s != nil) {
    [CCPBVFHIRFHIRUtils writeTableValueWithJavaIoWriter:w withNSString:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.diagnosis"] withNSString:s];
  }
  [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
  [((JavaIoWriter *) nil_chk(w)) writeWithNSString:@"<hr class=\"bold\">\n"];
  if ((result != nil) && ![result isEmpty]) {
    RAREUTJSONArray *other = [[RAREUTJSONArray alloc] init];
    RAREUTJSONObject *title = [((RAREUTJSONObject *) [[RAREUTJSONObject alloc] init]) putWithNSString:@"text" withId:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.observations"]];
    [self createObservationPanelWithNSString:[server_ getResourceAsStringWithNSString:@"bv.text.observations"] withRAREUTJSONArray:result withRAREUTJSONArray:other withJavaIoWriter:w withRAREUTCharArray:wca withRAREUTCharArray:ca];
    if (![other isEmpty]) {
      (void) [((RAREUTJSONObject *) nil_chk(title)) putWithNSString:@"text" withId:[server_ getResourceAsStringWithNSString:@"bv.text.other_results"]];
    }
  }
  [CCPBVFHIRFHIRUtils writeHTMLDocumentFinishWithJavaIoWriter:w];
  if (hasImages) {
    [w writeWithNSString:[CCPBVFHIRDocuments BOUNDARY_END]];
  }
}

- (void)createObservationPanelWithNSString:(NSString *)title
                       withRAREUTJSONArray:(RAREUTJSONArray *)contained
                       withRAREUTJSONArray:(RAREUTJSONArray *)nonObservations
                          withJavaIoWriter:(JavaIoWriter *)w
                       withRAREUTCharArray:(RAREUTCharArray *)wca
                       withRAREUTCharArray:(RAREUTCharArray *)ca {
  (void) [((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:@"<table class='lab_report'>\n"];
  (void) [((JavaIoWriter *) nil_chk([((JavaIoWriter *) nil_chk([w appendWithJavaLangCharSequence:@"<caption>"])) appendWithJavaLangCharSequence:title])) appendWithJavaLangCharSequence:@"</caption>\n"];
  (void) [w appendWithJavaLangCharSequence:@"<thead>\n"];
  (void) [w appendWithJavaLangCharSequence:@"<tr><th></th><th>"];
  (void) [w appendWithJavaLangCharSequence:[((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.value"]];
  (void) [w appendWithJavaLangCharSequence:@"</th></tr>\n"];
  (void) [w appendWithJavaLangCharSequence:@"</thead>\n"];
  (void) [w appendWithJavaLangCharSequence:@"<tbody>\n"];
  JavaIoWriter *sw = [RAREUTStreams charArrayWriterWithRAREUTCharArray:wca];
  int len = [((RAREUTJSONArray *) nil_chk(contained)) size];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [contained getJSONObjectWithInt:i];
    [((RAREUTCharArray *) nil_chk(wca)) clear];
    if ([((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"resourceType"])) isEqual:@"Observation"]) {
      [self processObservationEntryWithNSString:nil withNSString:nil withNSString:nil withNSString:nil withNSString:nil withRAREUTJSONObject:o withRAREUTJSONWriter:nil withJavaIoWriter:sw withRAREUTCharArray:ca withBoolean:YES];
      if (wca->_length_ > 0) {
        [w writeWithCharArray:wca->A_ withInt:0 withInt:wca->_length_];
      }
    }
    else {
      [((RAREUTJSONArray *) nil_chk(nonObservations)) addWithId:o];
    }
  }
  [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
}

- (void)createComponentTableWithRAREUTJSONArray:(RAREUTJSONArray *)component
                               withJavaIoWriter:(JavaIoWriter *)w
                            withRAREUTCharArray:(RAREUTCharArray *)wca
                            withRAREUTCharArray:(RAREUTCharArray *)ca {
  (void) [((JavaIoWriter *) nil_chk(w)) appendWithJavaLangCharSequence:@"<tr><td colspan=\"2\">"];
  (void) [w appendWithJavaLangCharSequence:@"<table class=\"component\">\n"];
  (void) [w appendWithJavaLangCharSequence:@"<tbody>\n"];
  if (wca == nil) {
    wca = [[RAREUTCharArray alloc] init];
  }
  JavaIoWriter *sw = [RAREUTStreams charArrayWriterWithRAREUTCharArray:wca];
  int len = [((RAREUTJSONArray *) nil_chk(component)) size];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [component getJSONObjectWithInt:i];
    (void) [((RAREUTJSONObject *) nil_chk(o)) putWithNSString:@"resourceType" withId:@"Observation"];
    [((RAREUTCharArray *) nil_chk(wca)) clear];
    [self processObservationEntryWithNSString:nil withNSString:nil withNSString:nil withNSString:nil withNSString:nil withRAREUTJSONObject:o withRAREUTJSONWriter:nil withJavaIoWriter:sw withRAREUTCharArray:ca withBoolean:YES];
    if (wca->_length_ > 0) {
      [w writeWithCharArray:wca->A_ withInt:0 withInt:wca->_length_];
    }
  }
  [CCPBVFHIRFHIRUtils writeTableFinishWithJavaIoWriter:w];
  (void) [w appendWithJavaLangCharSequence:@"</td></tr>"];
}

- (void)processEntryWithRAREUTJSONObject:(RAREUTJSONObject *)entry_
                    withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                        withJavaIoWriter:(JavaIoWriter *)w
                     withRAREUTCharArray:(RAREUTCharArray *)ca
                       withNSObjectArray:(IOSObjectArray *)params {
  if (![((NSString *) nil_chk([((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"resourceType"])) isEqual:resourceName_]) {
    return;
  }
  NSString *status = [entry_ optStringWithNSString:@"status"];
  if ([((NSString *) nil_chk(status)) isEqual:@"entered-in-error"] || [status isEqual:@"cancelled"]) {
    return;
  }
  BOOL parsed = NO;
  NSString *msg = nil;
  do {
    NSString *dateld = nil;
    NSString *date = nil;
    NSString *labld = nil;
    NSString *lab = nil;
    NSString *result = nil;
    NSString *is_document = @"true";
    NSString *categoryld = nil;
    NSString *category = nil;
    NSString *result_id = nil;
    NSString *comment = nil;
    if (ca == nil) {
      ca = [[RAREUTCharArray alloc] init];
    }
    result_id = dateld = [self getIDWithRAREUTJSONObject:entry_];
    RAREUTJSONObject *name = [entry_ optJSONObjectWithNSString:@"code"];
    CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONObject:name];
    if (mc == nil) {
      if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDebugMode]) {
        mc = [CCPBVFHIRaFHIRemoteService missingInvalid];
      }
      else {
        @throw [self missingRequiredDataWithNSString:@"code" withNSString:dateld];
      }
    }
    result = [((NSString *) nil_chk([entry_ optStringWithNSString:@"conclusion"])) trim];
    if ([((NSString *) nil_chk(result)) sequenceLength] == 0) {
      result = [CCPBVFHIRFHIRUtils getBestMedicalTextWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"codedDiagnosis"]];
    }
    date = [self getDateTimeWithRAREUTJSONObject:entry_];
    CCPBVFHIRFHIRUtils_MedicalCode *mc1 = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONObject:[entry_ optJSONObjectWithNSString:@"category"]];
    if (mc1 != nil) {
      [mc1 resolveHL7DisplayWithJavaUtilHashMap:CCPBVFHIRLabs_categoryCodes_];
      category = [mc1 getBestText];
      categoryld = [mc1 getBestCode];
      if (!CCPBVFHIRLabs_searchByCategorySupported_ && (categoryld != nil) && ![((JavaUtilHashMap *) nil_chk(CCPBVFHIRLabs_categoryCodes_)) containsKeyWithId:categoryld]) {
        parsed = YES;
        break;
      }
    }
    lab = [((CCPBVFHIRFHIRUtils_MedicalCode *) nil_chk(mc)) getBestText];
    labld = [mc getBestCode];
    RAREUTJSONArray *contained = [entry_ optJSONArrayWithNSString:@"contained"];
    if ((categoryld != nil) && [((JavaUtilHashSet *) nil_chk(CCPBVFHIRLabs_reportTypes_)) containsWithId:categoryld]) {
      contained = nil;
    }
    if ((contained != nil) && [self hasAllObservationsWithRAREUTJSONArray:contained withBoolean:NO]) {
      int len = [contained length];
      int processed = 0;
      for (int i = 0; i < len; i++) {
        if ([self processObservationEntryWithNSString:date withNSString:categoryld withNSString:category withNSString:labld withNSString:lab withRAREUTJSONObject:[contained getJSONObjectWithInt:i] withRAREUTJSONWriter:jw withJavaIoWriter:w withRAREUTCharArray:ca withBoolean:NO]) {
          processed++;
        }
      }
      if ((result == nil) && (processed == len)) {
        parsed = YES;
        break;
      }
    }
    if (parsed) {
      break;
    }
    is_document = @"true";
    comment = [((NSString *) nil_chk([entry_ optStringWithNSString:@"comments"])) trim];
    comment = [CCPBVFHIRFHIRUtils cleanAndEncodeStringWithNSString:comment];
    if (result == nil) {
      result = [self getResourceAsStringWithNSString:@"bv.text.see_report"];
    }
    if (jw != nil) {
      (void) [jw object];
      if (date != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) object];
        (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:dateld])) keyWithNSString:@"value"])) valueWithId:date];
        (void) [jw endObject];
      }
      if (lab != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"lab"])) object];
        (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:labld])) keyWithNSString:@"value"])) valueWithId:lab];
        (void) [jw endObject];
      }
      if (result != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"result"])) valueWithId:result];
      }
      if (is_document != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"is_document"])) valueWithId:is_document];
      }
      if (category != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"category"])) object];
        (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:categoryld])) keyWithNSString:@"value"])) valueWithId:category];
        (void) [jw endObject];
      }
      if (result_id != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"result_id"])) valueWithId:result_id];
      }
      if (comment != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"comment"])) valueWithId:comment];
      }
      (void) [jw endObject];
    }
    else {
      if (date != nil) {
        [((JavaIoWriter *) nil_chk(w)) writeWithNSString:dateld];
        [w writeWithInt:(unichar) '|'];
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:date withRAREUTCharArray:ca];
      }
      [((JavaIoWriter *) nil_chk(w)) writeWithInt:(unichar) '^'];
      if (lab != nil) {
        if (labld != nil) {
          [w writeWithNSString:labld];
        }
        [w writeWithInt:(unichar) '|'];
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:lab withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (result != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:result withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      if (is_document != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:is_document withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (category != nil) {
        if (categoryld != nil) {
          [w writeWithNSString:categoryld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:category withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      if (result_id != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:result_id withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (comment != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:comment withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) 0x000a];
    }
    parsed = YES;
  }
  while (NO);
  if (!parsed) {
    if (msg == nil) {
      msg = @"Could not parse entry:";
    }
    if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDebugMode]) {
      [server_ debugLogWithNSString:msg];
      [((JavaIoPrintStream *) nil_chk([JavaLangSystem out])) printlnWithNSString:[entry_ toStringWithInt:2]];
    }
    else {
      @throw [[RAREApplicationException alloc] initWithNSString:[NSString stringWithFormat:@"%@\n%@", msg, [entry_ description]]];
    }
  }
}

- (BOOL)hasAllObservationsWithRAREUTJSONArray:(RAREUTJSONArray *)a
                                  withBoolean:(BOOL)references {
  int len = [((RAREUTJSONArray *) nil_chk(a)) length];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [a getJSONObjectWithInt:i];
    if (references) {
      NSString *s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"reference"];
      if (![((NSString *) nil_chk(s)) hasPrefix:@"#"] && ![s contains:@"Observation/"]) {
        return NO;
      }
    }
    else {
      NSString *s = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"resourceType"];
      if (![((NSString *) nil_chk(s)) isEqual:@"Observation"]) {
        if (![((JavaUtilHashSet *) nil_chk(CCPBVFHIRLabs_nonClinicalTypes_)) containsWithId:s]) {
          return NO;
        }
      }
    }
  }
  return YES;
}

- (BOOL)processObservationEntryWithNSString:(NSString *)date
                               withNSString:(NSString *)categoryld
                               withNSString:(NSString *)category
                               withNSString:(NSString *)panelld
                               withNSString:(NSString *)panel
                       withRAREUTJSONObject:(RAREUTJSONObject *)entry_
                       withRAREUTJSONWriter:(RAREUTJSONWriter *)jw
                           withJavaIoWriter:(JavaIoWriter *)w
                        withRAREUTCharArray:(RAREUTCharArray *)ca
                                withBoolean:(BOOL)forReport {
  NSString *status = [((RAREUTJSONObject *) nil_chk(entry_)) optStringWithNSString:@"status"];
  if ([((NSString *) nil_chk(status)) isEqual:@"entered-in-error"] || [status isEqual:@"cancelled"]) {
    return NO;
  }
  if (![((NSString *) nil_chk([entry_ optStringWithNSString:@"resourceType"])) isEqual:@"Observation"]) {
    return NO;
  }
  RAREUTJSONObject *o;
  BOOL parsed = NO;
  do {
    NSString *dateld = nil;
    NSString *labld = nil;
    NSString *lab = nil;
    NSString *resultld = nil;
    NSString *resultldtext = nil;
    NSString *result = nil;
    NSString *unit = nil;
    NSString *range = nil;
    NSString *is_document = @"false";
    NSString *comment = nil;
    RAREUTJSONArray *component = [entry_ optJSONArrayWithNSString:@"component"];
    if (component != nil) {
      is_document = @"true";
    }
    dateld = [self getIDWithRAREUTJSONObject:entry_];
    o = [entry_ optJSONObjectWithNSString:@"code"];
    RAREUTJSONArray *coding = (o == nil) ? nil : [o optJSONArrayWithNSString:@"coding"];
    CCPBVFHIRFHIRUtils_MedicalCode *mc = [CCPBVFHIRFHIRUtils getMedicalCodeWithRAREUTJSONArray:coding];
    if (mc == nil) {
      NSString *text = (o == nil) ? nil : [o optStringWithNSString:@"text" withNSString:nil];
      if (text != nil) {
        mc = [[CCPBVFHIRFHIRUtils_MedicalCode alloc] initWithNSString:@"UNK" withNSString:nil withNSString:text withNSString:nil];
      }
      else {
        if ([((CCPBVFHIRFHIRServer *) nil_chk(server_)) isDebugMode]) {
          mc = [CCPBVFHIRaFHIRemoteService missingInvalid];
        }
        else {
          @throw [self missingRequiredDataWithNSString:@"code" withNSString:dateld];
        }
      }
    }
    lab = [((CCPBVFHIRFHIRUtils_MedicalCode *) nil_chk(mc)) getBestText];
    labld = [mc getBestCode];
    o = [entry_ optJSONObjectWithNSString:@"valueQuantity"];
    if (o != nil) {
      unit = [o optStringWithNSString:@"units" withNSString:nil];
      result = [o optStringWithNSString:@"value"];
      if ([((JavaUtilHashSet *) nil_chk(CCPBVFHIRLabs_bunCodes_)) containsWithId:labld]) {
        labld = @"bun";
      }
      else if ([((JavaUtilHashSet *) nil_chk(CCPBVFHIRLabs_creatinineCodes_)) containsWithId:labld]) {
        labld = @"creat";
      }
      NSString *comparator = [o optStringWithNSString:@"comparator" withNSString:nil];
      if (comparator != nil) {
        result = [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk(ca)) setWithNSString:comparator])) appendWithNSString:result])) description];
      }
    }
    else {
      unit = nil;
      result = [CCPBVFHIRFHIRUtils getValueWithRAREUTJSONObject:entry_ withBoolean:YES withRAREUTCharArray:ca];
      if (result == nil) {
        result = @"";
      }
    }
    o = [entry_ optJSONObjectWithNSString:@"interpretation"];
    if (o != nil) {
      resultld = [CCPBVFHIRFHIRUtils getHL7FHIRCodeWithRAREUTJSONArray:[o optJSONArrayWithNSString:@"coding"]];
      resultldtext = [o optStringWithNSString:@"text" withNSString:nil];
      if ((resultldtext == nil) || ([resultldtext sequenceLength] == 0)) {
        resultldtext = resultld;
      }
    }
    comment = [entry_ optStringWithNSString:@"comments" withNSString:nil];
    if (comment != nil) {
      comment = [CCPBVFHIRFHIRUtils cleanAndEncodeStringWithNSString:comment];
    }
    RAREUTJSONArray *a = [entry_ optJSONArrayWithNSString:@"referenceRange"];
    range = (a == nil) ? nil : [CCPBVFHIRFHIRUtils getRangeWithRAREUTJSONArray:a withBoolean:YES withRAREUTCharArray:ca];
    NSString *icolor = (resultld == nil) ? nil : [CCPBVFHIRFHIRUtils getInterpretationColorWithNSString:resultld];
    if ((result != nil) && ((icolor != nil) || (resultld != nil))) {
      [((RAREUTCharArray *) nil_chk(ca)) clear];
      if ((icolor != nil) && !forReport) {
        (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"{fgColor:"])) appendWithNSString:icolor])) appendWithNSString:@"}"];
      }
      (void) [ca appendWithNSString:result];
      if (resultld != nil) {
        (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@" ("])) appendWithNSString:resultldtext])) appendWithChar:')'];
      }
      if (forReport) {
        result = [RAREFunctions escapeHTMLWithNSString:[ca description] withBoolean:NO withBoolean:NO];
        if (icolor != nil) {
          (void) [((RAREUTCharArray *) nil_chk([ca setWithNSString:@"<font color=\""])) appendWithNSString:[((RAREUIColor *) nil_chk([((CCPBVFHIRFHIRServer *) nil_chk(server_)) getColorWithNSString:icolor])) toHexString]];
          (void) [((RAREUTCharArray *) nil_chk([((RAREUTCharArray *) nil_chk([ca appendWithNSString:@"\">"])) appendWithNSString:result])) appendWithNSString:@"</font>"];
          result = [ca description];
        }
      }
      else {
        result = [ca description];
      }
    }
    if (forReport) {
      if (range == nil) {
        range = @"";
      }
      if (result == nil) {
        result = @"";
      }
      [((JavaIoWriter *) nil_chk(w)) writeWithNSString:[RAREFunctions formatWithNSString:labValueFormat_ withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ lab, result, range } count:3 type:[IOSClass classWithClass:[NSObject class]]]]];
      [w writeWithInt:0x000a];
      if (component != nil) {
        [self createComponentTableWithRAREUTJSONArray:component withJavaIoWriter:w withRAREUTCharArray:nil withRAREUTCharArray:ca];
      }
      return YES;
    }
    if (((result == nil) || ([result sequenceLength] == 0)) && [is_document isEqual:@"true"]) {
      result = [((CCPBVFHIRFHIRServer *) nil_chk(server_)) getResourceAsStringWithNSString:@"bv.text.see_report"];
    }
    if (jw != nil) {
      (void) [jw object];
      if (date != nil) {
        if (dateld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:dateld])) keyWithNSString:@"value"])) valueWithId:date];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"date"])) valueWithId:date];
        }
      }
      if (lab != nil) {
        if (labld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"lab"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:labld])) keyWithNSString:@"value"])) valueWithId:lab];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"lab"])) valueWithId:lab];
        }
      }
      if (result != nil) {
        if (resultld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"result"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:resultld])) keyWithNSString:@"value"])) valueWithId:result];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"result"])) valueWithId:result];
        }
      }
      if (unit != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"unit"])) valueWithId:unit];
      }
      if (range != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"range"])) valueWithId:range];
      }
      if (is_document != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"is_document"])) valueWithId:is_document];
      }
      if (category != nil) {
        if (categoryld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"category"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:categoryld])) keyWithNSString:@"value"])) valueWithId:category];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"category"])) valueWithId:category];
        }
      }
      if (panel != nil) {
        if (panelld != nil) {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"panel"])) object];
          (void) [((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"linkedData"])) valueWithId:panelld])) keyWithNSString:@"value"])) valueWithId:panel];
          (void) [jw endObject];
        }
        else {
          (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"panel"])) valueWithId:panel];
        }
      }
      if (comment != nil) {
        (void) [((RAREUTJSONWriter *) nil_chk([jw keyWithNSString:@"comment"])) valueWithId:comment];
      }
      (void) [jw endObject];
    }
    else {
      if (date != nil) {
        if (dateld != nil) {
          [((JavaIoWriter *) nil_chk(w)) writeWithNSString:dateld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:date withRAREUTCharArray:ca];
      }
      [((JavaIoWriter *) nil_chk(w)) writeWithInt:(unichar) '^'];
      if (lab != nil) {
        if (labld != nil) {
          [w writeWithNSString:labld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:lab withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (result != nil) {
        if (resultld != nil) {
          [w writeWithNSString:resultld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:result withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (unit != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:unit withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (range != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:range withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (is_document != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:is_document withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (category != nil) {
        if (categoryld != nil) {
          [w writeWithNSString:categoryld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:category withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      if (panel != nil) {
        if (panelld != nil) {
          [w writeWithNSString:panelld];
          [w writeWithInt:(unichar) '|'];
        }
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:panel withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) '^'];
      if (comment != nil) {
        [CCPBVFHIRFHIRUtils writeQuotedStringIfNecessaryWithJavaIoWriter:w withNSString:comment withRAREUTCharArray:ca];
      }
      [w writeWithInt:(unichar) '^'];
      [w writeWithInt:(unichar) 0x000a];
    }
    parsed = YES;
  }
  while (NO);
  if (!parsed) {
    [self debugLogWithNSString:[NSString stringWithFormat:@"Could not parse entry:\n%@", [entry_ toStringWithInt:2]]];
  }
  return parsed;
}

+ (void)initialize {
  if (self == [CCPBVFHIRLabs class]) {
    CCPBVFHIRLabs_bunCodes_ = [[JavaUtilHashSet alloc] initWithInt:2];
    CCPBVFHIRLabs_reportTypes_ = [[JavaUtilHashSet alloc] initWithInt:2];
    CCPBVFHIRLabs_nonClinicalTypes_ = [[JavaUtilHashSet alloc] initWithInt:2];
    CCPBVFHIRLabs_creatinineCodes_ = [[JavaUtilHashSet alloc] initWithInt:2];
    {
      [CCPBVFHIRLabs_bunCodes_ addWithId:@"75367002"];
      [CCPBVFHIRLabs_bunCodes_ addWithId:@"55284-4"];
      [CCPBVFHIRLabs_creatinineCodes_ addWithId:@"271649006"];
      [CCPBVFHIRLabs_creatinineCodes_ addWithId:@"8480-6"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"MB"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"VR"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"URN"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"TX"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"PAT"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"SP"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"MYC"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"MCB"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"PF"];
      [CCPBVFHIRLabs_reportTypes_ addWithId:@"MMF"];
      [CCPBVFHIRLabs_nonClinicalTypes_ addWithId:@"DiagnosticOrder"];
      [CCPBVFHIRLabs_nonClinicalTypes_ addWithId:@"Patient"];
      [CCPBVFHIRLabs_nonClinicalTypes_ addWithId:@"Parctitioner"];
      [CCPBVFHIRLabs_nonClinicalTypes_ addWithId:@"FamilyMemberHistory"];
    }
  }
}

- (void)copyAllFieldsTo:(CCPBVFHIRLabs *)other {
  [super copyAllFieldsTo:other];
  other->labValueFormat_ = labValueFormat_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getCategoryCodes", NULL, "LJavaUtilHashMap", 0x4, NULL },
    { "documentWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "realtimeWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "summaryWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "listWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "list_by_categoryWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "testsWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:", NULL, "V", 0x1, "JavaIoIOException" },
    { "listWithCCPBViHttpConnection:withCCPBVActionPath:withJavaIoInputStream:withCCPBVHttpHeaders:withNSString:withInt:", NULL, "V", 0x1, "JavaIoIOException" },
    { "readEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "writeDocumentIndexWithRAREUTJSONObject:withJavaIoWriter:withBoolean:withBoolean:withRAREUTCharArray:", NULL, "V", 0x4, "JavaIoIOException" },
    { "createLabReportWithRAREUTJSONObject:withRAREUTJSONArray:withJavaIoWriter:withCCPBVHttpHeaders:", NULL, "V", 0x4, "JavaIoIOException" },
    { "createObservationPanelWithNSString:withRAREUTJSONArray:withRAREUTJSONArray:withJavaIoWriter:withRAREUTCharArray:withRAREUTCharArray:", NULL, "V", 0x4, "JavaIoIOException" },
    { "createComponentTableWithRAREUTJSONArray:withJavaIoWriter:withRAREUTCharArray:withRAREUTCharArray:", NULL, "V", 0x4, "JavaIoIOException" },
    { "processEntryWithRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withRAREUTCharArray:withNSObjectArray:", NULL, "V", 0x81, "JavaIoIOException" },
    { "hasAllObservationsWithRAREUTJSONArray:withBoolean:", NULL, "Z", 0x2, NULL },
    { "processObservationEntryWithNSString:withNSString:withNSString:withNSString:withNSString:withRAREUTJSONObject:withRAREUTJSONWriter:withJavaIoWriter:withRAREUTCharArray:withBoolean:", NULL, "Z", 0x4, "JavaIoIOException" },
  };
  static J2ObjcFieldInfo fields[] = {
    { "searchByDateSupported_", NULL, 0xc, "Z" },
    { "searchByCategorySupported_", NULL, 0xc, "Z" },
    { "categoryCodes_", NULL, 0xc, "LJavaUtilHashMap" },
    { "bunCodes_", NULL, 0xc, "LJavaUtilHashSet" },
    { "reportTypes_", NULL, 0xc, "LJavaUtilHashSet" },
    { "nonClinicalTypes_", NULL, 0xc, "LJavaUtilHashSet" },
    { "creatinineCodes_", NULL, 0xc, "LJavaUtilHashSet" },
    { "categorySearch_", NULL, 0xc, "LNSString" },
    { "hasLabs_", NULL, 0xc, "Z" },
    { "hasObservationCategorySupport_", NULL, 0xc, "Z" },
    { "useObservations_", NULL, 0xc, "Z" },
    { "generateDisgnosticReport_", NULL, 0xc, "Z" },
    { "COLUMN_NAMES_", NULL, 0xc, "LIOSObjectArray" },
    { "labValueFormat_", NULL, 0x4, "LNSString" },
  };
  static J2ObjcClassInfo _CCPBVFHIRLabs = { "Labs", "com.sparseware.bellavista.external.fhir", NULL, 0x1, 16, methods, 14, fields, 0, NULL};
  return &_CCPBVFHIRLabs;
}

@end
