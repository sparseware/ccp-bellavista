//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: com/sparseware/bellavista/aResultsManager.java
//
//  Created by decoteaud on 12/2/15.
//

#include "IOSClass.h"
#include "IOSFloatArray.h"
#include "IOSObjectArray.h"
#include "com/appnativa/rare/Platform.h"
#include "com/appnativa/rare/aWorkerTask.h"
#include "com/appnativa/rare/converters/DateTimeConverter.h"
#include "com/appnativa/rare/converters/iDataConverter.h"
#include "com/appnativa/rare/iCancelableFuture.h"
#include "com/appnativa/rare/iConstants.h"
#include "com/appnativa/rare/iPlatformAppContext.h"
#include "com/appnativa/rare/net/ActionLink.h"
#include "com/appnativa/rare/scripting/Functions.h"
#include "com/appnativa/rare/spot/ItemDescription.h"
#include "com/appnativa/rare/spot/StackPane.h"
#include "com/appnativa/rare/spot/Table.h"
#include "com/appnativa/rare/ui/ColorUtils.h"
#include "com/appnativa/rare/ui/Column.h"
#include "com/appnativa/rare/ui/RenderableDataItem.h"
#include "com/appnativa/rare/ui/UIColor.h"
#include "com/appnativa/rare/ui/UIFont.h"
#include "com/appnativa/rare/ui/UIScreen.h"
#include "com/appnativa/rare/ui/chart/ChartDataItem.h"
#include "com/appnativa/rare/ui/effects/iTransitionAnimator.h"
#include "com/appnativa/rare/ui/event/ActionEvent.h"
#include "com/appnativa/rare/ui/event/DataEvent.h"
#include "com/appnativa/rare/ui/event/FlingEvent.h"
#include "com/appnativa/rare/ui/event/ScaleEvent.h"
#include "com/appnativa/rare/ui/iPlatformIcon.h"
#include "com/appnativa/rare/util/SubItemComparator.h"
#include "com/appnativa/rare/viewer/ChartViewer.h"
#include "com/appnativa/rare/viewer/GroupBoxViewer.h"
#include "com/appnativa/rare/viewer/SplitPaneViewer.h"
#include "com/appnativa/rare/viewer/StackPaneViewer.h"
#include "com/appnativa/rare/viewer/TableViewer.h"
#include "com/appnativa/rare/viewer/ToolBarViewer.h"
#include "com/appnativa/rare/viewer/WindowViewer.h"
#include "com/appnativa/rare/viewer/iContainer.h"
#include "com/appnativa/rare/viewer/iFormViewer.h"
#include "com/appnativa/rare/viewer/iTarget.h"
#include "com/appnativa/rare/viewer/iViewer.h"
#include "com/appnativa/rare/widget/PushButtonWidget.h"
#include "com/appnativa/rare/widget/aGroupableButton.h"
#include "com/appnativa/rare/widget/aWidget.h"
#include "com/appnativa/rare/widget/iWidget.h"
#include "com/appnativa/spot/SPOTBoolean.h"
#include "com/appnativa/spot/SPOTPrintableString.h"
#include "com/appnativa/spot/SPOTSet.h"
#include "com/appnativa/spot/iSPOTElement.h"
#include "com/appnativa/util/Helper.h"
#include "com/appnativa/util/StringCache.h"
#include "com/appnativa/util/iFilterableList.h"
#include "com/appnativa/util/json/JSONArray.h"
#include "com/appnativa/util/json/JSONObject.h"
#include "com/sparseware/bellavista/ActionPath.h"
#include "com/sparseware/bellavista/CardStackUtils.h"
#include "com/sparseware/bellavista/Document.h"
#include "com/sparseware/bellavista/ResultsView.h"
#include "com/sparseware/bellavista/TrendPanel.h"
#include "com/sparseware/bellavista/Utils.h"
#include "com/sparseware/bellavista/aChartHandler.h"
#include "com/sparseware/bellavista/aEventHandler.h"
#include "com/sparseware/bellavista/aResultsManager.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/EventObject.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation CCPBVaResultsManager

static int CCPBVaResultsManager_DATE_POSITION_ = 0;
static int CCPBVaResultsManager_NAME_POSITION_ = 1;
static int CCPBVaResultsManager_VALUE_POSITION_ = 2;
static int CCPBVaResultsManager_UNIT_POSITION_ = 3;
static int CCPBVaResultsManager_RANGE_POSITION_ = -1;
static int CCPBVaResultsManager_MIN_ANGLED_LABEL_HEIGHT_ = 400;
static int CCPBVaResultsManager_MIN_POINTSLABEL_HEIGHT_ = 400;

+ (int)DATE_POSITION {
  return CCPBVaResultsManager_DATE_POSITION_;
}

+ (int *)DATE_POSITIONRef {
  return &CCPBVaResultsManager_DATE_POSITION_;
}

+ (int)NAME_POSITION {
  return CCPBVaResultsManager_NAME_POSITION_;
}

+ (int *)NAME_POSITIONRef {
  return &CCPBVaResultsManager_NAME_POSITION_;
}

+ (int)VALUE_POSITION {
  return CCPBVaResultsManager_VALUE_POSITION_;
}

+ (int *)VALUE_POSITIONRef {
  return &CCPBVaResultsManager_VALUE_POSITION_;
}

+ (int)UNIT_POSITION {
  return CCPBVaResultsManager_UNIT_POSITION_;
}

+ (int *)UNIT_POSITIONRef {
  return &CCPBVaResultsManager_UNIT_POSITION_;
}

+ (int)RANGE_POSITION {
  return CCPBVaResultsManager_RANGE_POSITION_;
}

+ (int *)RANGE_POSITIONRef {
  return &CCPBVaResultsManager_RANGE_POSITION_;
}

+ (int)MIN_ANGLED_LABEL_HEIGHT {
  return CCPBVaResultsManager_MIN_ANGLED_LABEL_HEIGHT_;
}

+ (int *)MIN_ANGLED_LABEL_HEIGHTRef {
  return &CCPBVaResultsManager_MIN_ANGLED_LABEL_HEIGHT_;
}

+ (int)MIN_POINTSLABEL_HEIGHT {
  return CCPBVaResultsManager_MIN_POINTSLABEL_HEIGHT_;
}

+ (int *)MIN_POINTSLABEL_HEIGHTRef {
  return &CCPBVaResultsManager_MIN_POINTSLABEL_HEIGHT_;
}

- (id)initWithNSString:(NSString *)namePrefix
          withNSString:(NSString *)scriptClassName {
  if (self = [super init]) {
    currentView_ = [CCPBVResultsViewEnum CHARTS];
    spreadSheetPageSize_ = 7;
    dataPageSize_ = 7;
    self->namePrefix_ = namePrefix;
    self->scriptClassName_ = scriptClassName;
  }
  return self;
}

- (void)changeViewWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
  NSString *name = [((RAREaGroupableButton *) check_class_cast(widget, [RAREaGroupableButton class])) getSelectedButtonName];
  if (name == nil) {
    name = [((id<RAREiWidget>) nil_chk(widget)) getName];
  }
  [self changeViewWithNSString:name withRAREiWidget:widget];
}

- (BOOL)checkAndHandleNoDataWithRARETableViewer:(RARETableViewer *)table
                               withJavaUtilList:(id<JavaUtilList>)rows {
  int len = (rows == nil) ? 0 : [rows size];
  if ((len == 0) || ((len == 1) && ![((RARERenderableDataItem *) nil_chk([((id<JavaUtilList>) nil_chk(rows)) getWithInt:0])) isEnabled])) {
    (void) [CCPBVUtils getActionPathWithBoolean:YES];
    hasNoData_ = YES;
    if (len == 1) {
      [((RARETableViewer *) nil_chk(table)) addParsedRowWithRARERenderableDataItem:[((id<JavaUtilList>) nil_chk(rows)) getWithInt:0]];
    }
    else {
      [((RARETableViewer *) nil_chk(table)) addParsedRowWithRARERenderableDataItem:[self createNoDataRowWithRARETableViewer:table]];
    }
    [((RARETableViewer *) nil_chk(table)) finishedParsing];
    [table finishedLoading];
    dataLoaded_ = YES;
    return YES;
  }
  return NO;
}

- (void)chooseStartingDateWithNSString:(NSString *)eventName
                       withRAREiWidget:(id<RAREiWidget>)widget
               withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (CCPBVActionPath *)getDisplayedActionPath {
  CCPBVActionPath *path = [[CCPBVActionPath alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [CCPBVUtils getPatientID], namePrefix_, [((NSString *) nil_chk([((CCPBVResultsViewEnum *) nil_chk(currentView_)) description])) lowercaseStringWithJRELocale:[JavaUtilLocale US]] } count:3 type:[IOSClass classWithClass:[NSString class]]]];
  [self addCurrentPathIDWithCCPBVActionPath:path];
  return path;
}

- (void)handleActionPathWithCCPBVActionPath:(CCPBVActionPath *)path {
  NSString *view = [((CCPBVActionPath *) nil_chk(path)) shift];
  if (view != nil) {
    @try {
      keyPath_ = path;
      [self changeViewWithNSString:view withRAREiWidget:dataTable_];
    }
    @catch (JavaLangThrowable *ignore) {
    }
  }
}

- (void)onChartFlingWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if (multiChartMode_) {
    return;
  }
  RAREFlingEvent *e = (RAREFlingEvent *) check_class_cast(event, [RAREFlingEvent class]);
  float x = [((RAREFlingEvent *) nil_chk(e)) getXVelocity];
  float y = [e getYVelocity];
  if ([CCPBVUtils isReverseFling]) {
    y *= -1;
    x *= -1;
  }
  if ([JavaLangMath absWithFloat:x] > [JavaLangMath absWithFloat:y]) {
    [self slideToChartableItemWithBoolean:x < 0 withBoolean:YES];
  }
  else {
    if ([CCPBVUtils isCardStack]) {
      if (![CCPBVUtils isGoogleGlass]) {
        if (![CCPBVUtils popViewerStack]) {
          [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) buzz];
        }
      }
    }
    else {
      [self slideToChartableItemWithBoolean:y < 0 withBoolean:NO];
    }
  }
}

- (void)onChartResizeWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget
          withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [((CCPBVaChartHandler *) nil_chk(chartHandler_)) adjustForSizeWithRAREChartViewer:(RAREChartViewer *) check_class_cast(widget, [RAREChartViewer class])];
}

- (void)onChartScaleWithNSString:(NSString *)eventName
                 withRAREiWidget:(id<RAREiWidget>)widget
         withJavaUtilEventObject:(JavaUtilEventObject *)event {
  RAREScaleEvent *e = (RAREScaleEvent *) check_class_cast(event, [RAREScaleEvent class]);
  switch ([[((RAREScaleEvent *) nil_chk(e)) getEventType] ordinal]) {
    case RAREScaleEvent_Type_SCALE_END:
    if (chartHandler_ != nil) {
      [chartHandler_ zoomWithRAREiContainer:[((id<RAREiWidget>) nil_chk(widget)) getFormViewer] withBoolean:[e getScaleFactor] >= 1];
    }
    break;
    default:
    break;
  }
}

- (void)onChartsPanelLoadedWithNSString:(NSString *)eventName
                        withRAREiWidget:(id<RAREiWidget>)widget
                withJavaUtilEventObject:(JavaUtilEventObject *)event {
  chartsLoaded_ = YES;
  RAREStackPaneViewer *sp;
  if ([(id) widget isKindOfClass:[RAREStackPaneViewer class]]) {
    sp = (RAREStackPaneViewer *) check_class_cast(widget, [RAREStackPaneViewer class]);
  }
  else {
    sp = (RAREStackPaneViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getFormViewer])) getWidgetWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class]);
  }
  if (sp != nil) {
    transitionAnimation_ = [sp getTransitionAnimator];
    [sp setTransitionAnimatorWithRAREiTransitionAnimator:(id<RAREiTransitionAnimator>) check_protocol_cast(nil, @protocol(RAREiTransitionAnimator))];
  }
  if (![CCPBVUtils isCardStack]) {
    RARETableViewer *table;
    if (currentView_ == [CCPBVResultsViewEnum SPREADSHEET]) {
      table = spreadsheetTable_;
      if (table == nil) {
        table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
      }
    }
    else {
      table = dataTable_;
    }
    if (table != nil) {
      RAREaGroupableButton *b = (RAREaGroupableButton *) check_class_cast([((id<RAREiFormViewer>) nil_chk([table getFormViewer])) getWidgetWithNSString:@"charts"], [RAREaGroupableButton class]);
      if ((b != nil) && ![b isSelected] && [self isOnNonChartingView]) {
        [b setSelectedWithBoolean:YES];
        currentView_ = [CCPBVResultsViewEnum CHARTS];
      }
    }
    if (table != nil) {
      if ([table hasSelection]) {
        [self showChartForSelectedItemWithRARETableViewer:table];
      }
      else {
        NSString *key = (keyPath_ == nil) ? nil : [keyPath_ shift];
        if (key != nil) {
          [self handlePathKeyWithRARETableViewer:table withNSString:key withInt:(table == dataTable_) ? 1 : 0 withBoolean:chartsLoaded_ || ![RAREUIScreen isLargeScreen]];
        }
        else {
          [self selectFirstChartableItemWithRARETableViewer:table withBoolean:YES];
        }
      }
    }
  }
  else {
    currentView_ = [CCPBVResultsViewEnum CHARTS];
    [self selectFirstChartableItemWithRARETableViewer:dataTable_ withBoolean:NO];
    [self showChartForSelectedItemWithRARETableViewer:dataTable_];
  }
}

- (void)onDisposeWithNSString:(NSString *)eventName
              withRAREiWidget:(id<RAREiWidget>)widget
      withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [CCPBVUtils removeActionPathSupporterWithCCPBVActionPath_iActionPathSupporter:self];
  [self reset];
}

- (void)onFirstPageWithNSString:(NSString *)eventName
                withRAREiWidget:(id<RAREiWidget>)widget
        withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self changePageWithRAREiWidget:widget withBoolean:NO withBoolean:YES];
}

- (void)onLastPageWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self changePageWithRAREiWidget:widget withBoolean:YES withBoolean:YES];
}

- (void)onNextPageWithNSString:(NSString *)eventName
               withRAREiWidget:(id<RAREiWidget>)widget
       withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self changePageWithRAREiWidget:widget withBoolean:YES withBoolean:NO];
}

- (void)onPreviousPageWithNSString:(NSString *)eventName
                   withRAREiWidget:(id<RAREiWidget>)widget
           withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self changePageWithRAREiWidget:widget withBoolean:NO withBoolean:NO];
}

- (void)onTableActionWithNSString:(NSString *)eventName
                  withRAREiWidget:(id<RAREiWidget>)widget
          withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self showChartForSelectedItemWithRARETableViewer:(RARETableViewer *) check_class_cast(widget, [RARETableViewer class])];
}

- (void)onTableCreatedWithNSString:(NSString *)eventName
                   withRAREiWidget:(id<RAREiWidget>)widget
           withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self reset];
  [CCPBVUtils addActionPathSupporterWithCCPBVActionPath_iActionPathSupporter:self];
  RAREDataEvent *de = (RAREDataEvent *) check_class_cast(event, [RAREDataEvent class]);
  RARESPOTTable *cfg = (RARESPOTTable *) check_class_cast([((RAREDataEvent *) nil_chk(de)) getData], [RARESPOTTable class]);
  RAREActionLink *link = [[RAREActionLink alloc] initWithRAREiWidget:widget withSPOTPrintableString:((RARESPOTTable *) nil_chk(cfg))->dataURL_];
  [((SPOTPrintableString *) nil_chk(cfg->dataURL_)) spot_clear];
  dataTable_ = (RARETableViewer *) check_class_cast(widget, [RARETableViewer class]);
  [self parseDataURLWithRAREaWidget:(RAREaWidget *) check_class_cast(widget, [RAREaWidget class]) withRAREActionLink:link withBoolean:YES];
  dataLink_ = link;
}

- (void)onTimeframePopupActionWithNSString:(NSString *)eventName
                           withRAREiWidget:(id<RAREiWidget>)widget
                   withJavaUtilEventObject:(JavaUtilEventObject *)event {
  id<RAREUTiFilterableList> menu = [((RAREPushButtonWidget *) check_class_cast(widget, [RAREPushButtonWidget class])) getItems];
  RARERenderableDataItem *mi;
  if ([((id<RAREiWidget>) nil_chk(widget)) getLinkedData] == nil) {
    RAREUTJSONObject *info = (RAREUTJSONObject *) check_class_cast([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataWithId:[NSString stringWithFormat:@"%@Info", namePrefix_]], [RAREUTJSONObject class]);
    NSString *s;
    int len = [((id<RAREUTiFilterableList>) nil_chk(menu)) size];
    for (int i = 0; i < len; i++) {
      mi = [menu getWithInt:i];
      if ([@"previous" isEqual:[((RARERenderableDataItem *) nil_chk(mi)) getLinkedData]]) {
        s = [((RAREUTJSONObject *) nil_chk(info)) optStringWithNSString:@"previousResultSetMenuText"];
        if ((s != nil) && ([s sequenceLength] > 0)) {
          s = [widget expandStringWithNSString:s withBoolean:NO];
          [mi setValueWithId:[RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:dataPageSize_] } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
        }
      }
      else if ([@"next" isEqual:[mi getLinkedData]]) {
        s = [((RAREUTJSONObject *) nil_chk(info)) optStringWithNSString:@"nextResultSetMenuText"];
        if ((s != nil) && ([s sequenceLength] > 0)) {
          s = [widget expandStringWithNSString:s withBoolean:NO];
          [mi setValueWithId:[RAREUTHelper expandStringWithNSString:s withNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ [RAREUTStringCache valueOfWithInt:dataPageSize_] } count:1 type:[IOSClass classWithClass:[NSString class]]]]];
        }
      }
      [mi setEnabledWithBoolean:NO];
    }
    [widget setLinkedDataWithId:[JavaLangBoolean getTRUE]];
    [widget update];
  }
}

- (void)onZoomInActionWithNSString:(NSString *)eventName
                   withRAREiWidget:(id<RAREiWidget>)widget
           withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if (chartHandler_ != nil) {
    [chartHandler_ zoomWithRAREiContainer:[((id<RAREiWidget>) nil_chk(widget)) getFormViewer] withBoolean:YES];
  }
}

- (void)onZoomOutActionWithNSString:(NSString *)eventName
                    withRAREiWidget:(id<RAREiWidget>)widget
            withJavaUtilEventObject:(JavaUtilEventObject *)event {
  if (chartHandler_ != nil) {
    [chartHandler_ zoomWithRAREiContainer:[((id<RAREiWidget>) nil_chk(widget)) getFormViewer] withBoolean:NO];
  }
}

- (void)reloadTableDataWithRARETableViewer:(RARETableViewer *)table {
  [self parseDataURLWithRAREaWidget:table withRAREActionLink:dataLink_ withBoolean:YES];
}

- (void)reselectDefaultViewWithNSString:(NSString *)eventName
                        withRAREiWidget:(id<RAREiWidget>)widget
                withJavaUtilEventObject:(JavaUtilEventObject *)event {
  [self reselectDefaultViewEx];
}

- (void)showChartForSelectedItemWithRARETableViewer:(RARETableViewer *)table {
  if ((chartHandler_ != nil) && [self isChartableWithRARERenderableDataItem:[((RARETableViewer *) nil_chk(table)) getSelectedItem]]) {
    RAREStackPaneViewer *stack = (RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class]);
    if (stack == nil) {
      [self showChartsViewWithRARETableViewer:table];
    }
    else {
      [self showChartForSelectedItemExWithRARETableViewer:table withRAREStackPaneViewer:stack withJavaLangBoolean:nil withBoolean:YES];
    }
  }
  else if ([RAREUIScreen isLargeScreen]) {
    [self clearChartsWithRARETableViewer:table];
  }
}

- (void)showMostRecentWithNSString:(NSString *)eventName
                   withRAREiWidget:(id<RAREiWidget>)widget
           withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)showNextResultSetWithNSString:(NSString *)eventName
                      withRAREiWidget:(id<RAREiWidget>)widget
              withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)showPreviousResultSetWithNSString:(NSString *)eventName
                          withRAREiWidget:(id<RAREiWidget>)widget
                  withJavaUtilEventObject:(JavaUtilEventObject *)event {
}

- (void)addCurrentPathIDWithCCPBVActionPath:(CCPBVActionPath *)path {
}

- (void)changePageWithRAREiWidget:(id<RAREiWidget>)widget
                      withBoolean:(BOOL)forward
                      withBoolean:(BOOL)jump {
  if ([((NSString *) nil_chk([((id<RAREiContainer>) nil_chk([((id<RAREiWidget>) nil_chk(widget)) getParent])) getName])) isEqual:@"tableToolbar"]) {
    if (forward) {
      if (jump) {
        spreadsheetPosition_ = [JavaLangMath maxWithInt:0 withInt:(int) [((IOSObjectArray *) nil_chk(itemDates_)) count] - spreadSheetPageSize_];
      }
      else {
        spreadsheetPosition_ += spreadSheetPageSize_;
        if (spreadsheetPosition_ + spreadSheetPageSize_ >= (int) [((IOSObjectArray *) nil_chk(itemDates_)) count]) {
          spreadsheetPosition_ = [JavaLangMath maxWithInt:0 withInt:(int) [itemDates_ count] - spreadSheetPageSize_];
        }
      }
    }
    else {
      if (jump) {
        spreadsheetPosition_ = 0;
      }
      else {
        spreadsheetPosition_ = [JavaLangMath maxWithInt:0 withInt:spreadsheetPosition_ - spreadSheetPageSize_];
      }
    }
    RARETableViewer *table = (RARETableViewer *) check_class_cast([((id<RAREiFormViewer>) nil_chk([widget getFormViewer])) getWidgetWithNSString:@"spreadsheet"], [RARETableViewer class]);
    [self updateNavigationButtonsWithRAREiContainer:[widget getFormViewer]];
    [self updateSpreadsheetColumnsWithRARETableViewer:table];
    [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) showWaitCursor];
    (void) [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVaResultsManager_$1 alloc] initWithCCPBVaResultsManager:self withRARETableViewer:table]];
  }
}

- (void)changeViewWithNSString:(NSString *)name
               withRAREiWidget:(id<RAREiWidget>)widget {
  CCPBVResultsViewEnum *view = [CCPBVResultsViewEnum valueOfWithNSString:[((NSString *) nil_chk(name)) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
  if (view == currentView_) {
    return;
  }
  if ((view == [CCPBVResultsViewEnum SPREADSHEET]) && (chartHandler_ != nil)) {
    [chartHandler_ resetChartPoints];
  }
  id<RAREiContainer> parent = [((id<RAREiWidget>) nil_chk(widget)) getFormViewer];
  selectionChecked_ = NO;
  switch ([view ordinal]) {
    case CCPBVResultsView_TRENDS:
    currentView_ = view;
    [self showRegularTableWithRAREiContainer:parent withBoolean:YES];
    break;
    case CCPBVResultsView_CHARTS:
    currentView_ = view;
    [self showRegularTableWithRAREiContainer:parent withBoolean:NO];
    break;
    case CCPBVResultsView_SPREADSHEET:
    currentView_ = view;
    [self showSpreesheetWithRAREiContainer:parent];
    break;
    default:
    [self changeViewExWithRAREiWidget:widget withCCPBVResultsViewEnum:view];
    break;
  }
}

- (void)changeViewExWithRAREiWidget:(id<RAREiWidget>)widget
           withCCPBVResultsViewEnum:(CCPBVResultsViewEnum *)view {
}

- (void)clearChartsWithRARETableViewer:(RARETableViewer *)table {
  RAREStackPaneViewer *stack = (RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class]);
  if (stack != nil) {
    [stack removeAllViewersWithBoolean:YES];
    [stack update];
    [((CCPBVaChartHandler *) nil_chk(chartHandler_)) updateZoomButtonsWithRAREiContainer:[stack getFormViewer]];
  }
  else {
    RARESplitPaneViewer *sp = [CCPBVUtils getSplitPaneViewerWithRAREiWidget:table];
    if (sp != nil) {
      id<RAREiViewer> v = [((id<RAREiTarget>) nil_chk([sp getRegionWithInt:1])) removeViewer];
      if (v != nil) {
        [v dispose];
        [sp update];
      }
    }
  }
}

- (void)clearSelection {
  [((RARETableViewer *) nil_chk(dataTable_)) clearSelection];
  RARETableViewer *table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
  if (table != nil) {
    [table clearSelection];
  }
}

- (RARERenderableDataItem *)createNoDataRowWithRARETableViewer:(RARETableViewer *)table {
  int cc = [((RARETableViewer *) nil_chk(table)) getColumnCount];
  RARERenderableDataItem *row = [table createRowWithInt:cc withBoolean:YES];
  [((RARERenderableDataItem *) nil_chk(row)) setEnabledWithBoolean:NO];
  RARERenderableDataItem *item = [row getWithInt:(cc > 2) ? 1 : 0];
  [((RARERenderableDataItem *) nil_chk(item)) setEnabledWithBoolean:NO];
  [item setColumnSpanWithInt:-1];
  [item setTypeWithInt:RARERenderableDataItem_TYPE_STRING];
  [item setValueWithId:[RAREPlatform getResourceAsStringWithNSString:[NSString stringWithFormat:@"bv.text.no_%@_found", namePrefix_]]];
  [item setFontWithRAREUIFont:[((RAREUIFont *) nil_chk([table getFont])) deriveItalic]];
  return row;
}

- (IOSObjectArray *)createTrendPanelsWithRAREUTJSONArray:(RAREUTJSONArray *)trends
                                             withBoolean:(BOOL)reverseChronologicalOrder {
  int len = (trends == nil) ? 0 : [trends size];
  if (len == 0) {
    return nil;
  }
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] initWithInt:len];
  for (int i = 0; i < len; i++) {
    RAREUTJSONObject *o = [((RAREUTJSONArray *) nil_chk(trends)) getJSONObjectWithInt:i];
    NSString *os = [((RAREUTJSONObject *) nil_chk(o)) optStringWithNSString:@"os"];
    if ((os == nil) || [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) okForOSWithNSString:os]) {
      [list addWithId:[[CCPBVTrendPanel alloc] initWithNSString:[o getStringWithNSString:@"name"] withNSString:[((RAREWindowViewer *) nil_chk(w)) expandStringWithNSString:[o getStringWithNSString:@"title"]] withRAREUTJSONArray:[o getJSONArrayWithNSString:@"keys"] withBoolean:reverseChronologicalOrder]];
    }
  }
  return [list isEmpty] ? nil : [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:[IOSClass classWithClass:[CCPBVTrendPanel class]]]];
}

- (NSString *)getCategoryWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  return nil;
}

- (int)getFirstChartableItemWithRARETableViewer:(RARETableViewer *)table {
  int pos = -1;
  int len = [((RARETableViewer *) nil_chk(table)) size];
  if (![table hasSelection]) {
    for (int i = 0; i < len; i++) {
      if ([self isChartableWithRARERenderableDataItem:[table getWithInt:i]]) {
        pos = i;
        break;
      }
    }
  }
  return pos;
}

- (NSString *)getFirstChartableKey {
  BOOL spreadsheet = currentView_ == [CCPBVResultsViewEnum SPREADSHEET];
  RARETableViewer *table;
  if (spreadsheet) {
    table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getWidgetWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
  }
  else {
    table = dataTable_;
  }
  int index = [self getFirstChartableItemWithRARETableViewer:table];
  if (index == -1) {
    return nil;
  }
  RARERenderableDataItem *row = [((RARETableViewer *) nil_chk(table)) getWithInt:index];
  if (spreadsheet) {
    return (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) getLinkedData], [NSString class]);
  }
  else {
    return (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData], [NSString class]);
  }
}

- (int)getNextOrPreviousChartableItemWithRARETableViewer:(RARETableViewer *)table
                                        withJavaUtilList:(id<JavaUtilList>)keys
                                             withBoolean:(BOOL)next {
  int pos = -1;
  do {
    int index = [((RARETableViewer *) nil_chk(table)) getSelectedIndex];
    if (index == -1) {
      break;
    }
    RARERenderableDataItem *row = [table getWithInt:index];
    NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData], [NSString class]);
    if (key == nil) {
      break;
    }
    int n = [((id<JavaUtilList>) nil_chk(keys)) indexOfWithId:key];
    if (n == -1) {
      break;
    }
    n += next ? 1 : -1;
    if ((n < 0) || (n >= [keys size])) {
      break;
    }
    key = [keys getWithInt:n];
    int len = [table size];
    while (YES) {
      index += next ? 1 : -1;
      if ((index < 0) || (index >= len)) {
        break;
      }
      row = [table getWithInt:index];
      if ([((NSString *) nil_chk(key)) isEqual:[((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData]]) {
        if (next) {
          return index;
        }
        pos = index;
      }
    }
  }
  while (NO);
  return pos;
}

- (NSString *)getSelectedChartableKey {
  BOOL spreadsheet = currentView_ == [CCPBVResultsViewEnum SPREADSHEET];
  RARETableViewer *table;
  if (spreadsheet) {
    table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getWidgetWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
  }
  else {
    table = dataTable_;
  }
  int index = [((RARETableViewer *) nil_chk(table)) getSelectedIndex];
  if (index == -1) {
    return nil;
  }
  RARERenderableDataItem *row = [table getWithInt:index];
  if (spreadsheet) {
    return (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) getLinkedData], [NSString class]);
  }
  else {
    return (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData], [NSString class]);
  }
}

- (NSString *)getSpeeedSheetColumnTitle {
  return @"";
}

- (void)handleActionPathExWithCCPBVActionPath:(CCPBVActionPath *)path {
}

- (void)handlePathKeyWithRARETableViewer:(RARETableViewer *)table
                            withNSString:(NSString *)key
                                 withInt:(int)column
                             withBoolean:(BOOL)fireAction {
  int len = [((RARETableViewer *) nil_chk(table)) size];
  int n = -1;
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *item = [table getItemWithInt:i withInt:column];
    NSString *val = (item == nil) ? nil : (NSString *) check_class_cast([item getLinkedData], [NSString class]);
    if ([((NSString *) nil_chk(key)) isEqual:val]) {
      n = i;
      break;
    }
  }
  if (n != -1) {
    [table setSelectedIndexWithInt:n];
    if (fireAction) {
      [table fireActionForSelected];
    }
    RARETableViewer *t = table;
    int index = n;
    int time = [RAREPlatform isAndroid] ? 300 : 100;
    [RAREPlatform invokeLaterWithJavaLangRunnable:[[CCPBVaResultsManager_$2 alloc] initWithRARETableViewer:t withInt:index] withInt:time];
  }
}

- (BOOL)hasCategories {
  return NO;
}

- (BOOL)hasDocumentLoadedWithNSString:(NSString *)id_
                   withRAREiContainer:(id<RAREiContainer>)fv {
  id<RAREiViewer> dv = nil;
  if (fv != nil) {
    if ([[fv getLinkedData] isKindOfClass:[CCPBVDocument class]]) {
      dv = fv;
    }
    else {
      dv = (id<RAREiViewer>) check_protocol_cast([fv getWidgetWithNSString:@"documentViewer"], @protocol(RAREiViewer));
    }
  }
  id<RAREiViewer> wv = (dv == nil) ? [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getWorkspaceViewer] : dv;
  if ((wv != nil) && ([[wv getLinkedData] isKindOfClass:[CCPBVDocument class]])) {
    if ([((NSString *) nil_chk(id_)) isEqual:[((CCPBVDocument *) check_class_cast([wv getLinkedData], [CCPBVDocument class])) getID]]) {
      return YES;
    }
  }
  return NO;
}

- (BOOL)isChartableWithRARERenderableDataItem:(RARERenderableDataItem *)row {
  if ((chartableItemsManager_ == nil) || (row == nil)) {
    return NO;
  }
  if (currentView_ == [CCPBVResultsViewEnum SPREADSHEET]) {
    NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) getLinkedData], [NSString class]);
    if (key == nil) {
      return NO;
    }
    return YES;
  }
  NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData], [NSString class]);
  if (key == nil) {
    return NO;
  }
  return [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) isChartableWithNSString:key];
}

- (BOOL)isOnNonChartingView {
  switch ([currentView_ ordinal]) {
    case CCPBVResultsView_SPREADSHEET:
    case CCPBVResultsView_CHARTS:
    return NO;
    default:
    return YES;
  }
}

- (void)reselectDefaultViewEx {
  if ((dataTable_ != nil) && ![dataTable_ isDisposed]) {
    RAREToolBarViewer *tb = (RAREToolBarViewer *) check_class_cast([((id<RAREiContainer>) nil_chk([dataTable_ getParent])) getWidgetWithNSString:@"tableToolbar"], [RAREToolBarViewer class]);
    id<RAREiWidget> cw = (tb == nil) ? nil : [tb getWidgetWithNSString:(spreadsheetTable_ == nil) ? @"charts" : @"spreadsheet"];
    if ((cw != nil) && ![cw isSelected]) {
      [cw setSelectedWithBoolean:YES];
      @try {
        currentView_ = [CCPBVResultsViewEnum valueOfWithNSString:[((NSString *) nil_chk([cw getName])) uppercaseStringWithJRELocale:[JavaUtilLocale US]]];
      }
      @catch (JavaLangException *ignore) {
      }
    }
    spreadsheetTable_ = nil;
  }
}

- (void)reset {
  if (itemCounts_ != nil) {
    [itemCounts_ clear];
  }
  if (itemDatesSet_ != nil) {
    [itemDatesSet_ clear];
  }
  if (originalRows_ != nil) {
    [originalRows_ clear];
  }
  currentView_ = [CCPBVResultsViewEnum CHARTS];
  if ((dataTable_ != nil) && ([dataTable_ getParent] == nil)) {
    [dataTable_ dispose];
  }
  if ((spreadsheetTable_ != nil) && ([spreadsheetTable_ getParent] == nil)) {
    [spreadsheetTable_ dispose];
  }
  if (chartableItemsManager_ != nil) {
    [chartableItemsManager_ reset];
  }
  if ([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) isOrientationLocked]) {
    [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) unlockOrientation];
  }
  dataTable_ = nil;
  hasNoData_ = NO;
  dataLoaded_ = NO;
  originalRows_ = nil;
  itemDates_ = nil;
  chartsLoaded_ = NO;
  spreadsheetTable_ = nil;
}

- (void)selectFirstChartableItemWithRARETableViewer:(RARETableViewer *)table
                                        withBoolean:(BOOL)fireAction {
  int pos = [self getFirstChartableItemWithRARETableViewer:table];
  if (pos != -1) {
    [((RARETableViewer *) nil_chk(table)) setSelectedIndexWithInt:pos];
    if (fireAction) {
      [table fireActionForSelected];
    }
  }
}

- (void)setNavigationButtonsVisibleWithRAREiContainer:(id<RAREiContainer>)fv
                                          withBoolean:(BOOL)visible {
  id<RAREiWidget> button = [((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"nextPage"];
  if (button != nil) {
    [button setVisibleWithBoolean:visible];
  }
  button = [fv getWidgetWithNSString:@"lastPage"];
  if (button != nil) {
    [button setVisibleWithBoolean:visible];
  }
  button = [fv getWidgetWithNSString:@"firstPage"];
  if (button != nil) {
    [button setVisibleWithBoolean:visible];
  }
  button = [fv getWidgetWithNSString:@"previousPage"];
  if (button != nil) {
    [button setVisibleWithBoolean:visible];
  }
}

- (void)showChartForSelectedItemExWithRARETableViewer:(RARETableViewer *)table
                              withRAREStackPaneViewer:(RAREStackPaneViewer *)sp
                                  withJavaLangBoolean:(JavaLangBoolean *)forward
                                          withBoolean:(BOOL)horizontal {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RARERenderableDataItem *row = [((RARETableViewer *) nil_chk(table)) getSelectedItem];
  NSString *key;
  BOOL spreadsheet = currentView_ == [CCPBVResultsViewEnum SPREADSHEET];
  if (spreadsheet) {
    key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:0])) getLinkedData], [NSString class]);
  }
  else {
    key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:CCPBVaResultsManager_NAME_POSITION_])) getLinkedData], [NSString class]);
  }
  if (key == nil) {
    return;
  }
  RAREaWorkerTask *task = [[CCPBVaResultsManager_$3 alloc] initWithCCPBVaResultsManager:self withNSString:key withRAREWindowViewer:w withRARETableViewer:table withRAREStackPaneViewer:sp withJavaLangBoolean:forward withBoolean:horizontal];
  (void) [((RAREWindowViewer *) nil_chk(w)) spawnWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ task } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
  [w showWaitCursor];
}

- (void)showChartsViewWithRARETableViewer:(RARETableViewer *)table {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  NSString *url = [NSString stringWithFormat:@"%@_charts.rml", namePrefix_];
  @try {
    if (![RAREUIScreen isLargeScreen]) {
      if (currentView_ == [CCPBVResultsViewEnum SPREADSHEET]) {
        spreadsheetTable_ = table;
      }
      [CCPBVUtils pushWorkspaceViewerWithNSString:url];
    }
    else {
      RARESplitPaneViewer *sp = (RARESplitPaneViewer *) check_class_cast([((RARETableViewer *) nil_chk(table)) getFormViewer], [RARESplitPaneViewer class]);
      [((RAREWindowViewer *) nil_chk(w)) activateViewerWithId:url withNSString:[((id<RAREiTarget>) nil_chk([((RARESplitPaneViewer *) nil_chk(sp)) getRegionWithInt:1])) getName]];
    }
  }
  @catch (JavaIoIOException *e) {
    [((RAREWindowViewer *) nil_chk(w)) handleExceptionWithJavaLangThrowable:e];
  }
}

- (void)showRegularTableWithRAREiContainer:(id<RAREiContainer>)fv
                               withBoolean:(BOOL)trends {
  RARESplitPaneViewer *sp = nil;
  if ([(id) fv isKindOfClass:[RARESplitPaneViewer class]]) {
    sp = (RARESplitPaneViewer *) check_class_cast(fv, [RARESplitPaneViewer class]);
  }
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  @try {
    [self showRegularTableExWithRAREiContainer:fv];
    if (trends) {
      NSString *url = [NSString stringWithFormat:@"%@_trends.rml", namePrefix_];
      [((RARETableViewer *) nil_chk(dataTable_)) clearSelection];
      if (chartHandler_ != nil) {
        [chartHandler_ resetChartPoints];
      }
      if (sp == nil) {
        [CCPBVUtils pushWorkspaceViewerWithNSString:url withBoolean:NO withJavaLangRunnable:[[CCPBVaResultsManager_$4 alloc] initWithCCPBVaResultsManager:self]];
      }
      else {
        [((RAREWindowViewer *) nil_chk(w)) activateViewerWithId:url withNSString:[((id<RAREiTarget>) nil_chk([sp getRegionWithInt:1])) getName]];
      }
    }
    else {
      if (sp != nil) {
        id<RAREiViewer> v = [sp getViewerWithInt:1];
        if ((v != nil) && [((NSString *) nil_chk([v getName])) isEqual:[NSString stringWithFormat:@"%@Charts", namePrefix_]]) {
          [((id<RAREiWidget>) nil_chk([((id<RAREiFormViewer>) nil_chk([v getFormViewer])) getWidgetWithNSString:@"chartHeader"])) setVisibleWithBoolean:YES];
          NSString *key = (keyPath_ == nil) ? nil : [keyPath_ shift];
          if (key == nil) {
            if (![((RARETableViewer *) nil_chk(dataTable_)) hasSelection]) {
              [self selectFirstChartableItemWithRARETableViewer:dataTable_ withBoolean:YES];
            }
            else {
              [dataTable_ fireActionForSelected];
            }
          }
          else {
            [self handlePathKeyWithRARETableViewer:dataTable_ withNSString:key withInt:1 withBoolean:YES];
          }
        }
        else {
          if (chartHandler_ != nil) {
            [chartHandler_ resetChartPoints];
          }
          [((RAREWindowViewer *) nil_chk(w)) activateViewerWithId:[NSString stringWithFormat:@"%@_charts.rml", namePrefix_] withNSString:[((id<RAREiTarget>) nil_chk([sp getRegionWithInt:1])) getName]];
        }
      }
    }
    [((id<RAREiContainer>) nil_chk(fv)) update];
  }
  @catch (JavaIoIOException *e) {
    [((RAREWindowViewer *) nil_chk(w)) handleExceptionWithJavaLangThrowable:e];
  }
}

- (void)showRegularTableExWithRAREiContainer:(id<RAREiContainer>)fv {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RARETableViewer *table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk(w)) getViewerWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
  if (table != nil) {
    RARESplitPaneViewer *sp = nil;
    if ([(id) fv isKindOfClass:[RARESplitPaneViewer class]]) {
      sp = (RARESplitPaneViewer *) check_class_cast(fv, [RARESplitPaneViewer class]);
    }
    RAREGroupBoxViewer *gb = (RAREGroupBoxViewer *) check_class_cast([table getParent], [RAREGroupBoxViewer class]);
    id constraints = [((RAREGroupBoxViewer *) nil_chk(gb)) getConsraintsWithRAREiWidget:table];
    [gb removeWidgetWithRAREiWidget:table];
    [table dispose];
    spreadsheetTable_ = nil;
    [gb addWidgetWithRAREiWidget:dataTable_ withId:constraints withInt:-1];
    if (sp != nil) {
      [sp setTopToBottomWithBoolean:![RAREUIScreen isWider]];
      [sp setAutoOrientWithBoolean:YES];
      [sp setSplitProportionsWithFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ 0.4f } count:1]];
    }
    else if ([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) isOrientationLocked]) {
      [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) unlockOrientation];
    }
    [self setNavigationButtonsVisibleWithRAREiContainer:fv withBoolean:NO];
    id<RAREiWidget> label = [((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"tableLabel"];
    if (label != nil) {
      [label setValueWithId:@" "];
    }
  }
}

- (void)showSpreesheetWithRAREiContainer:(id<RAREiContainer>)fv {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  dateContext_ = [((id<RAREiDataConverter>) nil_chk([((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataConverterWithIOSClass:[IOSClass classWithClass:[RAREDateTimeConverter class]]])) createContextWithRAREiWidget:w withNSString:[NSString stringWithFormat:@"|%@", [((RAREWindowViewer *) nil_chk(w)) getStringWithNSString:@"bv.format.time.column_header"]]];
  RARESPOTTable *cfg = (RARESPOTTable *) check_class_cast([w createConfigurationObjectWithNSString:@"Table" withNSString:@"bv.table.spreadsheet"], [RARESPOTTable class]);
  SPOTSet *set = ((RARESPOTTable *) nil_chk(cfg))->columns_;
  RARESPOTItemDescription *prototype = (RARESPOTItemDescription *) check_class_cast([((SPOTSet *) nil_chk(set)) getExWithInt:1], [RARESPOTItemDescription class]);
  int len = [JavaLangMath minWithInt:spreadSheetPageSize_ withInt:(int) [((IOSObjectArray *) nil_chk(itemDates_)) count]];
  for (int i = 0; i < len; i++) {
    [set addWithISPOTElement:(RARESPOTItemDescription *) check_class_cast([((RARESPOTItemDescription *) nil_chk(prototype)) clone], [RARESPOTItemDescription class])];
  }
  RARESPOTItemDescription *id_ = (RARESPOTItemDescription *) check_class_cast([set getExWithInt:0], [RARESPOTItemDescription class]);
  [((SPOTPrintableString *) nil_chk(((RARESPOTItemDescription *) nil_chk(id_))->title_)) setValueWithNSString:[self getSpeeedSheetColumnTitle]];
  [cfg setEventHandlerWithNSString:@"onAction" withNSString:[NSString stringWithFormat:@"class:%@#onTableAction", scriptClassName_]];
  RARETableViewer *table = (RARETableViewer *) check_class_cast([w createViewerWithRAREiWidget:fv withRARESPOTWidget:cfg], [RARETableViewer class]);
  if ([self hasCategories]) {
    [((RAREColumn *) nil_chk([((RARETableViewer *) nil_chk(table)) getColumnWithInt:0])) setIconWithRAREiPlatformIcon:[RAREPlatform getResourceAsIconWithNSString:@"Rare.icon.empty"]];
  }
  RAREGroupBoxViewer *gb = (RAREGroupBoxViewer *) check_class_cast([((RARETableViewer *) nil_chk(dataTable_)) getParent], [RAREGroupBoxViewer class]);
  id constraints = [((RAREGroupBoxViewer *) nil_chk(gb)) getConsraintsWithRAREiWidget:dataTable_];
  [gb removeWidgetWithRAREiWidget:dataTable_];
  [gb addWidgetWithRAREiWidget:table withId:constraints withInt:-1];
  spreadsheetTable_ = table;
  if ([(id) fv isKindOfClass:[RARESplitPaneViewer class]]) {
    RARESplitPaneViewer *sp = (RARESplitPaneViewer *) check_class_cast(fv, [RARESplitPaneViewer class]);
    [((RARESplitPaneViewer *) nil_chk(sp)) setTopToBottomWithBoolean:YES];
    [sp setAutoOrientWithBoolean:NO];
    [sp setSplitProportionsWithFloatArray:[IOSFloatArray arrayWithFloats:(float[]){ 0.5f } count:1]];
    @try {
      id<RAREiViewer> v = [sp getViewerWithInt:1];
      if ((v == nil) || ![((NSString *) nil_chk([v getName])) isEqual:[NSString stringWithFormat:@"%@Charts", namePrefix_]]) {
        id<RAREiTarget> t = [sp getRegionWithInt:1];
        (void) [((id<RAREiTarget>) nil_chk(t)) removeViewer];
        if (v != nil) {
          [v dispose];
        }
      }
    }
    @catch (JavaLangException *ex) {
      [w handleExceptionWithJavaLangThrowable:ex];
    }
  }
  else {
    [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) lockOrientationWithJavaLangBoolean:[JavaLangBoolean getTRUE]];
  }
  [self setNavigationButtonsVisibleWithRAREiContainer:fv withBoolean:YES];
  [self updateNavigationButtonsWithRAREiContainer:fv];
  [self updateSpreadsheetColumnsWithRARETableViewer:table];
  if (chartHandler_ != nil) {
    [chartHandler_ setChartPointsWithInt:spreadSheetPageSize_];
  }
  [w showWaitCursor];
  (void) [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) executeBackgroundTaskWithJavaLangRunnable:[[CCPBVaResultsManager_$5 alloc] initWithCCPBVaResultsManager:self withRARETableViewer:table]];
}

- (void)slideToChartableItemWithBoolean:(BOOL)next
                            withBoolean:(BOOL)horizontal {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RARETableViewer *table = spreadsheetTable_;
  if ((table == nil) || [table isDisposed]) {
    table = (RARETableViewer *) check_class_cast([((RAREWindowViewer *) nil_chk(w)) getViewerWithNSString:@"spreadsheetTable"], [RARETableViewer class]);
  }
  if (table == nil) {
    table = dataTable_;
  }
  int pos = [((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(chartableItemsManager_)) getNextOrPreviousItemWithRARETableViewer:table withBoolean:next withBoolean:table == dataTable_ withInt:(table == dataTable_) ? CCPBVaResultsManager_NAME_POSITION_ : 0];
  RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk(w)) getViewerWithNSString:@"chartPaneStack"], [RAREStackPaneViewer class]);
  if (pos == -1) {
    [CCPBVUtils showPullBackAnimationWithRAREiViewer:[((RAREStackPaneViewer *) nil_chk(sp)) getActiveViewer] withBoolean:horizontal withBoolean:next ? NO : YES];
  }
  else {
    [((RARETableViewer *) nil_chk(table)) setSelectedIndexWithInt:pos];
    [table scrollRowToVisibleWithInt:pos];
    [self showChartForSelectedItemExWithRARETableViewer:table withRAREStackPaneViewer:sp withJavaLangBoolean:[JavaLangBoolean valueOfWithBoolean:next] withBoolean:horizontal];
  }
}

- (void)spreadsheetRowCreatedWithRARETableViewer:(RARETableViewer *)table
                      withRARERenderableDataItem:(RARERenderableDataItem *)spreadsheetRow
                      withRARERenderableDataItem:(RARERenderableDataItem *)sourceRow {
  if ((sourceRow != nil) && (CCPBVaResultsManager_RANGE_POSITION_ > -1)) {
    (void) [spreadsheetRow setItemWithInt:[((RARERenderableDataItem *) nil_chk(spreadsheetRow)) size] - 1 withRARERenderableDataItem:[sourceRow getWithInt:CCPBVaResultsManager_RANGE_POSITION_]];
  }
}

- (void)updateCardStackTitleWithNSString:(NSString *)title
                            withNSString:(NSString *)subtitle {
  id<RAREiContainer> fv = (id<RAREiContainer>) check_protocol_cast([((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getViewerWithNSString:namePrefix_], @protocol(RAREiContainer));
  if (fv != nil) {
    [CCPBVCardStackUtils setViewerTitleWithRAREiViewer:fv withNSString:[fv expandStringWithNSString:title withBoolean:NO] withNSString:subtitle];
    [CCPBVCardStackUtils updateTitleWithRAREiViewer:fv withBoolean:NO];
  }
}

- (void)updateNavigationButtonsWithRAREiContainer:(id<RAREiContainer>)fv {
  id<RAREiWidget> button = [((id<RAREiContainer>) nil_chk(fv)) getWidgetWithNSString:@"nextPage"];
  if (button != nil) {
    [button setEnabledWithBoolean:spreadsheetPosition_ + spreadSheetPageSize_ < (int) [((IOSObjectArray *) nil_chk(itemDates_)) count]];
  }
  button = [fv getWidgetWithNSString:@"lastPage"];
  if (button != nil) {
    [button setEnabledWithBoolean:spreadsheetPosition_ + spreadSheetPageSize_ < (int) [((IOSObjectArray *) nil_chk(itemDates_)) count]];
  }
  button = [fv getWidgetWithNSString:@"firstPage"];
  if (button != nil) {
    [button setEnabledWithBoolean:spreadsheetPosition_ > 0];
  }
  button = [fv getWidgetWithNSString:@"previousPage"];
  if (button != nil) {
    [button setEnabledWithBoolean:spreadsheetPosition_ > 0];
  }
}

- (void)updateSpreadsheetColumnsWithRARETableViewer:(RARETableViewer *)table {
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  id<RAREiDataConverter> cvt = [((id<RAREiPlatformAppContext>) nil_chk([RAREPlatform getAppContext])) getDataConverterWithIOSClass:[IOSClass classWithClass:[RAREDateTimeConverter class]]];
  IOSObjectArray *dates = itemDates_;
  id ctx = dateContext_;
  int start = spreadsheetPosition_;
  int end = [JavaLangMath minWithInt:start + spreadSheetPageSize_ withInt:(int) [((IOSObjectArray *) nil_chk(dates)) count]];
  int col = 1;
  for (int i = start; i < end; i++) {
    [((RAREColumn *) nil_chk([((RARETableViewer *) nil_chk(table)) getColumnWithInt:col])) setLinkedDataWithId:IOSObjectArray_Get(dates, i)];
    [table setColumnTitleWithInt:col withNSString:(NSString *) check_class_cast([((id<RAREiDataConverter>) nil_chk(cvt)) objectToStringWithRAREiWidget:w withId:IOSObjectArray_Get(dates, i) withId:ctx], [NSString class])];
    [table setColumnVisibleWithInt:col withBoolean:YES];
    col++;
  }
  int len = ([((RARETableViewer *) nil_chk(table)) getColumnCount] - CCPBVaResultsManager_RANGE_POSITION_ > -1) ? 1 : 0;
  for (int i = col; i < len; i++) {
    [table setColumnVisibleWithInt:i withBoolean:NO];
  }
}

- (void)updateSpreadsheetRowsWithRARETableViewer:(RARETableViewer *)table {
  if ([((RARETableViewer *) nil_chk(table)) isDisposed]) {
    return;
  }
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  @try {
    BOOL categorize = [self hasCategories];
    IOSObjectArray *dates = itemDates_;
    int start = spreadsheetPosition_;
    int end = [JavaLangMath minWithInt:start + spreadSheetPageSize_ withInt:(int) [((IOSObjectArray *) nil_chk(dates)) count]];
    int cols = [table getColumnCount];
    RARERenderableDataItem *row, *test, *orow;
    int clen = end - start;
    id<JavaUtilList> list = originalRows_;
    JavaUtilLinkedHashMap *counts = itemCounts_;
    JavaUtilLinkedHashMap *categories = [[JavaUtilLinkedHashMap alloc] init];
    JavaUtilHashMap *map = [[JavaUtilHashMap alloc] initWithInt:[((JavaUtilLinkedHashMap *) nil_chk(counts)) size]];
    JavaUtilArrayList *rows = [[JavaUtilArrayList alloc] initWithInt:[counts size]];
    BOOL found;
    long long int firstDate = [((JavaUtilDate *) IOSObjectArray_Get(dates, start)) getTime];
    long long int lastDate = [((JavaUtilDate *) IOSObjectArray_Get(dates, end - 1)) getTime];
    int len = [((id<JavaUtilList>) nil_chk(list)) size];
    for (int i = 0; i < len; i++) {
      orow = [list getWithInt:i];
      test = [((RARERenderableDataItem *) nil_chk(orow)) getWithInt:CCPBVaResultsManager_NAME_POSITION_];
      NSString *s = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk(test)) getLinkedData], [NSString class]);
      if (![counts containsKeyWithId:s]) {
        continue;
      }
      JavaUtilDate *date = (JavaUtilDate *) check_class_cast([((RARERenderableDataItem *) nil_chk([orow getWithInt:CCPBVaResultsManager_DATE_POSITION_])) getValue], [JavaUtilDate class]);
      long long int time = [((JavaUtilDate *) nil_chk(date)) getTime];
      if ((time < firstDate) || (time > lastDate)) {
        continue;
      }
      s = (NSString *) check_class_cast([test getValue], [NSString class]);
      row = [map getWithId:s];
      if (row == nil) {
        row = [table createRowWithInt:cols withBoolean:NO];
        [((RARERenderableDataItem *) nil_chk(row)) setItemCountWithInt:cols];
        [self spreadsheetRowCreatedWithRARETableViewer:table withRARERenderableDataItem:row withRARERenderableDataItem:orow];
        (void) [row setItemWithInt:0 withRARERenderableDataItem:test];
        [rows addWithId:row];
        (void) [map putWithId:s withId:row];
        if (categorize) {
          NSString *category = [self getCategoryWithRARERenderableDataItem:orow];
          [row setLinkedDataWithId:category];
          id<JavaUtilList> clist = [categories getWithId:category];
          if (clist == nil) {
            clist = [[JavaUtilArrayList alloc] init];
            (void) [categories putWithId:category withId:clist];
          }
          [((id<JavaUtilList>) nil_chk(clist)) addWithId:row];
        }
      }
      found = NO;
      for (int col = 0; col < clen; col++) {
        if ([((JavaUtilDate *) IOSObjectArray_Get(dates, col + start)) getTime] == time) {
          found = YES;
          (void) [((RARERenderableDataItem *) nil_chk(row)) setItemWithInt:col + 1 withRARERenderableDataItem:[orow getWithInt:CCPBVaResultsManager_VALUE_POSITION_]];
        }
      }
      if (!found) {
        [RAREPlatform debugLogWithNSString:[NSString stringWithFormat:@"SPREADSHEET ENTRY NOT FOUND%@", orow]];
      }
    }
    if (categorize) {
      RARESubItemComparator *c = [[RARESubItemComparator alloc] init];
      [c setOptionsWithInt:0 withBoolean:NO];
      [table clear];
      id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([categories entrySet])) iterator];
      [rows clear];
      RAREUIColor *bg = [RAREColorUtils getColorWithNSString:@"spreadsheetCategoryBackground"];
      RARERenderableDataItem *emptyCatRow = [[RARERenderableDataItem alloc] init];
      [emptyCatRow setBackgroundWithRAREUIColor:bg];
      [emptyCatRow setColumnSpanWithInt:-1];
      RAREUIFont *bold = [CCPBVUtils getListWidgetBoldFontWithRAREiWidget:table];
      id<RAREiPlatformIcon> icon = [RAREFunctions createEmptyIconWithInt:0 withInt:0 withRAREUIColor:nil];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        id<JavaUtilMap_Entry> e = [it next];
        NSString *category = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
        id<JavaUtilList> clist = [e getValue];
        [JavaUtilCollections sortWithJavaUtilList:clist withJavaUtilComparator:c];
        row = [table createRowWithInt:cols withBoolean:NO];
        [((RARERenderableDataItem *) nil_chk(row)) setSelectableWithBoolean:NO];
        [row setColumnSpanWithInt:-1];
        for (int i = 0; i < cols; i++) {
          [row addWithId:emptyCatRow];
        }
        test = [[RARERenderableDataItem alloc] initWithId:category];
        [test setBackgroundWithRAREUIColor:bg];
        [test setColumnSpanWithInt:-1];
        [test setFontWithRAREUIFont:bold];
        [test setIconWithRAREiPlatformIcon:icon];
        (void) [row setWithInt:0 withId:test];
        [row setLinkedDataWithId:category];
        [rows addWithId:row];
        [rows addAllWithJavaUtilCollection:clist];
      }
    }
    [table setAllWithJavaUtilCollection:rows];
    id<JavaLangRunnable> r = [[CCPBVaResultsManager_$6 alloc] initWithCCPBVaResultsManager:self withRARETableViewer:table withRAREWindowViewer:w];
    [RAREPlatform runOnUIThreadWithJavaLangRunnable:r];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    [((RAREWindowViewer *) nil_chk(w)) hideWaitCursor];
  }
}

- (void)viewerPopulatedWithRAREiViewer:(id<RAREiViewer>)v {
  RAREStackPaneViewer *sp = [CCPBVUtils getStackPaneViewerWithRAREiWidget:v];
  int n = [((RAREStackPaneViewer *) nil_chk(sp)) indexOfWithId:v];
  if ((n != -1) && ([sp getSelectedIndex] != n)) {
    [sp switchToWithInt:n];
  }
}

- (void)copyAllFieldsTo:(CCPBVaResultsManager *)other {
  [super copyAllFieldsTo:other];
  other->chartHandler_ = chartHandler_;
  other->chartableItemsManager_ = chartableItemsManager_;
  other->chartsLoaded_ = chartsLoaded_;
  other->currentView_ = currentView_;
  other->dataLink_ = dataLink_;
  other->dataLoaded_ = dataLoaded_;
  other->dataPageSize_ = dataPageSize_;
  other->dataTable_ = dataTable_;
  other->dateContext_ = dateContext_;
  other->hasNoData_ = hasNoData_;
  other->itemCounts_ = itemCounts_;
  other->itemDates_ = itemDates_;
  other->itemDatesSet_ = itemDatesSet_;
  other->keyPath_ = keyPath_;
  other->multiChartMode_ = multiChartMode_;
  other->namePrefix_ = namePrefix_;
  other->originalRows_ = originalRows_;
  other->scriptClassName_ = scriptClassName_;
  other->selectionChecked_ = selectionChecked_;
  other->spreadSheetPageSize_ = spreadSheetPageSize_;
  other->spreadsheetPosition_ = spreadsheetPosition_;
  other->spreadsheetTable_ = spreadsheetTable_;
  other->transitionAnimation_ = transitionAnimation_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "checkAndHandleNoDataWithRARETableViewer:withJavaUtilList:", NULL, "Z", 0x1, NULL },
    { "getDisplayedActionPath", NULL, "LCCPBVActionPath", 0x1, NULL },
    { "addCurrentPathIDWithCCPBVActionPath:", NULL, "V", 0x4, NULL },
    { "changePageWithRAREiWidget:withBoolean:withBoolean:", NULL, "V", 0x4, NULL },
    { "changeViewWithNSString:withRAREiWidget:", NULL, "V", 0x4, NULL },
    { "changeViewExWithRAREiWidget:withCCPBVResultsViewEnum:", NULL, "V", 0x4, NULL },
    { "clearChartsWithRARETableViewer:", NULL, "V", 0x4, NULL },
    { "clearSelection", NULL, "V", 0x4, NULL },
    { "createNoDataRowWithRARETableViewer:", NULL, "LRARERenderableDataItem", 0x4, NULL },
    { "createTrendPanelsWithRAREUTJSONArray:withBoolean:", NULL, "LIOSObjectArray", 0x4, NULL },
    { "getCategoryWithRARERenderableDataItem:", NULL, "LNSString", 0x4, NULL },
    { "getFirstChartableItemWithRARETableViewer:", NULL, "I", 0x4, NULL },
    { "getFirstChartableKey", NULL, "LNSString", 0x4, NULL },
    { "getNextOrPreviousChartableItemWithRARETableViewer:withJavaUtilList:withBoolean:", NULL, "I", 0x4, NULL },
    { "getSelectedChartableKey", NULL, "LNSString", 0x4, NULL },
    { "getSpeeedSheetColumnTitle", NULL, "LNSString", 0x4, NULL },
    { "handleActionPathExWithCCPBVActionPath:", NULL, "V", 0x4, NULL },
    { "handlePathKeyWithRARETableViewer:withNSString:withInt:withBoolean:", NULL, "V", 0x4, NULL },
    { "hasCategories", NULL, "Z", 0x4, NULL },
    { "hasDocumentLoadedWithNSString:withRAREiContainer:", NULL, "Z", 0x4, NULL },
    { "isChartableWithRARERenderableDataItem:", NULL, "Z", 0x4, NULL },
    { "isOnNonChartingView", NULL, "Z", 0x4, NULL },
    { "reselectDefaultViewEx", NULL, "V", 0x4, NULL },
    { "reset", NULL, "V", 0x4, NULL },
    { "selectFirstChartableItemWithRARETableViewer:withBoolean:", NULL, "V", 0x4, NULL },
    { "setNavigationButtonsVisibleWithRAREiContainer:withBoolean:", NULL, "V", 0x4, NULL },
    { "showChartForSelectedItemExWithRARETableViewer:withRAREStackPaneViewer:withJavaLangBoolean:withBoolean:", NULL, "V", 0x4, NULL },
    { "showChartsViewWithRARETableViewer:", NULL, "V", 0x4, NULL },
    { "showRegularTableWithRAREiContainer:withBoolean:", NULL, "V", 0x4, NULL },
    { "showRegularTableExWithRAREiContainer:", NULL, "V", 0x4, NULL },
    { "showSpreesheetWithRAREiContainer:", NULL, "V", 0x4, NULL },
    { "slideToChartableItemWithBoolean:withBoolean:", NULL, "V", 0x4, NULL },
    { "spreadsheetRowCreatedWithRARETableViewer:withRARERenderableDataItem:withRARERenderableDataItem:", NULL, "V", 0x4, NULL },
    { "updateCardStackTitleWithNSString:withNSString:", NULL, "V", 0x4, NULL },
    { "updateNavigationButtonsWithRAREiContainer:", NULL, "V", 0x4, NULL },
    { "updateSpreadsheetColumnsWithRARETableViewer:", NULL, "V", 0x4, NULL },
    { "updateSpreadsheetRowsWithRARETableViewer:", NULL, "V", 0x4, NULL },
    { "viewerPopulatedWithRAREiViewer:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "DATE_POSITION_", NULL, 0x9, "I" },
    { "NAME_POSITION_", NULL, 0x9, "I" },
    { "VALUE_POSITION_", NULL, 0x9, "I" },
    { "UNIT_POSITION_", NULL, 0x9, "I" },
    { "RANGE_POSITION_", NULL, 0x9, "I" },
    { "MIN_ANGLED_LABEL_HEIGHT_", NULL, 0x9, "I" },
    { "MIN_POINTSLABEL_HEIGHT_", NULL, 0x8, "I" },
    { "currentView_", NULL, 0x4, "LCCPBVResultsViewEnum" },
    { "dataTable_", NULL, 0x4, "LRARETableViewer" },
    { "spreadsheetTable_", NULL, 0x4, "LRARETableViewer" },
    { "hasNoData_", NULL, 0x4, "Z" },
    { "dataLoaded_", NULL, 0x4, "Z" },
    { "spreadsheetPosition_", NULL, 0x4, "I" },
    { "spreadSheetPageSize_", NULL, 0x4, "I" },
    { "dataPageSize_", NULL, 0x4, "I" },
    { "namePrefix_", NULL, 0x4, "LNSString" },
    { "chartHandler_", NULL, 0x4, "LCCPBVaChartHandler" },
    { "transitionAnimation_", NULL, 0x4, "LRAREiTransitionAnimator" },
    { "originalRows_", NULL, 0x4, "LJavaUtilList" },
    { "itemCounts_", NULL, 0x4, "LJavaUtilLinkedHashMap" },
    { "itemDates_", NULL, 0x4, "LIOSObjectArray" },
    { "itemDatesSet_", NULL, 0x4, "LJavaUtilLinkedHashSet" },
    { "chartsLoaded_", NULL, 0x4, "Z" },
    { "keyPath_", NULL, 0x4, "LCCPBVActionPath" },
    { "dateContext_", NULL, 0x4, "LNSObject" },
    { "scriptClassName_", NULL, 0x4, "LNSString" },
    { "selectionChecked_", NULL, 0x4, "Z" },
    { "multiChartMode_", NULL, 0x4, "Z" },
    { "chartableItemsManager_", NULL, 0x4, "LCCPBVaResultsManager_ChartableItemsManager" },
    { "dataLink_", NULL, 0x4, "LRAREActionLink" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager = { "aResultsManager", "com.sparseware.bellavista", NULL, 0x401, 38, methods, 30, fields, 0, NULL};
  return &_CCPBVaResultsManager;
}

@end
@implementation CCPBVaResultsManager_ChartsActionListener

- (void)actionPerformedWithRAREActionEvent:(RAREActionEvent *)e {
  RARESPOTStackPane *cfg = [[RARESPOTStackPane alloc] init];
  [((SPOTBoolean *) nil_chk(cfg->actAsFormViewer_)) setValueWithBoolean:YES];
  [((SPOTPrintableString *) nil_chk(cfg->name_)) setValueWithNSString:@"chartPaneStack"];
  [((SPOTBoolean *) nil_chk(cfg->local_)) setValueWithBoolean:NO];
  [((SPOTPrintableString *) nil_chk(cfg->transitionAnimator_)) setValueWithNSString:@"SlideAnimation"];
  RAREWindowViewer *w = [RAREPlatform getWindowViewer];
  RAREStackPaneViewer *sp = (RAREStackPaneViewer *) check_class_cast([((RAREWindowViewer *) nil_chk(w)) createViewerWithRAREiWidget:w withRARESPOTWidget:cfg], [RAREStackPaneViewer class]);
  [((RAREStackPaneViewer *) nil_chk(sp)) setEventHandlerWithNSString:[RAREiConstants EVENT_LOAD] withId:[NSString stringWithFormat:@"class:%@#onChartsPanelLoaded", this$0_->scriptClassName_] withBoolean:NO];
  this$0_->currentView_ = [CCPBVResultsViewEnum CHARTS];
  [sp setTitleWithNSString:[w getStringWithNSString:[NSString stringWithFormat:@"bv.text.%@", this$0_->namePrefix_]]];
  [CCPBVUtils pushWorkspaceViewerWithRAREiViewer:sp withBoolean:NO];
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_ChartsActionListener = { "ChartsActionListener", "com.sparseware.bellavista", "aResultsManager", 0x4, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVaResultsManager_ChartsActionListener;
}

@end
@implementation CCPBVaResultsManager_ChartableItemsManager

- (id)init {
  if (self = [super init]) {
    chartableSet_ = [[JavaUtilHashSet alloc] init];
    chartableKeys_ = [[JavaUtilArrayList alloc] init];
    filteredChartableKeys_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (BOOL)checkWithNSString:(NSString *)key
             withNSString:(NSString *)value {
  if (key == nil) {
    return NO;
  }
  if (![((JavaUtilHashSet *) nil_chk(chartableSet_)) containsWithId:key]) {
    unichar c = ([((NSString *) nil_chk(value)) sequenceLength] == 0) ? 0 : [value charAtWithInt:0];
    if ((c == '-') && ([value sequenceLength] > 1)) {
      c = [value charAtWithInt:1];
    }
    if ([JavaLangCharacter isDigitWithChar:c]) {
      [chartableSet_ addWithId:key];
      return YES;
    }
    else {
      return NO;
    }
  }
  else {
    return YES;
  }
}

- (NSString *)createCardStackTitleWithNSString:(NSString *)key {
  int n = [((id<JavaUtilList>) nil_chk(chartableKeys_)) indexOfWithId:key];
  if (n == -1) {
    return @"";
  }
  return [((RAREWindowViewer *) nil_chk([RAREPlatform getWindowViewer])) getStringWithNSString:@"bv.format.chart_of" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:n + 1], [JavaLangInteger valueOfWithInt:[chartableKeys_ size]] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
}

- (void)createListWithRARETableViewer:(RARETableViewer *)table
                              withInt:(int)keyColumn {
  int len = [((RARETableViewer *) nil_chk(table)) size];
  id<JavaUtilList> list = chartableKeys_;
  JavaUtilHashSet *set = [[JavaUtilHashSet alloc] initWithInt:[((JavaUtilHashSet *) nil_chk(chartableSet_)) size]];
  [((id<JavaUtilList>) nil_chk(list)) clear];
  for (int i = 0; i < len; i++) {
    RARERenderableDataItem *row = [table getWithInt:i];
    NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getItemWithInt:keyColumn])) getLinkedData], [NSString class]);
    if (key == nil) {
      continue;
    }
    if ([chartableSet_ containsWithId:key] && [set addWithId:key]) {
      [list addWithId:key];
    }
  }
}

- (int)getNextOrPreviousItemWithRARETableViewer:(RARETableViewer *)table
                                    withBoolean:(BOOL)next
                                    withBoolean:(BOOL)unique
                                        withInt:(int)keyColumn {
  if (!unique) {
    return [self getNextOrPreviousItemExWithRARETableViewer:table withBoolean:next withInt:keyColumn];
  }
  int pos = -1;
  id<JavaUtilList> keys = chartableKeys_;
  NSString *key;
  RARERenderableDataItem *row;
  if (![((id<JavaUtilList>) nil_chk(filteredChartableKeys_)) isEmpty]) {
    keys = filteredChartableKeys_;
  }
  do {
    int index = [((RARETableViewer *) nil_chk(table)) getSelectedIndex];
    if (index != -1) {
      row = [table getWithInt:index];
      key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:keyColumn])) getLinkedData], [NSString class]);
      if (key == nil) {
        break;
      }
      int n = [((id<JavaUtilList>) nil_chk(keys)) indexOfWithId:key];
      if (n == -1) {
        break;
      }
      n += next ? 1 : -1;
      if ((n < 0) || (n >= [keys size])) {
        break;
      }
      key = [keys getWithInt:n];
    }
    else {
      if ([((id<JavaUtilList>) nil_chk(keys)) isEmpty]) {
        break;
      }
      key = [keys getWithInt:0];
    }
    int len = [table size];
    while (YES) {
      index += next ? 1 : -1;
      if ((index < 0) || (index >= len)) {
        break;
      }
      row = [table getWithInt:index];
      if ([((NSString *) nil_chk(key)) isEqual:[((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:keyColumn])) getLinkedData]]) {
        if (next) {
          return index;
        }
        pos = index;
      }
    }
  }
  while (NO);
  return pos;
}

- (BOOL)isChartableWithNSString:(NSString *)key {
  return [((JavaUtilHashSet *) nil_chk(chartableSet_)) containsWithId:key];
}

- (void)reset {
  [((id<JavaUtilList>) nil_chk(chartableKeys_)) clear];
  [((JavaUtilHashSet *) nil_chk(chartableSet_)) clear];
}

- (int)getNextOrPreviousItemExWithRARETableViewer:(RARETableViewer *)table
                                      withBoolean:(BOOL)next
                                          withInt:(int)keyColumn {
  JavaUtilHashSet *set = chartableSet_;
  do {
    int index = [((RARETableViewer *) nil_chk(table)) getSelectedIndex];
    int len = [table size];
    while (YES) {
      index += next ? 1 : -1;
      if ((index < 0) || (index >= len)) {
        break;
      }
      RARERenderableDataItem *row = [table getWithInt:index];
      NSString *key = (NSString *) check_class_cast([((RARERenderableDataItem *) nil_chk([((RARERenderableDataItem *) nil_chk(row)) getWithInt:keyColumn])) getLinkedData], [NSString class]);
      if ((key != nil) && [((JavaUtilHashSet *) nil_chk(set)) containsWithId:key]) {
        return index;
      }
    }
  }
  while (NO);
  return -1;
}

- (void)copyAllFieldsTo:(CCPBVaResultsManager_ChartableItemsManager *)other {
  [super copyAllFieldsTo:other];
  other->chartableKeys_ = chartableKeys_;
  other->chartableSet_ = chartableSet_;
  other->filteredChartableKeys_ = filteredChartableKeys_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "checkWithNSString:withNSString:", NULL, "Z", 0x1, NULL },
    { "createCardStackTitleWithNSString:", NULL, "LNSString", 0x1, NULL },
    { "isChartableWithNSString:", NULL, "Z", 0x1, NULL },
    { "getNextOrPreviousItemExWithRARETableViewer:withBoolean:withInt:", NULL, "I", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "chartableSet_", NULL, 0x0, "LJavaUtilHashSet" },
    { "chartableKeys_", NULL, 0x0, "LJavaUtilList" },
    { "filteredChartableKeys_", NULL, 0x0, "LJavaUtilList" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_ChartableItemsManager = { "ChartableItemsManager", "com.sparseware.bellavista", "aResultsManager", 0x8, 4, methods, 3, fields, 0, NULL};
  return &_CCPBVaResultsManager_ChartableItemsManager;
}

@end
@implementation CCPBVaResultsManager_$1

- (void)run {
  [this$0_ updateSpreadsheetRowsWithRARETableViewer:val$table_];
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$
               withRARETableViewer:(RARETableViewer *)capture$0 {
  this$0_ = outer$;
  val$table_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$1 = { "$1", "com.sparseware.bellavista", "aResultsManager", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVaResultsManager_$1;
}

@end
@implementation CCPBVaResultsManager_$2

- (void)run {
  [((RARETableViewer *) nil_chk(val$t_)) scrollRowToVisibleWithInt:val$index_];
}

- (id)initWithRARETableViewer:(RARETableViewer *)capture$0
                      withInt:(int)capture$1 {
  val$t_ = capture$0;
  val$index_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "val$t_", NULL, 0x1012, "LRARETableViewer" },
    { "val$index_", NULL, 0x1012, "I" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$2 = { "$2", "com.sparseware.bellavista", "aResultsManager", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVaResultsManager_$2;
}

@end
@implementation CCPBVaResultsManager_$3

- (id)compute {
  @try {
    return [((CCPBVaChartHandler *) nil_chk(this$0_->chartHandler_)) createSeriesWithJavaUtilList:this$0_->originalRows_ withNSString:val$key_ withInt:[CCPBVaResultsManager RANGE_POSITION]];
  }
  @catch (JavaLangException *e) {
    return e;
  }
}

- (void)finishWithId:(id)result {
  [((RAREWindowViewer *) nil_chk(val$w_)) hideWaitCursor];
  if ((result == nil) || [((RARETableViewer *) nil_chk(val$table_)) isDisposed] || [((RAREStackPaneViewer *) nil_chk(val$sp_)) isDisposed]) {
    return;
  }
  if ([result isKindOfClass:[JavaLangThrowable class]]) {
    [((RARETableViewer *) nil_chk(val$table_)) handleExceptionWithJavaLangThrowable:(JavaLangThrowable *) check_class_cast(result, [JavaLangThrowable class])];
    return;
  }
  RAREChartDataItem *series = (RAREChartDataItem *) check_class_cast(result, [RAREChartDataItem class]);
  RAREChartViewer *cv = [((CCPBVaChartHandler *) nil_chk(this$0_->chartHandler_)) createChartWithRAREiFormViewer:[((RAREStackPaneViewer *) nil_chk(val$sp_)) getFormViewer] withNSString:val$key_ withInt:1 withRAREChartDataItem:series];
  id<RAREiTransitionAnimator> ta = (val$forward_ == nil) ? nil : this$0_->transitionAnimation_;
  if ([CCPBVUtils isCardStack]) {
    [CCPBVCardStackUtils setViewerSubTitleWithRAREiViewer:cv withNSString:[((CCPBVaResultsManager_ChartableItemsManager *) nil_chk(this$0_->chartableItemsManager_)) createCardStackTitleWithNSString:val$key_]];
  }
  [CCPBVUtils setViewerInStackPaneViewerWithRAREStackPaneViewer:val$sp_ withRAREiViewer:cv withRAREiTransitionAnimator:ta withBoolean:(val$forward_ == nil) ? YES : [val$forward_ booleanValue] withBoolean:val$horizontal_ withBoolean:YES];
  [this$0_->chartHandler_ updateZoomButtonsWithRAREiContainer:[val$sp_ getFormViewer]];
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$
                      withNSString:(NSString *)capture$0
              withRAREWindowViewer:(RAREWindowViewer *)capture$1
               withRARETableViewer:(RARETableViewer *)capture$2
           withRAREStackPaneViewer:(RAREStackPaneViewer *)capture$3
               withJavaLangBoolean:(JavaLangBoolean *)capture$4
                       withBoolean:(BOOL)capture$5 {
  this$0_ = outer$;
  val$key_ = capture$0;
  val$w_ = capture$1;
  val$table_ = capture$2;
  val$sp_ = capture$3;
  val$forward_ = capture$4;
  val$horizontal_ = capture$5;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "compute", NULL, "LNSObject", 0x1, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
    { "val$key_", NULL, 0x1012, "LNSString" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$sp_", NULL, 0x1012, "LRAREStackPaneViewer" },
    { "val$forward_", NULL, 0x1012, "LJavaLangBoolean" },
    { "val$horizontal_", NULL, 0x1012, "Z" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$3 = { "$3", "com.sparseware.bellavista", "aResultsManager", 0x8000, 1, methods, 7, fields, 0, NULL};
  return &_CCPBVaResultsManager_$3;
}

@end
@implementation CCPBVaResultsManager_$4

- (void)run {
  if ((this$0_->dataTable_ != nil) && ![this$0_->dataTable_ isDisposed]) {
    [CCPBVUtils popViewerStackWithBoolean:YES];
    [this$0_ reselectDefaultViewEx];
  }
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$4 = { "$4", "com.sparseware.bellavista", "aResultsManager", 0x8000, 0, NULL, 1, fields, 0, NULL};
  return &_CCPBVaResultsManager_$4;
}

@end
@implementation CCPBVaResultsManager_$5

- (void)run {
  [this$0_ updateSpreadsheetRowsWithRARETableViewer:val$table_];
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$
               withRARETableViewer:(RARETableViewer *)capture$0 {
  this$0_ = outer$;
  val$table_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$5 = { "$5", "com.sparseware.bellavista", "aResultsManager", 0x8000, 0, NULL, 2, fields, 0, NULL};
  return &_CCPBVaResultsManager_$5;
}

@end
@implementation CCPBVaResultsManager_$6

- (void)run {
  [((RARETableViewer *) nil_chk(val$table_)) pageEndHorizontal];
  id<RAREiWidget> label = [((id<RAREiFormViewer>) nil_chk([val$table_ getFormViewer])) getWidgetWithNSString:@"tableLabel"];
  if (label != nil) {
    int page = (int) ((this$0_->spreadsheetPosition_ + this$0_->spreadSheetPageSize_ - 1) / this$0_->spreadSheetPageSize_) + 1;
    int pageCount = (int) (((int) [((IOSObjectArray *) nil_chk(this$0_->itemDates_)) count] + this$0_->spreadSheetPageSize_ - 1) / this$0_->spreadSheetPageSize_);
    NSString *s = [((RAREWindowViewer *) nil_chk(val$w_)) getStringWithNSString:@"bv.text.page_of_page" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:page], [JavaLangInteger valueOfWithInt:pageCount] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    [label setValueWithId:s];
  }
  NSString *key = (this$0_->keyPath_ == nil) ? nil : [this$0_->keyPath_ shift];
  if (key == nil) {
    if ([RAREUIScreen isLargeScreen]) {
      [this$0_ selectFirstChartableItemWithRARETableViewer:val$table_ withBoolean:YES];
    }
  }
  else {
    [this$0_ handlePathKeyWithRARETableViewer:val$table_ withNSString:key withInt:0 withBoolean:YES];
  }
}

- (id)initWithCCPBVaResultsManager:(CCPBVaResultsManager *)outer$
               withRARETableViewer:(RARETableViewer *)capture$0
              withRAREWindowViewer:(RAREWindowViewer *)capture$1 {
  this$0_ = outer$;
  val$table_ = capture$0;
  val$w_ = capture$1;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "LCCPBVaResultsManager" },
    { "val$table_", NULL, 0x1012, "LRARETableViewer" },
    { "val$w_", NULL, 0x1012, "LRAREWindowViewer" },
  };
  static J2ObjcClassInfo _CCPBVaResultsManager_$6 = { "$6", "com.sparseware.bellavista", "aResultsManager", 0x8000, 0, NULL, 3, fields, 0, NULL};
  return &_CCPBVaResultsManager_$6;
}

@end
