/*
 * Copyright (C) SparseWare Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.sparseware.bellavista;

import java.util.EventObject;
import java.util.List;

import com.appnativa.rare.Platform;
import com.appnativa.rare.aWorkerTask;
import com.appnativa.rare.iWorkerTask;
import com.appnativa.rare.net.ActionLink;
import com.appnativa.rare.ui.RenderableDataItem;
import com.appnativa.rare.ui.iEventHandler;
import com.appnativa.rare.viewer.WindowViewer;
import com.appnativa.rare.widget.aWidget;
import com.appnativa.rare.widget.iWidget;

/**
 * This is the base class for event handlers that handles events generated by the runtime.
 * If provides some basic functionality for parsing list/table items in the background and
 * invoking a completion method with the results  on the UI thread.
 *
 * @author Don DeCoteau
 *
 */
public abstract class aEventHandler implements iEventHandler {
  public aEventHandler() {}

  @Override
  public void onEvent(String eventName, iWidget widget, EventObject event) {}

  /**
   * Called right before the connection is to be established. Called on the
   * background thread
   */
  protected void connecting() {}

  /**
   * Called if the widget is disposed before the operation was completed. Called
   * on the event thread
   */
  protected void widgetDisposed() {}

  /**
   * Called if the widget is disposed before the operation was completed. Called
   * on the event thread
   */
  protected void errorOccured(Exception e) {
    Utils.handleError(e);
  }

  /**
   * Parses the specified link. The dataParsed method on this object will be
   * called (on the UI thread) when the parsing is complete.
   *
   * @param widget
   *          the widget
   * @param href
   *          the url
   * @param rowInfo
   *          true if the data will have row level information; false otherwise
   * @param tabular
   *          true for table data false for list data
   */
  public void parseDataURL(final aWidget widget, final String href, final boolean rowInfo, final boolean tabular) {
    ActionLink link = Utils.createLink(widget, href, rowInfo);

    parseDataURL(widget, link, tabular);
  }

  /**
   * Parses the specified link. The dataParsed method on this object will be
   * called (on the UI thread) when the parsing is complete.
   *
   * @param widget
   *          the widget
   * @param link
   *          the link
   * @param tabular
   *          true for table data false for list data
   */
  public void parseDataURL(final aWidget widget, final ActionLink link, final boolean tabular) {
    final WindowViewer w    = Platform.getWindowViewer();
    iWorkerTask        task = new aWorkerTask() {
      public Object compute() {

        try {
          if (widget.isDisposed()) {
            return null;
          }

          connecting();

          return widget.parseDataLink(link, tabular);
        } catch(Exception ex) {
          return ex;
        }
      }
      public void finish(Object result) {
        w.hideWaitCursor();

        if (widget.isDisposed()) {
          widgetDisposed();

          return;
        }

        if (result instanceof Exception) {
          errorOccured((Exception) result);

          return;
        }

        dataParsed(widget, (List<RenderableDataItem>) result, link);
      }
    };

    w.getAppContext().executeWorkerTask(task);
    w.showWaitCursor();
  }

  /**
   * Invoked when a call to parseDataURL completes.
   *
   * @param widget
   *          the source widget
   * @param rows
   *          the rows of date
   * @param link
   *          the link that was parsed
   */
  protected abstract void dataParsed(iWidget widget, List<RenderableDataItem> rows, ActionLink link);
}
